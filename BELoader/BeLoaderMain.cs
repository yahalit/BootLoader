using Peak.Can.Basic;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Runtime.CompilerServices.RuntimeHelpers;
using static System.Windows.Forms.LinkLabel;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace BELoader
{

    public partial class BeLoaderMain : Form
    {

        List<PcanChannel> PCANhandles = new List<PcanChannel>();
        List<System.Windows.Forms.ToolTip> tooltips = new List<System.Windows.Forms.ToolTip> { };
        byte[] VirtualProgramBuffer = null ;
        uint minadd;
        uint maxadd;
        uint AddlerChecksum = 0 ;
        bool PCANConnected = false ;
        public PCAN_T PCAN;

        public BeLoaderMain()
        {
            InitializeComponent();
            PCAN = new PCAN_T(); 
        }

        private void BeLoaderMain_Load(object sender, EventArgs e)
        {
            
            Helpers.SetMultilineToolTip(TextBoxHexFile, tooltips, new string[] { "Here is the hexfile generated by the code","It will be loaded internally, checked, and prepared"});
            Helpers.SetMultilineToolTip(BottonSelectHexFile, tooltips, new string[] { "Press to select the hexfile generated by the code", "It will be loaded internally, checked, and prepared" } );

            comboPCAN.DropDownStyle = ComboBoxStyle.DropDownList;
            comboPCAN.IntegralHeight = true;           // let WinForms size the drop list in whole items
            comboPCAN.MaxDropDownItems = 16;           // tune to taste
                                                       // populate at startup
            RefreshPcanCombo();

            // re-enumerate & resize each time the user opens the drop-down
            comboPCAN.DropDown += (s, ee) => RefreshPcanCombo();
        }

        private void RefreshPcanCombo()
        {
            if (PCAN_T.GetAvailblePCAN(out string err, out List<string> desc, out PCANhandles))
            {
                comboPCAN.Items.Clear();
                comboPCAN.Items.AddRange(desc.ToArray());
                // ensure dropdown is wide enough for the longest string
                Helpers.FitDropDownWidth(comboPCAN);  
                comboPCAN.Enabled = true;
                ButtonConnectPCAN.Enabled = true;
            }
            else
            {
                // Nothing
                TextBoxMessageToHumanity.Lines = new string[] { "Could not populate PCAN list", err };
                comboPCAN.Enabled = false;
                ButtonConnectPCAN.Enabled = false;
                return;
            }
        }        
        
        
        /* 
         * Select a hex file for loading 
         */
        private void BottonSelectHexFile_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog dlg = new OpenFileDialog())
            {
                dlg.Title = "Select HEX File";
                dlg.Filter = "HEX files (*.hex)|*.hex";
                dlg.DefaultExt = "hex";
                dlg.CheckFileExists = true;
                dlg.CheckPathExists = true;

                if (dlg.ShowDialog() == DialogResult.OK)
                {
                    string filename = dlg.FileName;

                    // Double-check extension
                    if (System.IO.Path.GetExtension(filename).Equals(".hex", StringComparison.OrdinalIgnoreCase))
                    {
                        // MessageBox.Show("Selected HEX file: " + filename);
                        // Test that the file is legitimate 
                        if ( !HexVirtualSpace_T.FindMinMax(filename, HexVirtualSpace_T.Literals.SectorSize, out minadd, out maxadd , out string ErrCode))
                        {
                            TextBoxMessageToHumanity.Lines = new string [] { $"File: {filename}","Could not interpret Hex file","Expected Tektronix hex format",ErrCode};
                            return; 
                        }
                        TextBoxHexFile.Text = filename;
                        TextBoxMessageToHumanity.Lines = new string[] { "File read successfully to valid Tektronix hex format" };
                        LabelStartAddress.Text = "0X" + minadd.ToString("X");
                        LabelEndAddress.Text = "0X" + maxadd.ToString("X");

                        VirtualProgramBuffer = HexVirtualSpace_T.BuildVirtualSpace(filename, minadd, maxadd);
                        int nWords = VirtualProgramBuffer.Length / 2;
                        ushort[] data = new ushort[nWords]; 
                        for ( int cnt = 0; cnt < nWords / 2; cnt++)
                        {
                            data[cnt]  = (ushort)VirtualProgramBuffer[cnt * 2]; 
                            data[cnt] |= (ushort)((ushort)VirtualProgramBuffer[cnt * 2 + 1] << 8); 
                        }
                        AddlerChecksum = HexVirtualSpace_T.ComputeAdler32(data, (int)0, nWords);
                        LabelAdler32.Text = "0X" + AddlerChecksum.ToString("X");
                    }
                    else
                    {
                        MessageBox.Show("You must select a file with the .hex extension.", "Invalid file",
                                        MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
            }

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void ButtonConnectPCAN_Click(object sender, EventArgs e)
        {
            if ( !PCAN_T.InitPCAN(PCANhandles[comboPCAN.SelectedIndex], out string errMsg) )
            {
                TextBoxMessageToHumanity.Lines = new string[] { "Cannot Initialize PCAN", errMsg };
                return;
            }
            PCANConnected = true ;
            ButtonConnectPCAN.Enabled = false; // Act once button 

        }

        private void technicianToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void toolStripMenuBurnSerial_Click(object sender, EventArgs e)
        {

        }

        private void menuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }
    }
}
