<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCANBasic.NET</name>
    </assembly>
    <members>
        <member name="T:Peak.Can.Basic.Interop.TPCANType">
            <summary>
            Represents the type of PCAN (non plug and play) hardware to be initialized
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.TPCANType.None">
            <summary>
            None. No hardware type sset 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.TPCANType.PCAN_TYPE_ISA">
            <summary>
            PCAN-ISA 82C200
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.TPCANType.PCAN_TYPE_ISA_SJA">
            <summary>
            PCAN-ISA SJA1000
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.TPCANType.PCAN_TYPE_ISA_PHYTEC">
            <summary>
            PHYTEC ISA 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.TPCANType.PCAN_TYPE_DNG">
            <summary>
            PCAN-Dongle 82C200
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.TPCANType.PCAN_TYPE_DNG_EPP">
            <summary>
            PCAN-Dongle EPP 82C200
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.TPCANType.PCAN_TYPE_DNG_SJA">
            <summary>
            PCAN-Dongle SJA1000
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.TPCANType.PCAN_TYPE_DNG_SJA_EPP">
            <summary>
            PCAN-Dongle EPP SJA1000
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.Interop.PCANMsg">
            <summary>
            Represents a PCAN message
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.Interop.PCANMsg.#ctor(System.UInt32,Peak.Can.Basic.MessageType,System.Byte,System.Byte[])">
            <summary>
            Initializes a <see cref="T:Peak.Can.Basic.Interop.PCANMsg"/> structure with the given values.
            </summary>
            <param name="id">11/29-bit message identifier.</param>
            <param name="msgType">Type of the message.</param>
            <param name="dlc">Data Length Code of the message (0..15).</param>
            <param name="data">Data bytes.</param>
            <remarks>If the length of <paramref name="data"/> is greater than <see cref="F:Peak.Can.Basic.ParameterValue.MaxCanDataLength"/>, it will be truncated.</remarks>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANMsg.ID">
            <summary>
            11/29-bit message identifier
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANMsg.MSGTYPE">
            <summary>
            Type of the message
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANMsg.LEN">
            <summary>
            Data Length Code of the message (0..15)
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANMsg.DATA">
            <summary>
            Data of the message (DATA[0]..DATA[7])
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.Interop.PCANTimestamp">
            <summary>
            Represents a timestamp of a received PCAN message.
            Total Microseconds = micros + 1000 * millis + 0x100000000 * 1000 * millis_overflow
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANTimestamp.millis">
            <summary>
            Base-value: milliseconds: 0.. 2^32-1
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANTimestamp.millis_overflow">
            <summary>
            Roll-arounds of millis
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANTimestamp.micros">
            <summary>
            Microseconds: 0..999
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.Interop.PCANMsgFD">
            <summary>
            Represents a PCAN message from a FD capable hardware
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.Interop.PCANMsgFD.#ctor(System.UInt32,Peak.Can.Basic.MessageType,System.Byte,System.Byte[])">
            <summary>
            Initializes a <see cref="T:Peak.Can.Basic.Interop.PCANMsgFD"/> structure with the given values.
            </summary>
            <param name="id">11/29-bit message identifier.</param>
            <param name="msgType">Type of the message.</param>
            <param name="length">Data Length Code of the message (0..15).</param>
            <param name="data">Data bytes.</param>
            <remarks>If the length of <paramref name="data"/> is greater than <see cref="F:Peak.Can.Basic.ParameterValue.MaxCanFdDataLength"/>, it will be truncated.</remarks>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANMsgFD.ID">
            <summary>
            11/29-bit message identifier
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANMsgFD.MSGTYPE">
            <summary>
            Type of the message
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANMsgFD.DLC">
            <summary>
            Data Length Code of the message (0..15)
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANMsgFD.DATA">
            <summary>
            Data of the message (DATA[0]..DATA[63])
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.Interop.PCANChannelInformation">
            <summary>
            Describes an existing PCAN channel
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANChannelInformation.channel_handle">
            <summary>
            PCAN channel handle
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANChannelInformation.device_type">
            <summary>
            Kind of PCAN device
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANChannelInformation.controller_number">
            <summary>
            CAN-Controller number
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANChannelInformation.device_features">
            <summary>
            Device capabilities flag (see FEATURE_*)
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANChannelInformation.device_name">
            <summary>
            Device name
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANChannelInformation.device_id">
            <summary>
            Device number
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Interop.PCANChannelInformation.channel_condition">
            <summary>
            Availability status of a PCAN-Channel
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus">
            <summary>
            Represents a PCAN status/error code.
            </summary>
            <remarks>
            The <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> values are able to be bitwise combined. In some cases it is possible to get more than one error code 
            as result of calling a function. 
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK">
            <summary>
            No error. Success. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_XMTFULL">
            <summary>
            The transmit buffer in CAN controller is full. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OVERRUN">
            <summary>
            The CAN controller was read too late.    
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSLIGHT">
            <summary>
            Bus error: an error counter reached the 'light' limit. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSHEAVY">
            <summary>
            Bus error: an error counter reached the 'heavy' limit. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSWARNING">
            <summary>
            Bus error: an error counter reached the 'warning' limit. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSPASSIVE">
            <summary>
            Bus error: the CAN controller is error passive. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF">
            <summary>
            Bus error: the CAN controller is in bus-off state.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ANYBUSERR">
            <summary>
            Mask for all bus errors. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY">
            <summary>
            The reception queue is empty. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QOVERRUN">
            <summary>
            The reception queue was read too late. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QXMTFULL">
            <summary>
            The transmission queue is full. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_REGTEST">
            <summary>
            The test of the CAN controller hardware registers failed (no hardware found). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_NODRIVER">
            <summary>
            The driver of the used PCAN device is not loaded.  
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_HWINUSE">
            <summary>
            The PCAN-Hardware has already a PCAN-Net attached.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_NETINUSE">
            <summary>
            A PCAN-Net has already a PCAN-Client attached.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW">
            <summary>
            The handle of the PCAN-Hardware is invalid. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLNET">
            <summary>
            The handle of the PCAN-Net is invalid. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLCLIENT">
            <summary>
            The handle of the PCAN-Client is invalid. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE">
            <summary>
            Mask for all handle errors.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_RESOURCE">
            <summary>
            An internal resource (FIFO, Client, timeout) cannot be created. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMTYPE">
            <summary>
            Unknown parameter.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL">
            <summary>
            Invalid parameter value. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_UNKNOWN">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLDATA">
            <summary>
            An action, function, or data is invalid within the current context.  
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLMODE">
            <summary>
            The device driver object state is wrong for the attempted operation.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_CAUTION">
            <summary>
            An operation was successfully carried out, however, irregularities were registered.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE">
            <summary>
            The PCAN Channel is not (or could not be) initialized.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION">
            <summary>
            An invalid operation was registered.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANDevice">
            <summary>
            Represents the type of interface and driver a device uses. 
            </summary>
            <remarks>
            The <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_PEAKCAN"/> and <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_VIRTUAL"/> 
            are not supported by the PCAN-Basic API.
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_NONE">
            <summary>
            Undefined, unknown or not selected PCAN device value. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_PEAKCAN">
            <summary>
            PCAN non plug-and-play devices. 
            <note type="important">This PCAN device is not supported.</note>
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_ISA">
            <summary>
            PCAN-ISA, PCAN-PC/104 devices. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_DNG">
            <summary>
            PCAN-Dongle.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_PCI">
            <summary>
            PCAN-PCI, PCAN-cPCI, PCAN-miniPCI, PCAN-PC/104-Plus, PCAN-PCI Express, PCAN-PCIe FD, PCAN-PCI FD, PCAN-Chip PCIe. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_USB">
            <summary>
            PCAN-USB, PCAN-USB Pro, PCAN-USB FD, PCAN-USB Pro FD, PCAN-Chip USB. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_PCC">
            <summary>
            PCAN-PC Card.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_VIRTUAL">
            <summary>
            PCAN Virtual hardware. 
            <note type="important">This PCAN device is not supported.</note>
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_LAN">
            <summary>
            PCAN-Gateway, and PCAN-Gateway FD PCAN devices.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANParameter">
            <summary>
            Represents a PCAN parameter or a PCAN Value that can be read or set. 
            </summary>
            <remarks>
             <para>With some exceptions, a channel must first be initialized before their parameters can be read or set.</para>
             <note type="important">
             For more information about each parameter, please refer to the companion PDF documentation <b>PCAN-Parameter_Documentation.pdf</b>.
             </note>
            </remarks>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_DEVICE_ID">
            <summary>
            Device identifier parameter. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_DEVICE_NUMBER">
            <summary>
            DEPRECATED parameter. Use <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_DEVICE_ID"/> instead.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_5VOLTS_POWER">
            <summary>
            PCAN "5-volt power" parameter. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_RECEIVE_EVENT">
            <summary>
            PCAN receive event handler parameter. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_MESSAGE_FILTER">
            <summary>
            PCAN message filter parameter.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_API_VERSION">
            <summary>
            PCAN-Basic API version parameter.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_CHANNEL_VERSION">
            <summary>
            PCAN device channel version parameter.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSOFF_AUTORESET">
            <summary>
            PCAN "reset on bus-off" parameter.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LISTEN_ONLY">
            <summary>
            PCAN "listen-only" parameter.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LOG_LOCATION">
            <summary>
            Directory path for log files.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LOG_STATUS">
            <summary>
            Debug-Log activation status.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LOG_CONFIGURE">
            <summary>
            Configuration of the debugged information (LOG_FUNCTION_***).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LOG_TEXT">
            <summary>
            Custom insertion of text into the log file.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_CHANNEL_CONDITION">
            <summary>
            Availability status of a PCAN Channel.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARDWARE_NAME">
            <summary>
            PCAN "hardware name" parameter.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_RECEIVE_STATUS">
            <summary>
            "Receive Status" parameter for incoming messages. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_CONTROLLER_NUMBER">
            <summary>
            Zero-based index of a CAN-Controller in a PCAN device. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_TRACE_LOCATION">
            <summary>
            Directory path for PCAN trace files.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_TRACE_STATUS">
            <summary>
            PCAN tracing activation status.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_TRACE_SIZE">
            <summary>
            Configuration of the maximum file size of a PCAN trace.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_TRACE_CONFIGURE">
            <summary>
            Configuration of the trace file storing modes (TRACE_FILE_***). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_CHANNEL_IDENTIFYING">
            <summary>
            Physical identification of an USB based PCAN Channel.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_CHANNEL_FEATURES">
            <summary>
            Capabilities of a PCAN device (FEATURE_***). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BITRATE_ADAPTING">
            <summary>
            Attachment to an existing connection with unknown/different bit rate. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BITRATE_INFO">
            <summary>
            Current bit rate as BTR0BTR1 value (standard CAN 2.0 A/B). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BITRATE_INFO_FD">
            <summary>
            Current bit rate as FD String value (CAN-FD). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSSPEED_NOMINAL">
            <summary>
            Current CAN nominal speed in bits/second.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSSPEED_DATA">
            <summary>
            Current CAN data speed in bits/second.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_IP_ADDRESS">
            <summary>
            Remote address as a IPv4 formated string. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LAN_SERVICE_STATUS">
            <summary>
            Running status of the Virtual PCAN-Gateway Service.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_ALLOW_STATUS_FRAMES">
            <summary>
            "Receive Status" parameter for Status frames. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_ALLOW_RTR_FRAMES">
            <summary>
            "Receive Status" parameter for RTR frames. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_ALLOW_ERROR_FRAMES">
            <summary>
            "Receive Status" parameter for Error frames. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_INTERFRAME_DELAY">
            <summary>
            Delay, in microseconds, between sending frames. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_ACCEPTANCE_FILTER_11BIT">
            <summary>
            Acceptance filter over code and mask for 11-bit CAN IDs. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_ACCEPTANCE_FILTER_29BIT">
            <summary>
            Acceptance filter over code and mask for 29-bit CAN IDs. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_IO_DIGITAL_CONFIGURATION">
            <summary>
            Activation of digital pins as outputs. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_IO_DIGITAL_VALUE">
            <summary>
            Multiple setting of digital pin values. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_IO_DIGITAL_SET">
            <summary>
            Selective setting of digital pin values to "high". 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_IO_DIGITAL_CLEAR">
            <summary>
            Selective setting of digital pin values to "low". 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_IO_ANALOG_VALUE">
            <summary>
            Value reading of a single analog pin. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_FIRMWARE_VERSION">
            <summary>
            Firmware version of a PCAN device. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_ATTACHED_CHANNELS_COUNT">
            <summary>
            Amount of PCAN channels attached to a system. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_ATTACHED_CHANNELS">
            <summary>
            Information about PCAN channels attached to a system. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_ALLOW_ECHO_FRAMES">
            <summary>
            "Receive Status" parameter for Echo frames. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_DEVICE_PART_NUMBER">
            <summary>
            PEAK's device part number (IPEH number). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS">
            <summary>
            Activation status of hard reset processing via PCANBasic.Reset calls.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LAN_CHANNEL_DIRECTION">
            <summary>
            Communication direction of a PCAN Channel representing a PCAN-LAN interface.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_DEVICE_GUID">
            <summary>
            Get the global unique device identifier (GUID) associated to a device
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType">
            <summary>
            Represents the type of a CAN message. 
            </summary>
            <remarks>
            <para>Several message types can be combined (bit mask value).</para>
            <note type="important">
                Messages with type <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_FD"/>, 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_BRS"/>, 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_ESI"/>, or a combination of them, can only be sent/received 
                using the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> and
                <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> methods.
            </note>
            </remarks>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/>
            <conceptualLink target="d8b8c576-cc90-4757-a914-4a503f9553d1"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_STANDARD">
            <summary>
            The PCAN message is a CAN Standard Frame (11-bit identifier). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_RTR">
            <summary>
            The PCAN message is a CAN Remote-Transfer-Request Frame. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_EXTENDED">
            <summary>
            The PCAN message is a CAN Extended Frame (29-bit identifier). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_FD">
            <summary>
            The PCAN message represents a FD frame in terms of CiA specifications. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_BRS">
            <summary>
            The PCAN message represents a FD bit rate switch (CAN data at a higher bit rate). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_ESI">
            <summary>
            The PCAN message represents a FD error state indicator(CAN FD transmitter was error active). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_ECHO">
            <summary>
            The PCAN message represents an echo CAN Frame ( self-received message). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_ERRFRAME">
            <summary>
            The PCAN message represents an error frame. See <conceptualLink target="d8b8c576-cc90-4757-a914-4a503f9553d1"/> for more information. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_STATUS">
            <summary>
            The PCAN message represents a PCAN status frame. See <conceptualLink target="080b4916-e4c0-4ebf-aec7-956dc31eb5ab"/> for more information. 
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANMode">
            <summary>
            Represents a PCAN filter mode.
            </summary>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.FilterMessages(System.UInt16,System.UInt32,System.UInt32,Peak.Can.Basic.BackwardCompatibility.TPCANMode)" autoUpgrade="true"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMode.PCAN_MODE_STANDARD">
            <summary>
            Mode is Standard (11-bit identifier). 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMode.PCAN_MODE_EXTENDED">
            <summary>
            Mode is Extended (29-bit identifier).
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate">
            <summary>
            Represents a PCAN bit rate register value.
            </summary>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_1M">
            <summary>
            1 MBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_800K">
            <summary>
            800 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_500K">
            <summary>
            500 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_250K">
            <summary>
            250 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_125K">
            <summary>
            125 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_100K">
            <summary>
            100 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_95K">
            <summary>
            95,238 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_83K">
            <summary>
            83,333 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_50K">
            <summary>
            50 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_47K">
            <summary>
            47,619 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_33K">
            <summary>
            33,333 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_20K">
            <summary>
            20 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_10K">
            <summary>
            10 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate.PCAN_BAUD_5K">
            <summary>
            5 kBit/s.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANType">
            <summary>
            Represents the type of PCAN (non plug-and-play) hardware to be initialized. 
            </summary>
            <remarks>These values are only required when non plug-and-play PCAN Channels are used. These are to be initialized 
            by using the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate,Peak.Can.Basic.BackwardCompatibility.TPCANType,System.UInt32,System.UInt16)"/> 
            method.</remarks>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate,Peak.Can.Basic.BackwardCompatibility.TPCANType,System.UInt32,System.UInt16)"/> 
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANType.PCAN_TYPE_ISA">
            <summary>
            PCAN-ISA 82C200.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANType.PCAN_TYPE_ISA_SJA">
            <summary>
            PCAN-ISA SJA1000.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANType.PCAN_TYPE_ISA_PHYTEC">
            <summary>
            PHYTEC ISA.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANType.PCAN_TYPE_DNG">
            <summary>
            PCAN-Dongle 82C200.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANType.PCAN_TYPE_DNG_EPP">
            <summary>
            PCAN-Dongle EPP 82C200.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANType.PCAN_TYPE_DNG_SJA">
            <summary>
            PCAN-Dongle SJA1000.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANType.PCAN_TYPE_DNG_SJA_EPP">
            <summary>
            PCAN-Dongle EPP SJA1000.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANMsg">
            <summary>
            Represents a PCAN message.
            </summary>
            <remarks>
            The members of this structure are sequentially byte aligned.
            <note type="important">
            <para>
                The <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANMsg"/> structure is intended for reading and writing standard CAN messages on PCAN Channels initialized for standard CAN 2.0 A/B communication, this is,  
                using the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method for initialization and the methods 
                <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Write(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> 
                for data transmission.
            </para>
            <para>
                For CAN communication using flexible data rate, the <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD"/> structure is to be used.
            </para>
            </note>
            </remarks>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Write(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsg.ID">
            <summary>
            A 11/29-bit CAN message identifier.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsg.MSGTYPE">
            <summary>
            The kind of CAN frame represented by this value.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsg.LEN">
            <summary>
            The Data Length Code of the message (0..8).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsg.DATA">
            <summary>
            The data associated to the CAN message (DATA[0]..DATA[7]).
            <note type="important">This array must be explicitly created, for instance: 
            <code source="Examples\CS\Program.cs" region="BackwardCompatibility.TPCANMsg.DATA" language="cs"/>
            <code source="Examples\VB\Program.vb" region="BackwardCompatibility.TPCANMsg.DATA" language="vb"/>
            <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.TPCANMsg.DATA" language="cpp"/>
            before a variable of this type can be used in any API function. </note>
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp">
            <summary>
            Defines a time-stamp of a CAN message. The time-stamp contains the number of microseconds since the start of Windows.
            </summary>
            <remarks>
            <note type="important">
            <para>
                The <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp"/> structure is intended only for retrieving the reception time of standard CAN messages of PCAN Channels 
                initialized for standard CAN 2.0 A/B communication, this is, using the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> 
                method for initialization and the  <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@,Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp@)"/> method for data reading.
            </para>
            </note>
            <para>The members of this structure are sequentially byte aligned. </para>
            <para>Calculation of total of microseconds : <b>micros + 1000 * millis + 0x100000000 * 1000 * millis_overflow</b></para>
            </remarks>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@,Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp@)"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp.millis">
            <summary>
            Represents the base-value of the timestamp, in milliseconds (0.. 2^32-1).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp.millis_overflow">
            <summary>
            Represents the roll-around value of <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp.millis"/>.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp.micros">
            <summary>
            Represents the microseconds part of the timestamp (0..999).
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD">
            <summary>
            Defines a CAN message with flexible data rate.
            </summary>
            
            <remarks>
            <para>The members of this structure are sequentially byte aligned.</para>
            <para>
            <b>Longer Data field with CAN FD messages:</b>
            </para>
            <list type="table">
                <listheader>
                    <term>DLC</term>
                    <term>Data Bytes</term>
                </listheader>
                <item>
                    <description>0</description>
                    <description>0</description>
                </item>
                <item>
                    <description>1</description>
                    <description>1</description>
                </item>
                <item>
                    <description>2</description>
                    <description>2</description>
                </item>
                <item>
                    <description>3</description>
                    <description>3</description>
                </item>
                <item>
                    <description>4</description>
                    <description>4</description>
                </item>
                <item>
                    <description>5</description>
                    <description>5</description>
                </item>
                <item>
                    <description>6</description>
                    <description>6</description>
                </item>
                <item>
                    <description>7</description>
                    <description>7</description>
                </item>
                <item>
                    <description>8</description>
                    <description>8</description>
                </item>
                <item>
                    <description>9</description>
                    <description>12</description>
                </item>
                <item>
                    <description>10</description>
                    <description>16</description>
                </item>
                <item>
                    <description>11</description>
                    <description>20</description>
                </item>
                <item>
                    <description>12</description>
                    <description>24</description>
                </item>
                <item>
                    <description>13</description>
                    <description>32</description>
                </item>
                <item>
                    <description>14</description>
                    <description>48</description>
                </item>
                <item>
                    <description>15</description>
                    <description>64</description>
                </item>
            </list>
            <note type="important">
            <para>
                The <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD"/> structure is intended for reading and writing standard CAN messages as well as CAN messages with flexible data rate on PCAN Channels initialized 
                for standard CAN-FD communication, this is, using the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> 
                method for initialization and the methods <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> and 
                <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> for data transmission.
            </para>
            <para>
                For CAN communication using only the standard CAN 2.0 A/B, the <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANMsg"/> structure is to be used.
            </para>
            </note>
            </remarks>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD.ID">
            <summary>
            A 11/29-bit CAN message identifier.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD.MSGTYPE">
            <summary>
            The kind of CAN frame represented by this value.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD.DLC">
            <summary>
            The Data Length Code of the message (0..15).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD.DATA">
            <summary>
            The data associated to the CAN message (DATA[0]..DATA[63]).
            <note type="important">This array must be explicitly created, for instance: 
            <code source="Examples\CS\Program.cs" region="BackwardCompatibility.TPCANMsgFD.DATA" language="cs"/>
            <code source="Examples\VB\Program.vb" region="BackwardCompatibility.TPCANMsgFD.DATA" language="vb"/>
            <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.TPCANMsgFD.DATA" language="cpp"/>
            before a variable of this type can be used in any API function. </note>
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation">
            <summary>
            Describes an existing PCAN Channel.
            </summary>
            <remarks>The members of this structure are sequentially byte aligned.</remarks>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation.channel_handle">
            <summary>
            The handle of the PCAN Channel.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation.device_type">
            <summary>
            The kind of PCAN device represented by a PCAN Channel.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation.controller_number">
            <summary>
            The index (0-based) of the CAN controller represented by a PCAN Channel.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation.device_features">
            <summary>
            The special features of which a PCAN channel is capable (see FEATURE_*).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation.device_name">
            <summary>
            The name of the PCAN Device represented by a PCAN Channel.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation.device_id">
            <summary>
            The identifier number associated to a PCAN Chanel.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation.channel_condition">
            <summary>
            The availability status of a PCAN Channel.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#AVAILABILITY"/>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.PCANBasic">
            <summary>
            PCAN-Basic API class implementation
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_NONEBUS">
            <summary>
            Undefined/default value for a PCAN bus
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_ISABUS1">
            <summary>
            PCAN-ISA interface, channel 1
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_ISABUS2">
            <summary>
            PCAN-ISA interface, channel 2
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_ISABUS3">
            <summary>
            PCAN-ISA interface, channel 3
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_ISABUS4">
            <summary>
            PCAN-ISA interface, channel 4
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_ISABUS5">
            <summary>
            PCAN-ISA interface, channel 5
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_ISABUS6">
            <summary>
            PCAN-ISA interface, channel 6
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_ISABUS7">
            <summary>
            PCAN-ISA interface, channel 7
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_ISABUS8">
            <summary>
            PCAN-ISA interface, channel 8
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_DNGBUS1">
            <summary>
            PPCAN-Dongle/LPT interface, channel 1 
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS1">
            <summary>
            PCAN-PCI interface, channel 1
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS2">
            <summary>
            PCAN-PCI interface, channel 2
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS3">
            <summary>
            PCAN-PCI interface, channel 3
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS4">
            <summary>
            PCAN-PCI interface, channel 4
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS5">
            <summary>
            PCAN-PCI interface, channel 5
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS6">
            <summary>
            PCAN-PCI interface, channel 6
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS7">
            <summary>
            PCAN-PCI interface, channel 7
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS8">
            <summary>
            PCAN-PCI interface, channel 8
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS9">
            <summary>
            PCAN-PCI interface, channel 9
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS10">
            <summary>
            PCAN-PCI interface, channel 10
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS11">
            <summary>
            PCAN-PCI interface, channel 11
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS12">
            <summary>
            PCAN-PCI interface, channel 12
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS13">
            <summary>
            PCAN-PCI interface, channel 13
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS14">
            <summary>
            PCAN-PCI interface, channel 14
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS15">
            <summary>
            PCAN-PCI interface, channel 15
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS16">
            <summary>
            PCAN-PCI interface, channel 16
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1">
            <summary>
            PCAN-USB interface, channel 1
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS2">
            <summary>
            PCAN-USB interface, channel 2
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS3">
            <summary>
            PCAN-USB interface, channel 3
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS4">
            <summary>
            PCAN-USB interface, channel 4
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS5">
            <summary>
            PCAN-USB interface, channel 5
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS6">
            <summary>
            PCAN-USB interface, channel 6
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS7">
            <summary>
            PCAN-USB interface, channel 7
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS8">
            <summary>
            PCAN-USB interface, channel 8
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS9">
            <summary>
            PCAN-USB interface, channel 9
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS10">
            <summary>
            PCAN-USB interface, channel 10
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS11">
            <summary>
            PCAN-USB interface, channel 11
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS12">
            <summary>
            PCAN-USB interface, channel 12
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS13">
            <summary>
            PCAN-USB interface, channel 13
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS14">
            <summary>
            PCAN-USB interface, channel 14
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS15">
            <summary>
            PCAN-USB interface, channel 15
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS16">
            <summary>
            PCAN-USB interface, channel 16
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCCBUS1">
            <summary>
            PCAN-PC Card interface, channel 1
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCCBUS2">
            <summary>
            PCAN-PC Card interface, channel 2
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS1">
            <summary>
            PCAN-LAN interface, channel 1
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS2">
            <summary>
            PCAN-LAN interface, channel 2
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS3">
            <summary>
            PCAN-LAN interface, channel 3
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS4">
            <summary>
            PCAN-LAN interface, channel 4
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS5">
            <summary>
            PCAN-LAN interface, channel 5
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS6">
            <summary>
            PCAN-LAN interface, channel 6
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS7">
            <summary>
            PCAN-LAN interface, channel 7
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS8">
            <summary>
            PCAN-LAN interface, channel 8
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS9">
            <summary>
            PCAN-LAN interface, channel 9
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS10">
            <summary>
            PCAN-LAN interface, channel 10
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS11">
            <summary>
            PCAN-LAN interface, channel 11
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS12">
            <summary>
            PCAN-LAN interface, channel 12
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS13">
            <summary>
            PCAN-LAN interface, channel 13
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS14">
            <summary>
            PCAN-LAN interface, channel 14
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS15">
            <summary>
            PCAN-LAN interface, channel 15
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_LANBUS16">
            <summary>
            PCAN-LAN interface, channel 16
            </summary>
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_CLOCK">
            <summary>
            Clock frequency in hertz (80000000, 60000000, 40000000, 30000000, 24000000, 20000000)
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#FREQUENCY"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_CLOCK_MHZ">
            <summary>
            Clock frequency in megahertz (80, 60, 40, 30, 24, 20)
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#FREQUENCY"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_NOM_BRP">
            <summary>
            Clock prescaler for nominal time quantum
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#NOMINAL"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_NOM_TSEG1">
            <summary>
            TSEG1 segment for nominal bit rate in time quanta
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#NOMINAL"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_NOM_TSEG2">
            <summary>
            TSEG2 segment for nominal bit rate in time quanta
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#NOMINAL"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_NOM_SJW">
            <summary>
            Synchronization Jump Width for nominal bit rate in time quanta
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#NOMINAL"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_NOM_SAMPLE">
            <summary>
            Sample point for nominal bit rate
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#NOMINAL"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_DATA_BRP">
            <summary>
            Clock prescaler for high-speed data time quantum
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#DATA"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_DATA_TSEG1">
            <summary>
            TSEG1 segment for fast data bit rate in time quanta
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#DATA"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_DATA_TSEG2">
            <summary>
            TSEG2 segment for fast data bit rate in time quanta
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#DATA"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_DATA_SJW">
            <summary>
            Synchronization Jump Width for high-speed data bit rate in time quanta
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#DATA"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_BR_DATA_SAMPLE">
            <summary>
            Secondary sample point delay for high-speed data bit rate in cycles
            </summary>
            <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a#DATA"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PARAMETER_OFF">
            <summary>
            The PCAN parameter is not set (inactive).
            </summary>
            
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#ACTIVATION">Group of Activation Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PARAMETER_ON">
            <summary>
            The PCAN parameter is set (active).
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#ACTIVATION">Group of Activation Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_FILTER_CLOSE">
            <summary>
            The PCAN filter is closed. No messages will be received.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#FILTER">Group of Filter Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_FILTER_OPEN">
            <summary>
            The PCAN filter is fully opened. All messages will be received.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#FILTER">Group of Filter Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_FILTER_CUSTOM">
            <summary>
            The PCAN filter is custom configured. Only registered. 
            messages will be received
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#FILTER">Group of Filter Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_CHANNEL_UNAVAILABLE">
            <summary>
            The PCAN Channel handle is illegal, or its associated hardware is not available.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#AVAILABILITY">Group of Channel Availability Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_CHANNEL_AVAILABLE">
            <summary>
            The PCAN Channel handle is available to be connected (PnP Hardware: it means furthermore that the hardware is plugged-in).
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#AVAILABILITY">Group of Channel Availability Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_CHANNEL_OCCUPIED">
            <summary>
            The PCAN Channel handle is valid, and is already being used.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#AVAILABILITY">Group of Channel Availability Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_CHANNEL_PCANVIEW">
            <summary>
            The PCAN Channel handle is already being used by a PCAN-View application, but is available to connect.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#AVAILABILITY">Group of Channel Availability Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOG_FUNCTION_DEFAULT">
            <summary>
            Logs system exceptions / errors.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#LOG">Group of Log Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOG_FUNCTION_ENTRY">
            <summary>
            Logs the entries to the PCAN-Basic API functions.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#LOG">Group of Log Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOG_FUNCTION_PARAMETERS">
            <summary>
            Logs the parameters passed to the PCAN-Basic API functions.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#LOG">Group of Log Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOG_FUNCTION_LEAVE">
            <summary>
            Logs the exits from the PCAN-Basic API functions.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#LOG">Group of Log Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOG_FUNCTION_WRITE">
            <summary>
            Logs the CAN messages passed to the CAN_Write function.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#LOG">Group of Log Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOG_FUNCTION_READ">
            <summary>
            Logs the CAN messages received within the CAN_Read function.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#LOG">Group of Log Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOG_FUNCTION_ALL">
            <summary>
            Logs all possible information within the PCAN-Basic API functions.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#LOG">Group of Log Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.TRACE_FILE_SINGLE">
            <summary>
            A single file is written until it size reaches PAN_TRACE_SIZE.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#TRACE">Group of Trace Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.TRACE_FILE_SEGMENTED">
            <summary>
            Traced data is distributed in several files with size PAN_TRACE_SIZE.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#TRACE">Group of Trace Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.TRACE_FILE_DATE">
            <summary>
            Includes the date into the name of the trace file.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#TRACE">Group of Trace Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.TRACE_FILE_TIME">
            <summary>
            Includes the start time into the name of the trace file.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#TRACE">Group of Trace Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.TRACE_FILE_OVERWRITE">
            <summary>
            Causes the overwriting of available traces (same name).
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#TRACE">Group of Trace Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.TRACE_FILE_DATA_LENGTH">
            <summary>
            Causes using the data length column ('l') instead of the DLC column ('L') in the trace file.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#TRACE">Group of Trace Configuration Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.FEATURE_FD_CAPABLE">
            <summary>
            Device supports flexible data-rate (CAN-FD).
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#FEATURES">Group of Feature Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.FEATURE_DELAY_CAPABLE">
            <summary>
            Device supports a delay between sending frames (FPGA based USB devices).
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#FEATURES">Group of Feature Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.FEATURE_IO_CAPABLE">
            <summary>
            Device supports I/O functionality for electronic circuits (USB-Chip devices).
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#FEATURES">Group of Feature Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SERVICE_STATUS_STOPPED">
            <summary>
            The service is not running.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#SERVICE">Group of Service Status Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SERVICE_STATUS_RUNNING">
            <summary>
            The service is running.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#SERVICE">Group of Service Status Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LAN_DIRECTION_READ">
            <summary>
            The PCAN Channel is limited to incoming communication only.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#DIRECTION">Group of Channel Direction Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LAN_DIRECTION_WRITE">
            <summary>
            The PCAN Channel is limited to outgoing communication only.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#DIRECTION">Group of Channel Direction Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LAN_DIRECTION_READ_WRITE">
            <summary>
            The PCAN Channel communication is bidirectional.
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#DIRECTION">Group of Channel Direction Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOOKUP_DEVICE_TYPE">
            <summary>
            Searches a PCAN Channel by its device type (see <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANDevice"/>).
            </summary>
            <conceptualLink target="658b0b09-b0f2-4b7b-bf89-e892ab46a578"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOOKUP_DEVICE_ID">
            <summary>
            Searches a PCAN Channel by its device identifier.
            </summary>
            <conceptualLink target="658b0b09-b0f2-4b7b-bf89-e892ab46a578"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOOKUP_CONTROLLER_NUMBER">
            <summary>
            Searches a PCAN Channel by its 0-based CAN controller index.
            </summary>
            <conceptualLink target="658b0b09-b0f2-4b7b-bf89-e892ab46a578"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOOKUP_IP_ADDRESS">
            <summary>
            Searches a PCAN Channel by its IP address (<see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANDevice.PCAN_LAN"/> Channels only. See 
            <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e#LAN">PCAN-LAN Handles</conceptualLink>).
            </summary>
            <conceptualLink target="658b0b09-b0f2-4b7b-bf89-e892ab46a578"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LOOKUP_DEVICE_GUID">
            <summary>
            Searches a PCAN Channel by its device unique identifier (USB channels only)
            </summary>
            <conceptualLink target="658b0b09-b0f2-4b7b-bf89-e892ab46a578"/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.MAX_LENGTH_HARDWARE_NAME">
            <summary>
            Represents the maximum length that the name of a device can have (32 characters + terminator).
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#CONSTANTS">Group of Service Status Values</conceptualLink>/>
        </member>
        <member name="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.MAX_LENGTH_VERSION_STRING">
            <summary>
            Represents the maximum length that a version string can have (255 characters + terminator).
            </summary>
            <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b#CONSTANTS">Group of Service Status Values</conceptualLink>/>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate,Peak.Can.Basic.BackwardCompatibility.TPCANType,System.UInt32,System.UInt16)">
            <summary>
                <para>
                Initializes a PCAN Channel.
                </para>
            </summary>
            
            <remarks>
                <note type="important">
                A Channel that is initialized using <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> must use 
                <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Write(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> for communication. 
                Calling <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@,System.UInt64@)" autoUpgrade="true"/>
                and/or <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> will result in a <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/> error.
                </note>
                
                <note type="important">
                Non plug-and-play channels are not CAN-FD capable.
                </note>
                    
                <note>For initializing plug-and-play channels like a PCAN-USB or PCAN-PCI card, use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)"/> instead.
                </note>
            
                <para>
                The parameters <paramref name="HwType"/>, <paramref name="Interrupt"/>, and <paramref name="IOPort"/> are only required for
                the initialization of non plug-and-play channels.
                </para>
                
                <para>
                As indicated by its name, the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method initiates a PCAN Channel, 
                preparing it for communicate within the CAN bus connected to it. Calls to the other methods will fail if they are used with a Channel 
                handle, different than <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_NONEBUS"/>, that has not been initialized yet. Each initialized channel should be released 
                when it is not needed anymore.
                </para>
                
                <para>
                Initializing a PCAN Channel means:
                <list type="bullet">
                    <item>to reserve the Channel for the calling application/process. </item>
                    <item>to allocate channel resources, like receive and transmit queues.</item>
                    <item>to register/connect the Hardware denoted by the channel handle. </item>
                    <item><b>to check and adapt the bus speed, if the Channel is already in use</b>. <font color="#00A31515">(Only if the Channel was configured 
                    to adapt an available bit rate; see: <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BITRATE_ADAPTING"/> parameter)</font>.</item>
                    <item>to set the channel in Listen-Only mode. <font color="#00A31515">(Only if the channel was configured to work in Listen-Only mode; 
                    see: <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LISTEN_ONLY"/> parameter)</font>. </item>
                    <item>to configure the filter to catch all messages being transmitted in the bus.</item>
                    <item>to set-up the default values of the different parameters (see method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/>).</item>
                    <item><b>to set the Receive Status of the channel</b>. (See: <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_RECEIVE_STATUS"/> parameter).</item>
                </list>
                </para>
                
                <para>
                Other than in the PCAN-Light API, the Initialization process will fail if an application tries to initialize a PCAN Channel that 
                has been initialized already within the same process. 
                </para>
                
                <para>
                Take in consideration that initializing a channel causes a reset of the CAN hardware, when the bus status is other than OK. In this 
                way errors like <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>, <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSHEAVY"/>, and 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSLIGHT"/>, are removed. 
                </para>
            
                <para>
                <b>PCAN-LAN Channels</b>
                </para>
                <para>
                A PCAN-LAN channel doesn't allow changing the bit rate using PCAN-Basic. In order to connect a PCAN-LAN Channel it is necessary to know 
                the bit rate of the PCAN-Gateway device that is represented by that channel. If the bit rate is not known, the parameter 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BITRATE_ADAPTING"/> should be used.
                </para>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="Btr0Btr1">The speed for the communication (BTR0BTR1 code).</param>
            <param name="HwType">Non-PnP: The type of hardware and operation mode.</param>
            <param name="IOPort">Non-PnP: The I/O address for the parallel port.</param>
            <param name="Interrupt">Non-PnP: Interrupt number of the parallel port.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_CAUTION"/>: Indicates that the channel has been initialized but at a different bit rate as the given one.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the desired PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the desired PCAN Channel is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: Indicates that an action cannot be executed due to the state of the hardware. Possible causes are:
                    <list type="bullet">
                        <item>The desired PCAN Channel is a LAN Channel, which uses a different bit rate than the specified.</item>
                    </list></item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLMODE"/>: Indicates that the hardware is working in a different or incompatible mode than requested. Possible causes are:
                    <list type="bullet">
                        <item>The desired PCAN Channel is being operated in CAN-FD mode.</item>
                    </list></item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_REGTEST"/>: Indicates a problem with hardware registration, normally due to wrong values in the parameters '<em>HwType</em>', 
                '<em>IOPort</em>' and '<em>Interrupt</em>'.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the desired PCAN Channel cannot be connected because it is already in use (PCAN-Basic / PCAN-Light environment). </item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_NETINUSE"/>: Indicates that the desired PCAN Channel is being used with a different bit rate (PCAN-View).</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_HWINUSE"/>: Indicates that the desired PCAN Channel is being used (PcanApi connection).</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_NODRIVER"/>: The driver needed for connecting the desired PCAN Channel is not loaded. </item>
                </list>
            </returns>
            
            <example>
                <para>
                The following example shows the initialization and uninitialization processes for a not Plug-And-Play channel (channel 1 of the PCAN-DNG). In case of failure, 
                the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.Initialize NonPnP" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.Initialize NonPnP" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.Initialize NonPnP" language="cpp" />
            </example>
            
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)">
            <summary>
                <para>
                Initializes a PCAN Channel.
                </para>
            </summary>
            
            <remarks>
                <note type="important">
                A Channel that is initialized using <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> must use 
                <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Write(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> for communication. 
                Calling <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@,System.UInt64@)" autoUpgrade="true"/>
                and/or <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> will result in a <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/> error.
                </note>
                
                <note>
                For initializing a CAN-FD capable channel for CAN-FD communication use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> instead.
                </note>
            
                <note>
                For initializing non plug-and-play channels like a PCAN-Dongle or PCAN-ISA card, use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate,Peak.Can.Basic.BackwardCompatibility.TPCANType,System.UInt32,System.UInt16)"/> instead.
                </note>
            
                <para>
                As indicated by its name, the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method initiates a PCAN Channel, 
                preparing it for communicate within the CAN bus connected to it. Calls to the other methods will fail if they are used with a Channel 
                handle, different than <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_NONEBUS"/>, that has not been initialized yet. Each initialized channel should be released 
                when it is not needed anymore.
                </para>
            
                <para>
                Initializing a PCAN Channel means:
                <list type="bullet">
                    <item>to reserve the Channel for the calling application/process. </item>
                    <item>to allocate channel resources, like receive and transmit queues.</item>
                    <item>to register/connect the Hardware denoted by the channel handle. </item>
                    <item><b>to check and adapt the bus speed, if the Channel is already in use</b>. <font color="#00A31515">(Only if the Channel was configured 
                    to adapt an available bit rate; see: <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BITRATE_ADAPTING"/> parameter)</font>.</item>
                    <item>to set the channel in Listen-Only mode. <font color="#00A31515">(Only if the channel was configured to work in Listen-Only mode; 
                    see: <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LISTEN_ONLY"/> parameter)</font>. </item>
                    <item>to configure the filter to catch all messages being transmitted in the bus.</item>
                    <item>to set-up the default values of the different parameters (see method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/>).</item>
                    <item><b>to set the Receive Status of the channel</b>. (See: <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_RECEIVE_STATUS"/> parameter).</item>
                </list>
                </para>
            
                <para>
                Other than in the PCAN-Light API, the Initialization process will fail if an application tries to initialize a PCAN Channel that 
                has been initialized already within the same process. 
                </para>
                
                <para>
                Take in consideration that initializing a channel causes a reset of the CAN hardware, when the bus status is other than OK. In this 
                way errors like <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>, <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSHEAVY"/>, and 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSLIGHT"/>, are removed. 
                </para>
                
                <para>
                <b>PCAN-LAN Channels</b>
                </para>
                <para>
                A PCAN-LAN channel doesn't allow changing the bit rate using PCAN-Basic. In order to connect a PCAN-LAN Channel it is necessary to know 
                the bit rate of the PCAN-Gateway device that is represented by that channel. If the bit rate is not known, the parameter 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BITRATE_ADAPTING"/> should be used.
                </para>
            </remarks>
                
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="Btr0Btr1">The speed for the communication (BTR0BTR1 code).</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_CAUTION"/>: Indicates that the channel has been initialized but at a different bit rate as the given one.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the desired PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the desired PCAN Channel is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: Indicates that an action cannot be executed due to the state of the hardware. Possible causes are:
                    <list type="bullet">
                        <item>The desired PCAN Channel is a LAN Channel, which uses a different bit rate than the specified.</item>
                    </list></item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLMODE"/>: Indicates that the hardware is working in a different or incompatible mode than requested. Possible causes are:
                    <list type="bullet">
                        <item>The desired PCAN Channel is being operated in CAN-FD mode.</item>
                    </list></item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the desired PCAN Channel cannot be connected because it is already in use (PCAN-Basic / PCAN-Light environment). </item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_NETINUSE"/>: Indicates that the desired PCAN Channel is being used with a different bit rate (PCAN-View).</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_HWINUSE"/>: Indicates that the desired PCAN Channel is being used (PcanApi connection).</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_NODRIVER"/>: The driver needed for connecting the desired PCAN Channel is not loaded. </item>
                </list>
            </returns>       
            
            <example>
                <para>
                The following example shows the initialization and uninitialization processes for a Plug-And-Play channel (channel 2 of a PCAN-PCI hardware). In case of failure, 
                the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.Initialize PnP" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.Initialize PnP" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.Initialize PnP" language="cpp"/>
            </example>
            
            <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)">
             <summary>
                 <para>
                 Initializes a FD capable PCAN Channel.
                 </para>
             </summary>
            
             <remarks> 
                 <note type="important">
                 A Channel that is initialized using <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> must use 
                 <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@,System.UInt64@)" autoUpgrade="true"/> and 
                 <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> for communication. Calling <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/>
                 and/or <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Write(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> will result in a <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/> error.
                 </note>
                 
                 <note>
                 For initializing a channel for CAN communication (no CAN-FD), use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> instead.
                 </note>
                 
                 <para>
                 As indicated by its name, the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> method initiates a PCAN Channel, 
                 preparing it for communicate within the CAN bus connected to it. Calls to the other methods will fail if they are used with a Channel 
                 handle, different than <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_NONEBUS"/>, that has not been initialized yet. Each initialized channel should be released 
                 when it is not needed anymore.
                 </para>
             
                 <para>
                 Initializing a PCAN Channel means:
                 <list type="bullet">
                     <item>to reserve the Channel for the calling application/process. </item>
                     <item>to allocate channel resources, like receive and transmit queues.</item>
                     <item>to register/connect the Hardware denoted by the channel handle. </item>
                     <item><b>to check and adapt the bus speed, if the Channel is already in use</b>. <font color="#00A31515">(Only if the Channel was configured 
                     to adapt an available bit rate; see: <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BITRATE_ADAPTING"/> parameter)</font>.</item>
                     <item>to set the channel in Listen-Only mode. <font color="#00A31515">(Only if the channel was configured to work in Listen-Only mode; 
                     see: <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_LISTEN_ONLY"/> parameter)</font>. </item>
                     <item>to configure the filter to catch all messages being transmitted in the bus.</item>
                     <item>to set-up the default values of the different parameters (see method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/>).</item>
                     <item><b>to set the Receive Status of the channel</b>. (See: <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_RECEIVE_STATUS"/> parameter).</item>
                 </list>
                 </para>
             
                 <para>
                 Other than in the PCAN-Light API, the Initialization process will fail if an application tries to initialize a PCAN Channel that 
                 has been initialized already within the same process. 
                 </para>
                 
                 <para>
                 Take in consideration that initializing a channel causes a reset of the CAN hardware, when the bus status is other than OK. In this 
                 way errors like <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>, <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSWARNING"/>, and 
                 <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSPASSIVE"/>, are removed. 
                 </para>
                 
                 <para>
                 <b>PCAN-LAN Channels</b>
                 </para>
                 <para>A PCAN-LAN channel doesn't allow changing the bit rate using PCAN-Basic. In order to connect a PCAN-LAN Channel it is necessary to know 
                 the bit rate of the PCAN-Gateway device that is represented by that channel. If the bit rate is not known, the parameter 
                 <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BITRATE_ADAPTING"/> should be used.
                 </para>
             </remarks>
             
             <param name="Channel">The handle of a FD capable PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
             <param name="BitrateFD">The speed for the communication (see <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a"/>).</param>
             
             <returns>
                 <para>
                 The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_CAUTION"/>: Indicates that the channel has been initialized but at a different bit rate as the given one.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the desired PCAN Channel is not valid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the desired PCAN Channel is not available.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: Indicates that an action cannot be executed due to the state of the hardware. Possible causes are:
                     <list type="bullet">
                         <item>The desired PCAN Channel is not CAN-FD capable and cannot be initialized using this method.</item>
                         <item>The desired PCAN Channel is a LAN Channel, which uses a different bit rate than the specified.</item>
                     </list></item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLMODE"/>: Indicates that the hardware is working in a different or incompatible mode than requested. Possible causes are:
                     <list type="bullet">
                         <item>The desired PCAN Channel is being operated in CAN 2.0 A/B mode.</item>
                     </list></item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the desired PCAN Channel cannot be connected because it is already in use (PCAN-Basic / PCAN-Light environment). </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_NETINUSE"/>: Indicates that the desired PCAN Channel is being used with a different bit rate (PCAN-View).</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_HWINUSE"/>: Indicates that the desired PCAN Channel is being used (PcanApi connection).</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_NODRIVER"/>: The driver needed for connecting the desired PCAN Channel is not loaded. </item>
                 </list>
             </returns>    
            
             <example>
                 <para>The following example shows the initialization and uninitialization processes for a CAN-FD capable channel (channel 1 of a PCAN-USB Pro FD hardware). 
                 In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French 
                 or Spanish, and it will be shown to the user. 
                 </para>
             
                 <code source="Examples\CS\Program.cs" region="BackwardCompatibility.InitializeFD" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="BackwardCompatibility.InitializeFD" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.InitializeFD" language="cpp"/>
             </example>
             
             <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true"/>
             <conceptualLink target="63345c55-9c4f-4f59-a2c4-b200cf71ed3a"/>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)">
             <summary>
             Uninitializes one or all initialized PCAN Channels.
             </summary>
             
             <remarks>
                 <para>
                 A PCAN Channel can be released using one of this possibilities:
                 <list type="bullet">
                     <item>Single-Release: Giving the handle of a PCAN Channel initialized before with the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method. 
                     If the given channel cannot be found an error is returned.</item>
                     <item>Multiple-Release: Giving the handle value <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_NONEBUS"/>. It instructs the API to uninitialize all channels being used by the calling application. 
                     This option does not generate errors if no channel was uninitialized.</item>
                 </list>
                 </para>
                 
                 <para>
                 <b>Transmit queue on uninitialize:</b> When a connection is terminated, the underlying hardware's transmit-queue will not be immediately discarded. The API will wait some time before 
                 terminating, so that the hardware has time to send (or try to send) the unsent messages. When the timer runs out (about 500 milliseconds), the rest of the messages in the queue (if any) 
                 are discarded.
                 </para>
             </remarks>
             
             <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
             
             <returns>
                 <para>
                 The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN Channel cannot be uninitialized because it was not found in the list of reserved channels 
                     of the calling application.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                 </list>
             </returns>    
            
             <example>
                 <para>
                 The following example shows the initialization and uninitialization (Single-Release) processes for the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS1"/>. In case of failure, the returned code 
                 will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user. 
                 <note>To see an example of Multiple-Release, see the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method.</note>
                 </para>
             
                 <code source="Examples\CS\Program.cs" region="BackwardCompatibility.Uninitialize" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="BackwardCompatibility.Uninitialize" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.Uninitialize" language="cpp"/>
             </example>
             
             <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Reset(System.UInt16)">
             <summary>
             Discards all messages contained in the receive and transmit queues of a PCAN Channel.
             </summary>
             
             <remarks>
                 <para>
                 Calling this method <b>ONLY</b> clears the queues of a Channel. A reset of the CAN controller doesn't take place, unless the parameter <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS"/> is active. 
                 </para>
                 
                 <para>
                 Normally a reset of the CAN Controller is desired when a bus-off occur. In this case an application cannot use the channel to communicate anymore, 
                 until the CAN controller is reset. Consider using the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSOFF_AUTORESET"/> parameter, which instructs the API to automatically 
                 reset the CAN controller when a bus-off state is detected. 
                 </para>
                 
                 <para>
                 Another way to reset errors like bus-off, bus-heavy and bus-light:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true">uninitialize</see> / <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true">initialize</see> cycle: 
                     This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel.
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other clients are connected to that channel.
                     </item>
                 </list>
                 
                  
                 </para>
             </remarks>
             
             <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
             
             <returns>
                 <para>
                 The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                     application.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                 </list>
             </returns>    
            
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Reset(System.UInt16)"/> method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS1"/>. In case of failure, the returned code 
                 will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user. 
                 <note>It is assumed that the channel was already initialized</note>
                 </para>
             
                 <code source="Examples\CS\Program.cs" region="BackwardCompatibility.Reset" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="BackwardCompatibility.Reset" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.Reset" language="cpp"/>
             </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetStatus(System.UInt16)">
            <summary>
            Gets the current BUS status of a PCAN Channel.
            </summary>
            
            <remarks>
                <para>
                When the hardware status is bus-off, an application cannot communicate anymore. Consider using the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSOFF_AUTORESET"/> parameter, 
                which instructs the API to automatically reset the CAN controller when a bus-off state is detected. 
                </para>
                
                <para>
                Another way to reset errors like bus-off, bus-warning and bus-passive:
                <list type="bullet">
                    <item>Performing an <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true">uninitialize</see> / <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true">initialize</see> cycle: 
                    This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel.
                    </item>
                    <item>Using the parameter <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other clients are connected to that channel.
                    </item>
                </list>
                </para>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN Channel was not found in the list of initialized channels of the calling 
                    application.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the hardware represented by the PCAN Channel being used was removed or deactivated.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSLIGHT"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-light status.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSHEAVY"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-heavy status.</item>        
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSPASSIVE"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-passive status.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSWARNING"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-warning status.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-off status.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/>: Indicates that the status of the given PCAN Channel is OK.</item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetStatus(System.UInt16)" autoUpgrade="true"/> method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_PCIBUS1"/>. In case of failure, 
                the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user.
                <note>It is assumed that the channel was already initialized</note>
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.GetStatus" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.GetStatus" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.GetStatus" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@,Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp@)">
             <summary>
             Reads a CAN message and its time stamp from the receive queue of a PCAN Channel.
             </summary>
             
             <remarks>
                 <note type="important">The use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> and 
                 <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> is mutually exclusive. The PCAN Channel passed to this method must be initialized using 
                 the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method. Otherwise the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/> is 
                 returned.</note>
                 <note>If the timestamp of the message is not required, use the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)"/>  method instead.</note>
                 <para>
                 The <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@,Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp@)" autoUpgrade="true"/> method returns CAN frames from the reception queue. It is important 
                 to call <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@,Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp@)" autoUpgrade="true"/> repeatedly until the reception queue becomes empty. In case 
                 there are no more messages to retrieve, the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> is returned. The error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> 
                 is also returned if the reception of messages, configurable through the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_RECEIVE_STATUS"/> parameter, is disabled. 
                 </para>
                 
                 <para>The receive queue can contain up to <b>32768</b> messages.</para>
                 
                 <para>There are two possibilities for reading messages from the receive queue of a Channel:
                     <list type="bullet">
                         <item><l>Time-Triggered Reading:</l> Consists in periodically calls to the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> method. 
                         Typically, an application starts a timer that checks for messages every 50 or 100 milliseconds, calling the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" 
                         autoUpgrade="true"/> method in a loop until the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> or another error condition is reached. </item>
                         <item><l>Event-Triggered Reading:</l> Consists in reacting to a notification sent by the PCAN driver to a registered application, when a message is received and 
                         placed in its reception queue. See <conceptualLink target="4601f07f-bf14-454d-bf58-fc0bb6ae2b19">Using Events</conceptualLink> to obtain more information about 
                         reading with events.</item>
                     </list>
                 </para>
                 
                 <para><b>About bus errors / Status messages</b></para>
                 <note type="important">
                 If a status message is read, the return value of the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> method is also the error code.
                 </note>
                 <para>
                 If a bus-off error occur, an application cannot use the channel to communicate anymore, 
                 until the CAN controller is reset. Consider using the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSOFF_AUTORESET"/> parameter, which instructs the API to automatically 
                 reset the CAN controller when a bus-off state is detected. 
                 </para>
                 
                 <para>
                 Another way to reset errors like bus-off, bus-heavy and bus-light:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true">uninitialize</see> / <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true">initialize</see> cycle: 
                     This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel.
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other clients are connected to that channel.
                     </item>
                 </list>
                 </para>
                 
                 <para>The message type (see <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType"/>) of a CAN message indicates if the message is a 11-bit, 29-bit, RTR, Error, or Status message. This value should
                 be checked every time a message has been read successfully.</para>
                 
                 <para>If the flag <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_ERRFRAME"/> is set in the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsg.MSGTYPE">TPCANMsg.MSGTYPE</see> field, the message is an 
                 <conceptualLink target="d8b8c576-cc90-4757-a914-4a503f9553d1">Error Frame</conceptualLink>.</para>
                 
                 <para>If the flag <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_STATUS"/> is set in the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsg.MSGTYPE">TPCANMsg.MSGTYPE</see> field, the message is a 
                 <conceptualLink target="080b4916-e4c0-4ebf-aec7-956dc31eb5ab">PCAN Status Frame</conceptualLink>.</para>
             </remarks>
             
             <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
             <param name="MessageBuffer">A buffer to store the CAN message.</param>
             <param name="TimestampBuffer">A buffer to store the reception time of the message.</param>
             
             <returns>
                 <para>
                 The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                     application.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: Indicates that the PCAN Channel passed to the method was not initialized using the 
                     <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSLIGHT"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-light status. 
                         <note type=""><paramref name="MessageBuffer"/> and <paramref name="TimestampBuffer"/> are valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSHEAVY"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-heavy status.
                         <note type=""><paramref name="MessageBuffer"/> and <paramref name="TimestampBuffer"/> are valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-off status.
                         <note type=""><paramref name="MessageBuffer"/> and <paramref name="TimestampBuffer"/> are valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/>: Indicates that the reception queue of the Channel is empty.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLDATA"/>: Indicates that the message that has been read is not permitted due to the current settings and has been 
                     discarded.</item>
                 </list>
             </returns>    
            
             <example>
                 <para>
                 The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@,Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp@)"/>  method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/>. 
                 In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will 
                 be shown to the user.
                 <note> It is assumed that the channel was already initialized and that the following code is called periodically, e.g. using a timer. </note>
                 </para>
             
                 <code source="Examples\CS\Program.cs" region="BackwardCompatibility.ReadTimestamp" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="BackwardCompatibility.ReadTimestamp" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.ReadTimestamp" language="cpp"/>
             </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)">
             <summary>
             Reads a CAN message from the receive queue of a PCAN Channel.
             </summary>
             
             <remarks>
                 <note type="important">The use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> and 
                 <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> is mutually exclusive. The PCAN Channel passed to this method must be initialized using 
                 the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method. Otherwise the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/> is 
                 returned.</note>
                 <note>If the time when the message was received is required, use the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@,Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp@)"/>  method instead.</note>
                 <para>
                 The <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@,Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp@)" autoUpgrade="true"/> method returns CAN frames from the reception queue. It is important 
                 to call <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@,Peak.Can.Basic.BackwardCompatibility.TPCANTimestamp@)" autoUpgrade="true"/> repeatedly until the reception queue becomes empty. In case 
                 there are no more messages to retrieve, the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> is returned. The error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> 
                 is also returned if the reception of messages, configurable through the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_RECEIVE_STATUS"/> parameter, is disabled. 
                 </para>
                 
                 <para>The receive queue can contain up to <b>32768</b> messages.</para>
                 
                 <para>There are two possibilities for reading messages from the receive queue of a Channel:
                     <list type="bullet">
                         <item><l>Time-Triggered Reading:</l> Consists in periodically calls to the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> method. 
                         Typically, an application starts a timer that checks for messages every 50 or 100 milliseconds, calling the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" 
                         autoUpgrade="true"/> method in a loop until the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> or another error condition is reached. </item>
                         <item><l>Event-Triggered Reading:</l> Consists in reacting to a notification sent by the PCAN driver to a registered application, when a message is received and 
                         placed in its reception queue. See <conceptualLink target="4601f07f-bf14-454d-bf58-fc0bb6ae2b19">Using Events</conceptualLink> to obtain more information about 
                         reading with events.</item>
                     </list>
                 </para>
                 
                 <para><b>About bus errors / Status messages</b></para>
                 <note type="important">
                 If a status message is read, the return value of the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> method is also the error code.
                 </note>
                 <para>
                 If a bus-off error occur, an application cannot use the channel to communicate anymore, 
                 until the CAN controller is reset. Consider using the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSOFF_AUTORESET"/> parameter, which instructs the API to automatically 
                 reset the CAN controller when a bus-off state is detected. 
                 </para>
                 
                 <para>
                 Another way to reset errors like bus-off, bus-heavy and bus-light:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true">uninitialize</see> / <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true">initialize</see> cycle: 
                     This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel.
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other clients are connected to that channel.
                     </item>
                 </list>
                 </para>
                 
                 <para>The message type (see <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType"/>) of a CAN message indicates if the message is a 11-bit, 29-bit, RTR, Error, or Status message. This value should
                 be checked every time a message has been read successfully.</para>
                 
                 <para>If the flag <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_ERRFRAME"/> is set in the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsg.MSGTYPE">TPCANMsg.MSGTYPE</see> field, the message is an 
                 <conceptualLink target="d8b8c576-cc90-4757-a914-4a503f9553d1">Error Frame</conceptualLink>.</para>
                 
                 <para>If the flag <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_STATUS"/> is set in the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsg.MSGTYPE">TPCANMsg.MSGTYPE</see> field, the message is a 
                 <conceptualLink target="080b4916-e4c0-4ebf-aec7-956dc31eb5ab">PCAN Status Frame</conceptualLink>.</para>
             </remarks>
             
             <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
             <param name="MessageBuffer">A buffer to store the CAN message.</param>
             
             <returns>
                 <para>
                 The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                     application.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: Indicates that the PCAN Channel passed to the method was not initialized using the 
                     <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSLIGHT"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-light status. 
                         <note type=""><paramref name="MessageBuffer"/> is valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSHEAVY"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-heavy status.
                         <note type=""><paramref name="MessageBuffer"/> is valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-off status.
                         <note type=""><paramref name="MessageBuffer"/> is valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/>: Indicates that the reception queue of the Channel is empty.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLDATA"/>: Indicates that the message that has been read is not permitted due to the current settings and has been 
                     discarded.</item>
                 </list>
             </returns>    
            
             <example>
                 <para>
                 The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)"/>  method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/>. 
                 In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will 
                 be shown to the user.
                 <note> It is assumed that the channel was already initialized and that the following code is called periodically, e.g. using a timer. </note>
                 </para>
             
                 <code source="Examples\CS\Program.cs" region="BackwardCompatibility.Read" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="BackwardCompatibility.Read" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.Read" language="cpp"/>
             </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@,System.UInt64@)">
             <summary>
             Reads a CAN message and its time stamp from the receive queue of a FD capable PCAN Channel.
             </summary>
             
             <remarks>
                 <note type="important">The use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> and 
                 <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> is mutually exclusive. The PCAN Channel passed to this method must be initialized using 
                 the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> method. Otherwise the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/> is 
                 returned.</note>
                 <note>If the timestamp of the message is not required, use the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)"/>  method instead.</note>
                 <para>
                 The <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> method returns CAN frames from the reception queue. It is important 
                 to call <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> repeatedly until the reception queue becomes empty. In case 
                 there are no more messages to retrieve, the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> is returned. The error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> 
                 is also returned if the reception of messages, configurable through the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_RECEIVE_STATUS"/> parameter, is disabled. 
                 </para>
                 
                 <para>The receive queue can contain up to <b>32768</b> messages.</para>
                 
                 <para>There are two possibilities for reading messages from the receive queue of a Channel:
                     <list type="bullet">
                         <item><l>Time-Triggered Reading:</l> Consists in periodically calls to the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> method. 
                         Typically, an application starts a timer that checks for messages every 50 or 100 milliseconds, calling the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" 
                         autoUpgrade="true"/> method in a loop until the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> or another error condition is reached. </item>
                         <item><l>Event-Triggered Reading:</l> Consists in reacting to a notification sent by the PCAN driver to a registered application, when a message is received and 
                         placed in its reception queue. See <conceptualLink target="4601f07f-bf14-454d-bf58-fc0bb6ae2b19">Using Events</conceptualLink> to obtain more information about 
                         reading with events.</item>
                     </list>
                 </para>
                 
                 <para><b>About bus errors / Status messages</b></para>
                 <note type="important">
                 If a status message is read, the return value of the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> method is also the error code.
                 </note>
                 <para>
                 If a bus-off error occur, an application cannot use the channel to communicate anymore, 
                 until the CAN controller is reset. Consider using the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSOFF_AUTORESET"/> parameter, which instructs the API to automatically 
                 reset the CAN controller when a bus-off state is detected. 
                 </para>
                 
                 <para>
                 Another way to reset errors like bus-off, bus-warning and bus-passive:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true">uninitialize</see> / <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true">initialize</see> cycle: 
                     This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel.
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other clients are connected to that channel.
                     </item>
                 </list>
                 </para>
                 
                 <para>The message type (see <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType"/>) of a CAN message indicates if the message is a 11-bit, 29-bit, FD, RTR, Error, or Status message. This value 
                 should be checked every time a message has been read successfully.</para>
                 
                 <para>If the flag <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_ERRFRAME"/> is set in the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD.MSGTYPE">TPCANMsgFD.MSGTYPE</see> field, the message is an 
                 <conceptualLink target="d8b8c576-cc90-4757-a914-4a503f9553d1">Error Frame</conceptualLink>.</para>
                 
                 <para>If the flag <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_STATUS"/> is set in the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD.MSGTYPE">TPCANMsgFD.MSGTYPE</see> field, the message is a 
                 <conceptualLink target="080b4916-e4c0-4ebf-aec7-956dc31eb5ab">PCAN Status Frame</conceptualLink>.</para>
             
             </remarks>
             
             <param name="Channel">The handle of a FD capable PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
             <param name="MessageBuffer">A buffer to store the CAN message.</param>
             <param name="TimestampBuffer">A buffer to store the reception time of the message.</param>
             
             <returns>
                 <para>
                 The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                     application.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: Indicates that the PCAN Channel passed to the method was not initialized using the 
                     <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> method.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSWARNING"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-warning status. 
                         <note type=""><paramref name="MessageBuffer"/> and <paramref name="TimestampBuffer"/> are valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSPASSIVE"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-passive status.
                         <note type=""><paramref name="MessageBuffer"/> and <paramref name="TimestampBuffer"/> are valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-off status.
                         <note type=""><paramref name="MessageBuffer"/> and <paramref name="TimestampBuffer"/> are valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/>: Indicates that the reception queue of the Channel is empty.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLDATA"/>: Indicates that the message that has been read is not permitted due to the current settings and has been 
                     discarded.</item>
                 </list>
             </returns>    
            
             <example>
                 <para>
                 The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@,System.UInt64@)"/>  method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/>. 
                 In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will 
                 be shown to the user.
                 <note> It is assumed that the channel was already initialized and that the following code is called periodically, e.g. using a timer. </note>
                 </para>
             
                 <code source="Examples\CS\Program.cs" region="BackwardCompatibility.ReadTimestampFD" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="BackwardCompatibility.ReadTimestampFD" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.ReadTimestampFD" language="cpp"/>
             </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)">
             <summary>
             Reads a CAN message from the receive queue of a FD capable PCAN Channel.
             </summary>
             
             <remarks>
                 <note type="important">The use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Read(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> and 
                 <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> is mutually exclusive. The PCAN Channel passed to this method must be initialized using 
                 the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> method. Otherwise the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/> is 
                 returned.</note>
                 <note>If the time when the message was received is required, use the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@,System.UInt64@)"/>  method instead.</note>
                 <para>
                 The <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> method returns CAN frames from the reception queue. It is important 
                 to call <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> repeatedly until the reception queue becomes empty. In case 
                 there are no more messages to retrieve, the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> is returned. The error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> 
                 is also returned if the reception of messages, configurable through the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_RECEIVE_STATUS"/> parameter, is disabled. 
                 </para>
                 
                 <para>The receive queue can contain up to <b>32768</b> messages.</para>
                 
                 <para>There are two possibilities for reading messages from the receive queue of a Channel:
                     <list type="bullet">
                         <item><l>Time-Triggered Reading:</l> Consists in periodically calls to the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> method. 
                         Typically, an application starts a timer that checks for messages every 50 or 100 milliseconds, calling the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" 
                         autoUpgrade="true"/> method in a loop until the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/> or another error condition is reached. </item>
                         <item><l>Event-Triggered Reading:</l> Consists in reacting to a notification sent by the PCAN driver to a registered application, when a message is received and 
                         placed in its reception queue. See <conceptualLink target="4601f07f-bf14-454d-bf58-fc0bb6ae2b19">Using Events</conceptualLink> to obtain more information about 
                         reading with events.</item>
                     </list>
                 </para>
                 
                 <para><b>About bus errors / Status messages</b></para>
                 <note type="important">
                 If a status message is read, the return value of the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> method is also the error code.
                 </note>
                 <para>
                 If a bus-off error occur, an application cannot use the channel to communicate anymore, 
                 until the CAN controller is reset. Consider using the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSOFF_AUTORESET"/> parameter, which instructs the API to automatically 
                 reset the CAN controller when a bus-off state is detected. 
                 </para>
                 
                 <para>
                 Another way to reset errors like bus-off, bus-warning and bus-passive:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true">uninitialize</see> / <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true">initialize</see> cycle: 
                     This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel.
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other clients are connected to that channel.
                     </item>
                 </list>
                 </para>
                 
                 <para>The message type (see <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType"/>) of a CAN message indicates if the message is a 11-bit, 29-bit, FD, RTR, Error, or Status message. This value 
                 should be checked every time a message has been read successfully.</para>
                 
                 <para>If the flag <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_ERRFRAME"/> is set in the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD.MSGTYPE">TPCANMsgFD.MSGTYPE</see> field, the message is an 
                 <conceptualLink target="d8b8c576-cc90-4757-a914-4a503f9553d1">Error Frame</conceptualLink>.</para>
                 
                 <para>If the flag <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMessageType.PCAN_MESSAGE_STATUS"/> is set in the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD.MSGTYPE">TPCANMsgFD.MSGTYPE</see> field, the message is a 
                 <conceptualLink target="080b4916-e4c0-4ebf-aec7-956dc31eb5ab">PCAN Status Frame</conceptualLink>.</para>
             
             </remarks>
             
             <param name="Channel">The handle of a FD capable PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
             <param name="MessageBuffer">A buffer to store the CAN message.</param>
             
             <returns>
                 <para>
                 The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                     application.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: Indicates that the PCAN Channel passed to the method was not initialized using the 
                     <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> method.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSWARNING"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-warning status. 
                         <note type=""><paramref name="MessageBuffer"/> is valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSPASSIVE"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-passive status.
                         <note type=""><paramref name="MessageBuffer"/> is valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-off status.
                         <note type=""><paramref name="MessageBuffer"/> is valid in this case.</note>
                     </item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QRCVEMPTY"/>: Indicates that the reception queue of the Channel is empty.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLDATA"/>: Indicates that the message that has been read is not permitted due to the current settings and has been 
                     discarded.</item>
                 </list>
             </returns>    
            
             <example>
                 <para>
                 The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.ReadFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)"/>  method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/>. 
                 In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will 
                 be shown to the user.
                 <note> It is assumed that the channel was already initialized and that the following code is called periodically, e.g. using a timer. </note>
                 </para>
             
                 <code source="Examples\CS\Program.cs" region="BackwardCompatibility.ReadFD" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="BackwardCompatibility.ReadFD" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.ReadFD" language="cpp"/>
             </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Write(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)">
             <summary>
             Transmits a CAN message.
             </summary>
             
             <remarks>
                 <note type="important">The use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Write(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> and 
                 <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> is mutually exclusive. The PCAN Channel passed to this method must be initialized using 
                 the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method. Otherwise the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/> is 
                 returned.</note>
                 
                 <para>
                 When the hardware status is bus-off, an application cannot communicate anymore. Consider using the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSOFF_AUTORESET"/> parameter, 
                 which instructs the API to automatically reset the CAN controller when a bus-off state is detected. 
                 </para>
                 
                 <para>
                 Another way to reset errors like bus-off, bus-heavy and bus-light:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true">uninitialize</see> / <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true">initialize</see> cycle: 
                     This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel.
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other clients are connected to that channel.
                     </item>
                 </list>
                 </para>
             </remarks>
             
             <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
             <param name="MessageBuffer">A buffer containing the CAN message to be sent.</param>
             
             <returns>
                 <para>
                 The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                     application.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: Indicates that the PCAN Channel passed to the method was not initialized using the 
                     <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true"/> method.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-off status.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QXMTFULL"/>: Indicates that the transmit queue of the Channel is full.</item>
                 </list>
             </returns>    
            
             <example>
                 <para>
                 The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Write(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)"/>  method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/>. 
                 In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will 
                 be shown to the user.
                 <note> It is assumed that the channel was already initialized.</note>
                 </para>
             
                 <code source="Examples\CS\Program.cs" region="BackwardCompatibility.Write" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="BackwardCompatibility.Write" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.Write" language="cpp"/>
             </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)">
             <summary>
             Transmits a CAN message using a FD capable PCAN Channel.
             </summary>
             
             <remarks>
                 <note type="important">The use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Write(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsg@)" autoUpgrade="true"/> and 
                 <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)" autoUpgrade="true"/> is mutually exclusive. The PCAN Channel passed to this method must be initialized using 
                 the <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> method. Otherwise the error <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/> is 
                 returned.</note>
                 
                 <para>
                 When the hardware status is bus-off, an application cannot communicate anymore. Consider using the <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_BUSOFF_AUTORESET"/> parameter, 
                 which instructs the API to automatically reset the CAN controller when a bus-off state is detected. 
                 </para>
                 
                 <para>
                 Another way to reset errors like bus-off, bus-warning and bus-passive:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Uninitialize(System.UInt16)" autoUpgrade="true">uninitialize</see> / <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.Initialize(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANBaudrate)" autoUpgrade="true">initialize</see> cycle: 
                     This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel.
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANParameter.PCAN_HARD_RESET_STATUS"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other clients are connected to that channel.
                     </item>
                 </list>
                 </para>
             </remarks>
             
             <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
             <param name="MessageBuffer">A buffer containing the CAN message to be sent.</param>
             
             <returns>
                 <para>
                 The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                     application.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: Indicates that the PCAN Channel passed to the method was not initialized using the 
                     <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.InitializeFD(System.UInt16,System.String)" autoUpgrade="true"/> method.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_BUSOFF"/>: Indicates a bus error within the given PCAN Channel. The hardware is in bus-off status.</item>
                     <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_QXMTFULL"/>: Indicates that the transmit queue of the Channel is full.</item>
                 </list>
             </returns>    
            
             <example>
                 <para>
                 The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.WriteFD(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANMsgFD@)"/>  method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/>. 
                 In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will 
                 be shown to the user.
                 <note> It is assumed that the channel was already initialized.</note>
                 </para>
             
                 <code source="Examples\CS\Program.cs" region="BackwardCompatibility.WriteFD" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="BackwardCompatibility.WriteFD" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.WriteFD" language="cpp"/>
             </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.FilterMessages(System.UInt16,System.UInt32,System.UInt32,Peak.Can.Basic.BackwardCompatibility.TPCANMode)">
            <summary>
            Configures the reception filter.
            </summary>
            
            <remarks>
                <note type="important">After a PCAN Channel is initialized, the status of its filter is fully opened.</note>
                
                <para>
                Based on the current state of the filter, calling this method causes the following behavior:
                <list type="bullet">
                    <item>Status is <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_FILTER_OPEN"/>: The filter is automatically closed and then configured with the given range of IDs passed to this 
                    function [<paramref name="FromID"/>, <paramref name="ToID"/>].</item>
                    <item>Status is <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_FILTER_CLOSE"/>: The filter is set to the given range of IDs passed to this function [<paramref name="FromID"/>, <paramref name="ToID"/>].</item>
                    <item>Status is <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_FILTER_CUSTOM"/>: The filter is expanded with the given range of Ids [<paramref name="FromID"/>, <paramref name="ToID"/>]. 
                    If a smaller or different range  is required than a range that has been configured before, the filter has to be closed first before calling the method 
                    <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.FilterMessages(System.UInt16,System.UInt32,System.UInt32,Peak.Can.Basic.BackwardCompatibility.TPCANMode)" autoUpgrade="true"/>. To do this, use the method 
                    <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/></item>.
                </list>
                </para>
                
                <para>
                The parameter <paramref name="Mode"/> indicates which kind of ID is being used to register the new filter range. There are two possible values, Standard (11-bit identifier)
                or Extended (29-bit identifier). Standard frames are using the bit positions 28 to 18 of the Acceptance Mask/Code registers in the SJA1000 CAN controller. Drivers 
                for 82C200 CAN controllers have to shift the bits down to positions 10 to 0. 
                </para>
                
                <para>
                Take into account that configuring the message filter causes the CAN controller to enter the <b>reset state</b>. This will affect other applications that communicate with the 
                same PCAN hardware. </para>
                
                <note type="important">
                <list type="number">
                    <item>There is only one filter for standard and extended CAN messages. It seems that the ID from a standard message uses the most significant 11 bits (bit 18 to 28) of 
                    the 29 bits. I.e. the standard ID 400h is also received by indicating an extended ID 10000000h. For this reason, it is <u><b>not recommended</b></u> to mix standard and 
                    extended filters, since it can increase the risk of receiving unwanted messages.
                    </item>
                    <item>
                    Multiple calls of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.FilterMessages(System.UInt16,System.UInt32,System.UInt32,Peak.Can.Basic.BackwardCompatibility.TPCANMode)" autoUpgrade="true"/> expand the reception filter.
                    </item>
                    <item>
                    It is not guaranteed that an application only receives CAN messages in the range of <paramref name="FromID"/> to <paramref name="ToID"/>. This is caused by the operating 
                    principle of the SJA1000's acceptance filter. See also Philips Data Sheet "SJA1000 Stand-alone CAN-controller".
                    </item>
                </list>
                </note>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="FromID">The lowest CAN ID to be received.</param>
            <param name="ToID">The highest CAN ID to be received.</param>
            <param name="Mode">The kind of filter being set.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                    application.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.FilterMessages(System.UInt16,System.UInt32,System.UInt32,Peak.Can.Basic.BackwardCompatibility.TPCANMode)"/>  method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/> 
                to receive a custom range of IDs. In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, 
                French or Spanish, and it will be shown to the user.
                <note> It is assumed that the channel was already initialized.</note>
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.FilterMessages" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.FilterMessages" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.FilterMessages" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves a PCAN Channel value.
            </summary>
            
            <remarks>
                <para>
                Use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/> to get information about PCAN environment as parameters 
                like the API version. Take in account that not all parameters are supported for all PCAN Channels. The access's type of the parameters can also be different.
                </para>
                <para>For more information about the possible values that can be retrieved, see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/></para>
                <note type="important">
                For more information about each available <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANParameter"/>, please refer to the companion PDF documentation <b>PCAN-Parameter_Documentation.pdf</b>.
                </note>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="Parameter">The code of the information to be retrieved.</param>
            <param name="StringBuffer">The buffer to return the required string value.</param>
            <param name="BufferLength">The length in bytes of the given buffer.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                    application.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the given PCAN Channel is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMTYPE"/>: Indicates that the requested information is not available for the given PCAN Channel. Check the value 
                    of <paramref name="Parameter"/>; some values are not available for all PCAN-Channels or cannot be read. </item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.Text.StringBuilder,System.UInt32)"/>  method on the channel 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/> to get the PCAN Channel version text. In case of failure, the returned code will be translated to a text (according with the 
                operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user. 
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.GetValueString" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.GetValueString" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.GetValueString" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)">
            <summary>
            Retrieves a PCAN Channel value.
            </summary>
            
            <remarks>
                <para>
                Use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/> to get information about PCAN environment as parameters 
                like the PCAN Channel device ID. Take in account that not all parameters are supported for all PCAN Channels. The access's type of the parameters can also be different.
                </para>
                <para>For more information about the possible values that can be retrieved, see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/></para>
                <note type="important">
                For more information about each available <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANParameter"/>, please refer to the companion PDF documentation <b>PCAN-Parameter_Documentation.pdf</b>.
                </note>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="Parameter">The code of the information to be retrieved.</param>
            <param name="NumericBuffer">The buffer to return the required 32-bit numeric value (see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/>).</param>
            <param name="BufferLength">The length in bytes of the given buffer.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                    application.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the given PCAN Channel is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMTYPE"/>: Indicates that the requested information is not available for the given PCAN Channel. Check the value 
                    of <paramref name="Parameter"/>; some values are not available for all PCAN-Channels or cannot be read. </item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)"/>  method on the channel <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/> 
                to check if the Message Filter is fully opened. In case of failure, the returned code will be translated to a text (according with the operating system language) in English, 
                German, Italian, French or Spanish, and it will be shown to the user.
                <note> It is assumed that the channel was already initialized.</note>
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.GetValueUInt32" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.GetValueUInt32" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.GetValueUInt32" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt64@,System.UInt32)">
            <summary>
            Retrieves a PCAN Channel value.
            </summary>
            
            <remarks>
                <para>
                Use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/> to get information about PCAN environment as parameters 
                like the Acceptance Filter (Code/Mask). Take in account that not all parameters are supported for all PCAN Channels. The access's type of the parameters can also be different.
                </para>
                <para>For more information about the possible values that can be retrieved, see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/></para>
                <note type="important">
                For more information about each available <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANParameter"/>, please refer to the companion PDF documentation <b>PCAN-Parameter_Documentation.pdf</b>.
                </note>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="Parameter">The code of the information to be retrieved.</param>
            <param name="NumericBuffer">The buffer to return the required 64-bit numeric value (see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/>).</param>
            <param name="BufferLength">The length in bytes of the given buffer.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                    application.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the given PCAN Channel is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMTYPE"/>: Indicates that the requested information is not available for the given PCAN Channel. Check the value 
                    of <paramref name="Parameter"/>; some values are not available for all PCAN-Channels or cannot be read. </item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt64@,System.UInt32)"/>  method on the channel 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/> to retrieve the configured message filter as 11-bit acceptance code and mask. In case of failure, the returned code will be 
                translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user.
                <note> It is assumed that the channel was already initialized.</note>
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.GetValueUInt64" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.GetValueUInt64" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.GetValueUInt64" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation[])">
            <summary>
            Retrieves a PCAN Channel value.
            </summary>
            
            <remarks>
                <para>
                Use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/> to get information about PCAN environment as parameters 
                like information about the PCAN Channels current attached to the PC. Take in account that not all parameters are supported for all PCAN Channels. The access's type of 
                the parameters can also be different.
                </para>
                <para>For more information about the possible values that can be retrieved, see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/></para>
                <note type="important">
                For more information about each available <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANParameter"/>, please refer to the companion PDF documentation <b>PCAN-Parameter_Documentation.pdf</b>.
                </note>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="Parameter">The code of the information to be retrieved.</param>
            <param name="ChannelsBuffer">The buffer to return information about the current attached PCAN Channels.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                    application.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the given PCAN Channel is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMTYPE"/>: Indicates that the requested information is not available for the given PCAN Channel. Check the value 
                    of <paramref name="Parameter"/>; some values are not available for all PCAN-Channels or cannot be read. </item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,Peak.Can.Basic.BackwardCompatibility.TPCANChannelInformation[])"/>  method on the channel 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/> to retrieve the configured message filter as 11-bit acceptance code and mask. In case of failure, the returned code will be 
                translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user.
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.GetValueChannelInformation" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.GetValueChannelInformation" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.GetValueChannelInformation" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)">
            <summary>
            Configures a feature of a PCAN Channel.
            </summary>
            
            <remarks>
                <para>
                Use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/> to change the behavior of a PCAN Channel like its 
                Message Filter. Take in account that not all parameters are supported for all PCAN Channels. The access's type of the parameters can also be different.
                </para>
                <para>For more information about the possible values that can be used for parameter configuration, see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/></para>
                <note type="important">
                For more information about each available <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANParameter"/>, please refer to the companion PDF documentation <b>PCAN-Parameter_Documentation.pdf</b>.
                </note>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="Parameter">The code of the value to be set.</param>
            <param name="NumericBuffer">The buffer containing the 32-bit numeric value to be set (see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/>).</param>
            <param name="BufferLength">The length in bytes of the given buffer.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                    application.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the given PCAN Channel is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMTYPE"/>: Indicates that the requested information is not available for the given PCAN Channel. Check the value 
                    of <paramref name="Parameter"/>; some values are not available for all PCAN-Channels or cannot be read. </item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: An underlying process that is generated by a call to this method with the current parameters, is 
                    temporarily not allowed. The configuration in relation to the used <paramref name="Parameter"/> must be checked.</item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)"/>  method on the channel 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/> to close the message filter. In case of failure, the returned code will be translated to a text
                (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user.
                <note> It is assumed that the channel was already initialized.</note>
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.SetValueUInt32" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.SetValueUInt32" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.SetValueUInt32" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt64@,System.UInt32)">
            <summary>
            Configures a feature of a PCAN Channel.
            </summary>
            
            <remarks>
                <para>
                Use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/> to change the behavior of a PCAN Channel like its 
                Acceptance Filter (Mask/Code). Take in account that not all parameters are supported for all PCAN Channels. The access's 
                type of the parameters can also be different.
                </para>
                <para>For more information about the possible values that can be used for parameter configuration, see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/></para>
                <note type="important">
                For more information about each available <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANParameter"/>, please refer to the companion PDF documentation <b>PCAN-Parameter_Documentation.pdf</b>.
                </note>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="Parameter">The code of the value to be set.</param>
            <param name="NumericBuffer">The buffer containing the 64-bit numeric value to be set (see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/>).</param>
            <param name="BufferLength">The length in bytes of the given buffer.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                    application.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the given PCAN Channel is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMTYPE"/>: Indicates that the requested information is not available for the given PCAN Channel. Check the value 
                    of <paramref name="Parameter"/>; some values are not available for all PCAN-Channels or cannot be read. </item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: An underlying process that is generated by a call to this method with the current parameters, is 
                    temporarily not allowed. The configuration in relation to the used <paramref name="Parameter"/> must be checked.</item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt64@,System.UInt32)"/>  method on the channel 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_USBBUS1"/> to set an acceptance filter as a 11-bit code and mask, allowing only IDs from 0x100 to 0x103. In case of failure, the returned 
                code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user.
                <note> It is assumed that the channel was already initialized.</note>
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.SetValueUInt64" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.SetValueUInt64" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.SetValueUInt64" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.String,System.UInt32)">
            <summary>
            Configures a feature of a PCAN Channel.
            </summary>
            
            <remarks>
                <para>
                Use the method <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.UInt32@,System.UInt32)" autoUpgrade="true"/> to change the behavior of a PCAN Channel or to
                set environment values like writing custom messages into the API log file. Take in account that not all parameters are supported for all PCAN Channels. The 
                access's type of the parameters can also be different.
                </para>
                <para>For more information about the possible values that can be used for parameter configuration, see <conceptualLink target="d2492fcd-a028-4468-a2ae-7e98a048b45b"/></para>
                <note type="important">
                For more information about each available <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANParameter"/>, please refer to the companion PDF documentation <b>PCAN-Parameter_Documentation.pdf</b>.
                </note>
            </remarks>
            
            <param name="Channel">The handle of a PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>).</param>
            <param name="Parameter">The code of the value to be set.</param>
            <param name="StringBuffer">The buffer containing the string value to be set.</param>
            <param name="BufferLength">The length in bytes of the given buffer.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>: Indicates that the given PCAN channel was not found in the list of initialized channels of the calling 
                    application.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHW"/>: Indicates that the given PCAN Channel is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLHANDLE"/>: Indicates that the given PCAN Channel is not valid.</item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMTYPE"/>: Indicates that the requested information is not available for the given PCAN Channel. Check the value 
                    of <paramref name="Parameter"/>; some values are not available for all PCAN-Channels or cannot be read. </item>
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLOPERATION"/>: An underlying process that is generated by a call to this method with the current parameters, is 
                    temporarily not allowed. The configuration in relation to the used <paramref name="Parameter"/> must be checked.</item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.String,System.UInt32)"/>  method on the channel 
                <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_NONEBUS"/> to set (and activate) the path for the log file of a debug session. In case of failure, the returned code will be
                translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, and it will be shown to the user.
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.SetValueString" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.SetValueString" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.SetValueString" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetErrorText(Peak.Can.Basic.BackwardCompatibility.TPCANStatus,System.UInt16,System.Text.StringBuilder)">
            <summary>
            Returns a descriptive text for a given <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> code, in any of the supported languages.
            </summary>
            
            <remarks>
            <para>The "Primary language IDs" are codes used by Windows OS from Microsoft, to identify a human language. Currently, 
            following languages are supported: 
            </para>
                <list type="table">
                    <listheader>
                        <term>Language</term>
                        <term>Primary Language ID</term>
                    </listheader>
                    <item>
                        <description>Neutral (System dependent)</description>
                        <description>00h (0)</description>
                    </item>
                    <item>
                        <description>English</description>
                        <description>09h (9)</description>
                    </item>
                    <item>
                        <description>German</description>
                        <description>07h (7)</description>
                    </item>
                    <item>
                        <description>French</description>
                        <description>0Ch (12)</description>
                    </item>
                    <item>
                        <description>Italian</description>
                        <description>10h (16)</description>
                    </item>
                    <item>
                        <description>Spanish</description>
                        <description>0Ah (10)</description>
                    </item>
                </list>
            </remarks>
            
            <param name="Error">The error code to translate.</param>
            <param name="Language">The ID of the language to use for the output.</param>
            <param name="StringBuffer">A buffer for the output text with a capacity of at least 256 bytes.
                <note type="important">
                Even when currently only short texts are being returned, a text within this method can have a maximum of 255 characters plus termination. 
                Using small buffers could lead to exceptions like an access violation in future versions of the API.
                </note>
            </param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value. <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.GetErrorText(Peak.Can.Basic.BackwardCompatibility.TPCANStatus,System.UInt16,System.Text.StringBuilder)"/>  method to get the description 
                of the error code <see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_INITIALIZE"/>. The language used for the text will be the same as used by the operating system (if its language 
                is supported; otherwise English is used). 
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.GetErrorText" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.GetErrorText" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.GetErrorText" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.LookUpChannel(System.String,System.UInt16@)">
            <summary>
            Finds the handle of a PCAN Channel that matches the given parameters.
            </summary>
            
            <remarks>
                <para>The <paramref name="Parameters"/> string must contain name/value pairs separated with a '<b>=</b>' character.</para>
                <para>Each pair of name/value must be separated with a '<b>,</b>' character. </para>
                <para>The current supported parameters and their value ranges are described in <conceptualLink target="658b0b09-b0f2-4b7b-bf89-e892ab46a578"/></para>
            </remarks>
            
            <param name="Parameters">A comma-separated string of search parameters, that is, parameter name/value pairs to be matched within a PCAN Channel.</param>
            <param name="FoundChannel">Buffer for returning the PCAN Channel (see <conceptualLink target="459b03fc-f14e-4e58-81c8-430229f7b27e"/>), when found. It contains the value <see cref="F:Peak.Can.Basic.BackwardCompatibility.PCANBasic.PCAN_NONEBUS"/> if not found.</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.BackwardCompatibility.TPCANStatus"/> value.<see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.BackwardCompatibility.TPCANStatus.PCAN_ERROR_ILLPARAMVAL"/>: Indicates that one or more parameters passed to the method are invalid.</item>
                </list>
            </returns>    
            
            <example>
                <para>
                The following example shows the use of <see cref="M:Peak.Can.Basic.BackwardCompatibility.PCANBasic.SetValue(System.UInt16,Peak.Can.Basic.BackwardCompatibility.TPCANParameter,System.String,System.UInt32)"/>  method to get the handle of an USB 
                device with ID 7. In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, 
                French or Spanish, and it will be shown to the user.
                </para>
            
                <code source="Examples\CS\Program.cs" region="BackwardCompatibility.LookUpChannel" language="cs"/>
                <code source="Examples\VB\Program.vb" region="BackwardCompatibility.LookUpChannel" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="BackwardCompatibility.LookUpChannel" language="cpp"/>
            </example>
        </member>
        <member name="T:Peak.Can.Basic.BackwardCompatibility.NamespaceDoc">
            <summary>
            The namespace <c>Peak.Can.Basic.BackwardCompatibility</c> grants access to the <b>PCAN-Basic library</b> over an interface as defined 
            within the header files <c>PCANBasic.cs</c> / <c>PCANBasic.vb</c> / <c>PCANBasicCLR.h (C++ / CLI)</c>. 
            <para>This namespace is intended to be used <b>only</b> with already existing projects, that have been written using those header files,
            as a way to keep old code working without the need of rewriting it. For new development projects the namespace <see cref="N:Peak.Can.Basic">
            Peak.Can.Basic</see> should be used instead.</para>
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.PcanChannel">
            <summary>
            Represents the different PCAN buses (PCAN Channels) available to use within the API when a PCAN Handle is required. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.None">
            <summary>
            Represents a standard PCAN channel. This channel cannot be initialized.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci01">
            <summary>
            PCAN-PCI interface, channel 1.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci02">
            <summary>
            PCAN-PCI interface, channel 2.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci03">
            <summary>
            PCAN-PCI interface, channel 3.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci04">
            <summary>
            PCAN-PCI interface, channel 4.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci05">
            <summary>
            PCAN-PCI interface, channel 5.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci06">
            <summary>
            PCAN-PCI interface, channel 6.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci07">
            <summary>
            PCAN-PCI interface, channel 7.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci08">
            <summary>
            PCAN-PCI interface, channel 8.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci09">
            <summary>
            PCAN-PCI interface, channel 9.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci10">
            <summary>
            PCAN-PCI interface, channel 10.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci11">
            <summary>
            PCAN-PCI interface, channel 11.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci12">
            <summary>
            PCAN-PCI interface, channel 12.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci13">
            <summary>
            PCAN-PCI interface, channel 13.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci14">
            <summary>
            PCAN-PCI interface, channel 14.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci15">
            <summary>
            PCAN-PCI interface, channel 15.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Pci16">
            <summary>
            PCAN-PCI interface, channel 16.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb01">
            <summary>
            PCAN-USB interface, channel 1.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb02">
            <summary>
            PCAN-USB interface, channel 2.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb03">
            <summary>
            PCAN-USB interface, channel 3.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb04">
            <summary>
            PCAN-USB interface, channel 4.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb05">
            <summary>
            PCAN-USB interface, channel 5.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb06">
            <summary>
            PCAN-USB interface, channel 6.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb07">
            <summary>
            PCAN-USB interface, channel 7.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb08">
            <summary>
            PCAN-USB interface, channel 8.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb09">
            <summary>
            PCAN-USB interface, channel 9.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb10">
            <summary>
            PCAN-USB interface, channel 10.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb11">
            <summary>
            PCAN-USB interface, channel 11.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb12">
            <summary>
            PCAN-USB interface, channel 12.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb13">
            <summary>
            PCAN-USB interface, channel 13.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb14">
            <summary>
            PCAN-USB interface, channel 14.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb15">
            <summary>
            PCAN-USB interface, channel 15.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Usb16">
            <summary>
            PCAN-USB interface, channel 16.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan01">
            <summary>
            PCAN-LAN interface, channel 1.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan02">
            <summary>
            PCAN-LAN interface, channel 2.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan03">
            <summary>
            PCAN-LAN interface, channel 3.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan04">
            <summary>
            PCAN-LAN interface, channel 4.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan05">
            <summary>
            PCAN-LAN interface, channel 5.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan06">
            <summary>
            PCAN-LAN interface, channel 6.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan07">
            <summary>
            PCAN-LAN interface, channel 7.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan08">
            <summary>
            PCAN-LAN interface, channel 8.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan09">
            <summary>
            PCAN-LAN interface, channel 9.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan10">
            <summary>
            PCAN-LAN interface, channel 10.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan11">
            <summary>
            PCAN-LAN interface, channel 11.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan12">
            <summary>
            PCAN-LAN interface, channel 12.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan13">
            <summary>
            PCAN-LAN interface, channel 13.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan14">
            <summary>
            PCAN-LAN interface, channel 14.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan15">
            <summary>
            PCAN-LAN interface, channel 15.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanChannel.Lan16">
            <summary>
            PCAN-LAN interface, channel 16.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.OutputLanguage">
            <summary>
            Represents the available translation languages for error codes.
            </summary>
            <remarks>These values represent <see href="https://docs.microsoft.com/en-us/previous-versions/cc195085(v=msdn.10)">Primary language IDs</see> 
            as described by Microsoft.</remarks>
        </member>
        <member name="F:Peak.Can.Basic.OutputLanguage.Neutral">
            <summary>
            Defaults to the operating system language. If it is not supported, English is used as default
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.OutputLanguage.German">
            <summary>
            Represents the German language.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.OutputLanguage.English">
            <summary>
            Represents the English language.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.OutputLanguage.Spanish">
            <summary>
            Represents the Spanish language.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.OutputLanguage.Italian">
            <summary>
            Represents the Italian language.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.OutputLanguage.French">
            <summary>
            Represents the French language.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.PcanStatus">
            <summary>
            Represents a PCAN status/error code.
            </summary>
            <remarks>The <see cref="T:Peak.Can.Basic.PcanStatus"/> values are able to be bitwise combined. In some cases it is possible to get more than one error code as result 
            of calling a function.</remarks>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.OK">
            <summary>
            No error. Success.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.TransmitBufferFull">
            <summary>
            The transmit buffer in CAN controller is full.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.Overrun">
            <summary>
            The CAN controller was read too late.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.BusLight">
            <summary>
            Bus error: an error counter reached the 'light' limit.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.BusHeavy">
            <summary>
            Bus error: an error counter reached the 'heavy' limit.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.BusWarning">
            <summary>
            Bus error: an error counter reached the 'warning' limit.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.BusPassive">
            <summary>
            Bus error: the CAN controller is error passive.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.BusOff">
            <summary>
            Bus error: the CAN controller is in bus-off state.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.AnyBusError">
            <summary>
            Mask for all bus errors.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.ReceiveQueueEmpty">
            <summary>
            The reception queue is empty.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.ReceiveQueueOverrun">
            <summary>
            The reception queue was read too late.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.TransmitQueueFull">
            <summary>
            The transmit queue is full.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.NoDriver">
            <summary>
            The driver of the used PCAN device is not loaded.  
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.HardwareInUse">
            <summary>
            The PCAN-Hardware has already a PCAN-Net attached.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.NetInUse">
            <summary>
            A PCAN-Net has already a PCAN-Client attached.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle">
            <summary>
            The handle of the PCAN-Hardware is invalid.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.IllegalNetHandle">
            <summary>
            The handle of the PCAN-Net is invalid.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.IllegalClientHandle">
            <summary>
            The handle of the PCAN-Client is invalid.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.IllegalHandle">
            <summary>
            Mask for all handle errors.
            </summary>
            <remarks><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/> <b>or</b> <see cref="F:Peak.Can.Basic.PcanStatus.IllegalNetHandle"/> <b>or</b> <see cref="F:Peak.Can.Basic.PcanStatus.IllegalClientHandle"/></remarks>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.Resource">
            <summary>
            An internal resource (FIFO, Client, timeout) cannot be created.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.InvalidParameter">
            <summary>
            Unknown parameter.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.InvalidValue">
            <summary>
            Invalid parameter value.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.Unknown">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.IllegalData">
            <summary>
            An action, function, or data is invalid within the current context.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.IllegalMode">
            <summary>
            The device driver object state is wrong for the attempted operation.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.Caution">
            <summary>
            An operation was successfully carried out, however, irregularities were registered.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.Initialize">
            <summary>
            The PCAN Channel is not (or could not be) initialized.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanStatus.InvalidOperation">
            <summary>
            An invalid operation was registered.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.PcanDevice">
            <summary>
            Represents the type of interface and driver a device uses.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanDevice.None">
            <summary>
            Undefined, unknown or not selected PCAN device value.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanDevice.PcanPci">
            <summary>
            PCAN-PCI, PCAN-cPCI, PCAN-miniPCI, PCAN-PC/104-Plus, PCAN-PCI Express, PCAN-PCIe FD, PCAN-PCI FD, PCAN-Chip PCIe.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanDevice.PcanUsb">
            <summary>
            PCAN-USB, PCAN-USB Pro, PCAN-USB FD, PCAN-USB Pro FD, PCAN-Chip USB.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanDevice.PcanLan">
            <summary>
            PCAN-Gateway, and PCAN-Gateway FD PCAN devices.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.PcanParameter">
            <summary>
            Represents a PCAN parameter or a PCAN Value that can be read or set.
            </summary>
            <remarks>With some exceptions, a channel must first be initialized before their parameters can be read or set.</remarks>
            <conceptualLink target="524afbac-a18e-4c95-af4e-5c173f4ffdb7"/>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.DeviceId">
            <summary>
            Device identifier parameter. See <conceptualLink target = "cee31dd9-ab5c-4c5e-9841-9b1811f5b7ac">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.Power5Volts">
            <summary>
            PCAN "5-volt power" parameter. See <conceptualLink target = "960c9fc7-7391-4990-8aaa-020582c9073e">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.ReceiveEvent">
            <summary>
            PCAN receive event handler parameter. See <conceptualLink target = "56fd40a9-11b2-4e78-91c6-f9b0089693a2">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.MessageFilter">
            <summary>
            PCAN message filter parameter. See <conceptualLink target = "47826de8-da66-4c9d-ba58-863b0fad52a8">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.ApiVersion">
            <summary>
            PCAN-Basic API version parameter. See <conceptualLink target = "06e16aa9-02ad-4538-951a-f82045e52590">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.ChannelVersion">
            <summary>
            PCAN device channel version parameter. See <conceptualLink target = "156024fa-6a1b-4e07-b5f3-830d571e4b93">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.BusOffAutoReset">
            <summary>
            PCAN "reset on bus-off" parameter. See <conceptualLink target = "0a342681-5ade-4a4f-9bec-3a04f790f37b">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.ListenOnly">
            <summary>
            PCAN "listen-only" parameter. See <conceptualLink target = "3e5e1a2d-b990-4cc6-9908-001585cd3871">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.LogLocation">
            <summary>
            Directory path for log files. See <conceptualLink target = "7aef9296-dd25-40d1-87a1-42eaa143c245">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.LogStatus">
            <summary>
            Debug-Log activation status. See <conceptualLink target = "f79fade9-6f6c-4762-afdf-bcf4321055d8">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.LogConfigure">
            <summary>
            Configuration of the debugged information (<see cref="T:Peak.Can.Basic.ParameterValue.Log"/>). See <conceptualLink target = "b19e30aa-a642-47d0-b9ff-50d051adb104">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.LogText">
            <summary>
            Custom insertion of text into the log file. See <conceptualLink target = "a2da3a60-c925-44c1-a1e5-eb13bab4561e">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.ChannelCondition">
            <summary>
            Availability status of a PCAN Channel. See <conceptualLink target = "d0e15480-de96-42be-9d81-cb21224be1e8">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.HardwareName">
            <summary>
            PCAN "hardware name" parameter. See <conceptualLink target = "5227a666-6614-4569-9ba7-52eebc812b94">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.ReceiveStatus">
            <summary>
            "Receive Status" parameter for incoming messages. See <conceptualLink target = "b45bdc65-db9b-416f-9ce0-7837af3ea83a">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.ControllerNumber">
            <summary>
            Zero-based index of a CAN-Controller in a PCAN device. See <conceptualLink target = "8ab5ad18-7db3-4853-a4d0-442157354955">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.TraceLocation">
            <summary>
            	Directory path for PCAN trace files. See <conceptualLink target = "23dd49ef-09fc-4048-935a-cf6345656ebc">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.TraceStatus">
            <summary>
            PCAN tracing activation status. See <conceptualLink target = "6a5b116c-fb9c-4113-85d7-26078faae0c0">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.TraceSize">
            <summary>
            Configuration of the maximum file size of a PCAN trace. See <conceptualLink target = "e7e8bd00-f869-4a14-bef8-13e8cddd5e9c">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.TraceConfigure">
            <summary>
            Configuration of the trace file storing modes (<see cref="T:Peak.Can.Basic.ParameterValue.Trace"/>). See <conceptualLink target = "ffa11e51-bb6b-48a1-a04e-c84f71f8c7b3">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.ChannelIdentifying">
            <summary>
            Physical identification of an USB based PCAN Channel. See <conceptualLink target = "5eea2b8a-bd0d-4bcd-b45e-fbd0522d9833">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.ChannelFeatures">
            <summary>
            Capabilities of a PCAN device (<see cref="T:Peak.Can.Basic.PcanDeviceFeatures"/>). See <conceptualLink target = "f09587e4-d125-454f-b3e3-ab3f7957712e">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.BitrateAdapting">
            <summary>
            	Attachment to an existing connection with unknown/different bit rate. See <conceptualLink target = "8a3dd0ec-05c6-4ba7-adbe-b2a74aa804cb">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.BitrateInformation">
            <summary>
            Current bit rate as BTR0BTR1 value (classic CAN 2.0 A/B). See <conceptualLink target = "c51b0d82-133d-480e-86cc-3409dcc9f934">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.BitrateFdInformation">
            <summary>
            Current bit rate as FD String value (CAN FD). See <conceptualLink target = "3039c9fb-07f6-42e9-ad3a-d1f7168af9a3">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.BusSpeedNominal">
            <summary>
            Current CAN nominal speed in bits/second. See <conceptualLink target = "ac93f31f-23b6-4cd8-b65a-e40a3b943702">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.BusSpeedData">
            <summary>
            Current CAN data speed in bits/second. See <conceptualLink target = "4cca0134-7f41-4631-b111-b5d710e6563b">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.IpAddress">
            <summary>
            Remote address as a IPv4 formated string. See <conceptualLink target = "0e946633-c97a-42be-9312-e2fef9655a9f">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.VirtualPcanGatewayStatus">
            <summary>
            Running status of the Virtual PCAN-Gateway Service (<see cref="T:Peak.Can.Basic.ServiceStatus"/>). See <conceptualLink target = "21f68ddd-c41e-4db7-a316-1be2c393146e">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.AllowStatusFrames">
            <summary>
            "Receive Status" parameter for Status frames. See <conceptualLink target = "0a36d15b-3c49-42e2-83ac-fc716984aefb">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.AllowRtrFrames">
            <summary>
            "Receive Status" parameter for RTR frames. See <conceptualLink target = "3888371d-8917-4197-91ba-83af875dc99b">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.AllowErrorFrames">
            <summary>
            "Receive Status" parameter for Error frames. See <conceptualLink target = "86b0935e-8a3a-44de-850b-ffd9f1a77f6b">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.InterframeDelay">
            <summary>
            Delay, in microseconds, between sending frames. See <conceptualLink target = "5e2558a9-9753-4f16-b9a4-1254a3ddcb6c">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.AcceptanceFilter11Bit">
            <summary>
            Acceptance filter over code and mask for 11-bit CAN IDs. See <conceptualLink target = "21fe4a76-f945-4e91-a391-3b433fabbb8b">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.AcceptanceFilter29Bit">
            <summary>
            Acceptance filter over code and mask for 29-bit CAN IDs. See <conceptualLink target = "52836fd4-01e1-4bb0-ac3d-b69ca2aeca28">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.IoDigitalConfiguration">
            <summary>
            Activation of digital pins as outputs. See <conceptualLink target = "d0c748ca-5756-4f50-8142-a36391d1610c">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.IoDigitalValue">
            <summary>
            Multiple setting of digital pin values. See <conceptualLink target = "323e3742-7436-4357-8b6e-b5071a78b37a">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.IoDigitalSet">
            <summary>
            Selective setting of digital pin values to "high". See <conceptualLink target = "66b4d93d-ca2c-46ad-aa15-21ebd4b76b6b">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.IoDigitalClear">
            <summary>
            Selective setting of digital pin values to "low". See <conceptualLink target = "82d894b4-3572-40c3-a57d-60eecd5cf6f1">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.IoAnalogValue">
            <summary>
            Value reading of a single analog pin. See <conceptualLink target = "a8a141c7-78bc-4b32-8dc2-5c9d36012753">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.FirmwareVersion">
            <summary>
            Firmware version of a PCAN device. See <conceptualLink target = "e426e975-5de6-4f68-87bf-9973c4dc4d58">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.AttachedChannelsCount">
            <summary>
            Amount of PCAN channels attached to a system. See <conceptualLink target = "138ef5ba-4efa-4107-aac0-3094f14c8468">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.AttachedChannelsInformation">
            <summary>
            Information about PCAN channels attached to a system. See <conceptualLink target = "283aa084-fd98-4fce-813f-fda7c05dc848">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.AllowEchoFrames">
            <summary>
            "Receive Status" parameter for Echo frames. See <conceptualLink target = "4a6f0c95-988e-4873-8966-5e482b889cd1">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.DevicePartNumber">
            <summary>
            PEAK's device part number (IPEH number). See <conceptualLink target = "a75435fc-6883-4f52-8af3-06285fb7bb3d">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.HardResetStatus">
            <summary>
            "Activation Status" parameter for the hard reset capability. See <conceptualLink target = "78242dd8-d869-4ca1-9161-f9b28c4a2b64">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.LanChannelDirection">
            <summary>
            Communication direction of a PCAN Channel representing a PCAN-LAN interface. See <conceptualLink target = "d98ac8e7-f418-4518-af26-5baf8883c25f">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanParameter.DeviceGUID">
            <summary>
            Global unique device identifier (GUID) associated to a PCAN device. See <conceptualLink target = "9cca6160-e1c4-4621-8787-eef063bf447a">usage</conceptualLink> for more information.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.MessageType">
            <summary>
            Represents the type of a CAN message.
            </summary>
            <remarks>Several message types can be combined (bit mask value).    
            <note type="important">
            Messages with type <see cref="F:Peak.Can.Basic.MessageType.FlexibleDataRate"/>, <see cref="F:Peak.Can.Basic.MessageType.BitRateSwitch"/>, <see cref="F:Peak.Can.Basic.MessageType.ErrorStateIndicator"/>, or a combination of them, can only be sent/received 
            when the Channel is initialized using the <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="false"/> method.
            </note>
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.MessageType.Standard">
            <summary>
            The PCAN message is a CAN Standard Frame (11-bit identifier).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.MessageType.RemoteRequest">
            <summary>
            The PCAN message is a CAN Remote-Transfer-Request Frame.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.MessageType.Extended">
            <summary>
            The PCAN message is a CAN Extended Frame (29-bit identifier).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.MessageType.FlexibleDataRate">
            <summary>
            The PCAN message represents a FD frame in terms of CiA specifications.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.MessageType.BitRateSwitch">
            <summary>
            The PCAN message represents a FD bit rate switch (CAN data at a higher bit rate).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.MessageType.ErrorStateIndicator">
            <summary>
            The PCAN message represents a FD error state indicator(CAN FD transmitter was error active).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.MessageType.Echo">
            <summary>
            The PCAN message represents an echo CAN Frame ( self-received message).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.MessageType.Error">
            <summary>
            The PCAN message represents an error frame. See <conceptualLink target="68cca14e-9706-4178-a468-6e18e422e677"/> for more information.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.MessageType.Status">
            <summary>
            The PCAN message represents a PCAN status frame. See <conceptualLink target="bb6e13ad-203d-405e-aba9-89895bda82dd"/> for more information.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.FilterMode">
            <summary>
            Represents a PCAN filter mode.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilterMode.Standard">
            <summary>
            Mode is Standard (11-bit identifier).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilterMode.Extended">
            <summary>
            Mode is Extended (29-bit identifier).
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.Bitrate">
            <summary>
            Represents a PCAN bit rate register value.
            </summary>
            /// <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan1000">
            <summary>
            1 MBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan800">
            <summary>
            800 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan500">
            <summary>
            500 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan250">
            <summary>
            250 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan125">
            <summary>
            125 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan100">
            <summary>
            100 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan95">
            <summary>
            95,238 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan83">
            <summary>
            83,333 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan50">
            <summary>
            50 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan47">
            <summary>
            47,619 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan33">
            <summary>
            33,333 KBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan20">
            <summary>
            20 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan10">
            <summary>
            10 kBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Bitrate.Pcan5">
            <summary>
            5 kBit/s.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.ChannelCondition">
            <summary>
            Represents the connectivity condition of a PCAN Channel.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ChannelCondition.ChannelUnavailable">
            <summary>
            The PCAN Channel handle i.e. its associated hardware is not available.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ChannelCondition.ChannelAvailable">
            <summary>
            The hardware represented by the PCAN Channel is plugged-in, and valid to connect/initialize.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ChannelCondition.ChannelOccupied">
            <summary>
            The PCAN Channel handle is valid, and is currently being used.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ChannelCondition.ChannelPCanView">
            <summary>
            The PCAN Channel handle is currently being used by a PCAN-View application and is valid to connect.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.PcanDeviceFeatures">
            <summary>
            Represents the features implemented by a PCAN device.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanDeviceFeatures.FlexibleDataRate">
            <summary>
            The PCAN Channel represents a device that supports flexible data rate (CAN FD).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanDeviceFeatures.InterframeDelay">
            <summary>
            The PCAN Channel represents a device that supports the configuration of a delay between sending frames (FPGA devices only).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.PcanDeviceFeatures.IoFunctionality">
            <summary>
            The PCAN Channel represents a device that supports the configuration of digital and/or analogue IOs (input/output) for using with electronic circuits.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.ServiceStatus">
            <summary>
            Represents the status of the Virtual PCAN-Gateway service.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ServiceStatus.Stopped">
            <summary>
            The service is not running.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ServiceStatus.Running">
            <summary>
            The service is running.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.Protocol">
            <summary>
            Represents the transport protocol used for Data transmission.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Protocol.Can">
            <summary>
            Classic CAN 2.0 A/B, with a maximum of 8 data bytes per frame.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Protocol.CanFd">
            <summary>
            CAN with Flexible data rate, with a maximum of 64 bytes per frame.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.LanDirection">
            <summary>
            Represents the direction of the communication being currently carried out by a PCAN-LAN device.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.LanDirection.Read">
            <summary>
             The PCAN Channel is limited to incoming communication only.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.LanDirection.Write">
            <summary>
            The PCAN Channel is limited to outgoing communication only.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.LanDirection.ReadWrite">
            <summary>
            The PCAN Channel communication is bidirectional.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.PcanTimestamp">
            <summary>
            Represents a timestamp of a received PCAN message
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanTimestamp.Milliseconds">
            <summary>
            Total amount of milliseconds elapsed since Windows start until the reception of the associated CAN message
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanTimestamp.Microseconds">
            <summary>
            Total amount of microseconds elapsed since Windows start until the reception of the associated CAN message
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.DataBytes">
            <summary>
            Represents an object that manages the Data field for any CAN or CAN FD message.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.DataBytes.#ctor(System.Byte[])">
            <summary>
            Creates a DataBytes manager object.
            </summary>
            <param name="data">A byte array to manage.</param>
        </member>
        <member name="M:Peak.Can.Basic.DataBytes.#ctor(System.Int32)">
            <summary>
            Creates a DataBytes manager object.
            </summary>
            <param name="maxLength">Maximum length of the managed data.</param>
        </member>
        <member name="M:Peak.Can.Basic.DataBytes.SetData(System.Byte[],System.Boolean)">
            <summary>
            Replaces the content of the managed data bytes.
            </summary>
            <param name="data">The new data bytes.</param>
            <param name="ignoreOverflow">When true, <paramref name="data"/> is truncated, if its length is greater than 
            <see cref="P:Peak.Can.Basic.DataBytes.MaxLength"/>. Otherwise, an exception is thrown.</param>
            <exception cref="T:System.OverflowException">The length of the <paramref name="data"/> passed to the method is greater than
            the maximum allowed (<see cref="P:Peak.Can.Basic.DataBytes.MaxLength"/>).</exception>
        </member>
        <member name="M:Peak.Can.Basic.DataBytes.Clone">
            <summary>
            Returns a new copy of this instance with the same data values.
            </summary>
            <returns>A copy of this DataBytes object.</returns>
        </member>
        <member name="M:Peak.Can.Basic.DataBytes.op_Implicit(System.Byte[])~Peak.Can.Basic.DataBytes">
            <summary>
            Implicitly converts a byte array in a DataBytes object.
            </summary>
            <param name="data">A byte array.</param>
            <returns>A DataBytes object based on the given byte array.</returns>
        </member>
        <member name="M:Peak.Can.Basic.DataBytes.op_Implicit(Peak.Can.Basic.DataBytes)~System.Byte[]">
            <summary>
            Implicitly converts a DataBytes object in a byte array.
            </summary>
            <param name="data">A DataBytes object.</param>
            <returns>A byte array based on the given DataBytes.</returns>
        </member>
        <member name="P:Peak.Can.Basic.DataBytes.Item(System.Int32)">
            <summary>
            Access as data iterator.
            </summary>
            <param name="i">The index of the value to retrieve.</param>
            <returns>The value requested.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index is outside its bounds.</exception>
        </member>
        <member name="P:Peak.Can.Basic.DataBytes.MaxLength">
            <summary>
            The maximum length or count of bytes contained/managed in this <see cref="T:Peak.Can.Basic.DataBytes"/> object.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.PcanMessage">
            <summary>
            Represents a PCAN message from a CAN or CAN FD capable hardware.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.PcanMessage.#ctor(System.UInt32,Peak.Can.Basic.MessageType,System.Byte,System.Byte[],System.Boolean)">
            <summary>
            Initializes an instance of <see cref="T:Peak.Can.Basic.PcanMessage"/>.
            </summary>        
            <param name="id">The 11/29-bit CAN identifier.</param>
            <param name="msgType">The type of the message.</param>
            <param name="dlc">The Data Length Code (DLC) of the message (0..15)</param>
            <param name="data">The data associated to the message. If <c>null</c>, <paramref name="data"/> default values are used (0).</param>
            <param name="extendedDataLength">If the data of the message may contain more than 8 bytes (CAN FD).</param>
        </member>
        <member name="M:Peak.Can.Basic.PcanMessage.ToString">
            <summary>
            Builds and returns a string that represents the current CAN message.
            </summary>
            <returns>A string that represents the current CAN message.</returns>
        </member>
        <member name="P:Peak.Can.Basic.PcanMessage.MaxDataLength">
            <summary>
            Maximum amount of data bytes supported by this object
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanMessage.ID">
            <summary>
            A 11/29-bit CAN message identifier.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanMessage.DLC">
            <summary>
            The Data Length Code (DLC) of the message (0..15).
            </summary>
            <remarks>
            <para>The number of data bytes (<see cref="P:Peak.Can.Basic.PcanMessage.Length"/>) in the <see cref="P:Peak.Can.Basic.PcanMessage.Data"/> field is indicated by the Data Length Code. Its coding is different in CAN and CAN FD. 
            The first nine codes are the same in both, but the following codes specify different data lengths. There is the following relationship between Data Length Code and 
            the actual number of data bytes:</para>
            <para>
            <list type="table">
            <listheader>
            <term><b>DLC</b></term>
            <term><b>Data Length - CAN</b></term>
            <term><b>Data Length - CAN FD</b></term>
            </listheader>
            <item>
            <description>≤ 8</description>
            <description>DLC</description>
            <description>DLC</description>
            </item>
            <item>
            <description>9</description>
            <description>8</description>
            <description>12</description>
            </item>
            <item>
            <description>10</description>
            <description>8</description>
            <description>16</description>
            </item>
            <item>
            <description>11</description>
            <description>8</description>
            <description>20</description>
            </item>
            <item>
            <description>12</description>
            <description>8</description>
            <description>24</description>
            </item>
            <item>
            <description>13</description>
            <description>8</description>
            <description>32</description>
            </item>
            <item>
            <description>14</description>
            <description>8</description>
            <description>48</description>
            </item>
            <item>
            <description>15</description>
            <description>8</description>
            <description>64</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Peak.Can.Basic.PcanMessage.Length">
            <summary>
            The amount of data bytes according to the Data Length Code.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanMessage.MsgType">
            <summary>
            The kind of CAN frame represented by this object.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanMessage.Data">
            <summary>
            The data associated to the CAN message (CAN DATA[0]..DATA[7], CAN FD DATA[0]..DATA[63]).
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.PcanChannelInformation">
            <summary>
            Represents information about a PCAN Channel.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanChannelInformation.ChannelHandle">
            <summary>
            The handle of the PCAN Channel.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanChannelInformation.ChannelCondition">
            <summary>
             The availability status of the PCAN Channel.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanChannelInformation.DeviceID">
            <summary>
            The identification number of the device represented by the PCAN Channel.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanChannelInformation.DeviceName">
            <summary>
            The name of the device represented by the PCAN Channel.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanChannelInformation.DeviceType">
            <summary>
            The kind of PCAN device represented by the PCAN Channel.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanChannelInformation.DeviceFeatures">
            <summary>
            The features supported by the device represented by the PCAN Channel.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanChannelInformation.ControllerNumber">
            <summary>
            The CAN controller index represented by this PCAN Channel.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BitrateFD">
            <summary>
            Defines the different configuration parameters used to create a Flexible Data rate string for FD capable PCAN Channels initialization.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BitrateFD.BitrateSegment">
            <summary>
            Represents single bit rate parameters.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.BitrateFD.BitrateSegment.Mode">
            <summary>
            The bit rate type.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.BitrateFD.BitrateSegment.Brp">
            <summary>
            The bit rate prescaler.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.BitrateFD.BitrateSegment.Sjw">
            <summary>
            The resynchronization jump width.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.BitrateFD.BitrateSegment.Tseg1">
            <summary>
            The time segment 1.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.BitrateFD.BitrateSegment.Tseg2">
            <summary>
            The time segment 2.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.BitrateFD.BitrateSegment.ToString">
            <summary>
            Returns the parameterized bit rate string section for this instance.
            </summary>
            <returns>The nominal or data bit rate parameters, as a part of a CAN FD bit rate string.</returns>
        </member>
        <member name="T:Peak.Can.Basic.BitrateFD.BitrateType">
            <summary>
            The bit rate representation.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.BitrateType.Default">
            <summary>
            Not set, default value.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.BitrateType.ArbitrationPhase">
            <summary>
            The bit rate is described as CAN FD nominal bit-rate.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.BitrateType.DataPhase">
            <summary>
            The bit rate is described as CAN FD data bit-rate.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.BitrateFD.ClockFrequency">
            <summary>
            Represents the supported bit rate clock frequencies.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ClockFrequency.Default">
            <summary>
            Not set, default value.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ClockFrequency.Mhz_08">
            <summary>
            8 Megahertz, used for SJA1000 only.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ClockFrequency.Mhz_20">
            <summary>
            20 Megahertz.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ClockFrequency.Mhz_24">
            <summary>
            24 Megahertz.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ClockFrequency.Mhz_30">
            <summary>
            30 Megahertz.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ClockFrequency.Mhz_40">
            <summary>
            40 Megahertz.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ClockFrequency.Mhz_60">
            <summary>
            60 Megahertz.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ClockFrequency.Mhz_80">
            <summary>
            80 Megahertz.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterClockFrequence">
            <summary>
            Clock frequency in Hertz (80000000, 60000000, 40000000, 30000000, 24000000, 20000000).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterClockFrequenceMhz">
            <summary>
            Clock frequency in Megahertz (80, 60, 40, 30, 24, 20).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterNominalBitratePrescaler">
            <summary>
            Clock prescaler for nominal time quantum (1..1024).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterNominalTimeSegment1">
            <summary>
            TSEG1 segment for nominal bit rate in time quanta
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterNominalTimeSegment2">
            <summary>
            TSEG2 segment for nominal bit rate in time quanta
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterNominalSynchronizationJumpWidth">
            <summary>
            Synchronization Jump Width for nominal bit rate in time quanta
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterDataBitratePrescaler">
            <summary>
            Clock prescaler for high-speed data time quantum
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterDataTimeSegment1">
            <summary>
            TSEG1 segment for fast data bit rate in time quanta
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterDataTimeSegment2">
            <summary>
            TSEG2 segment for fast data bit rate in time quanta
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.ParameterDataSynchronizationJumpWidth">
            <summary>
            Synchronization Jump Width for high-speed data bit rate in time quanta
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.BitrateSaeJ2284_4">
            <summary>
            A string representing the bit rate FD <b>SAE J2284-4</b>: Nominal: 500 kBit/s | Data: 2 MBit/s.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.BitrateFD.BitrateSaeJ2284_5">
            <summary>
            A string representing the bit rate FD <b>SAE J2284-5</b>: Nominal: 500 kBit/s | Data: 5 MBit/s.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.BitrateFD.#ctor(System.String)">
            <summary>
            Initializes an instance of a <see cref="T:Peak.Can.Basic.BitrateFD"/> object.
            </summary>
            <param name="fdBitrateValues">A parameterized string representing a CAN FD bit rate.</param>
        </member>
        <member name="M:Peak.Can.Basic.BitrateFD.#ctor(Peak.Can.Basic.BitrateFD.ClockFrequency,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes an instance of a <see cref="T:Peak.Can.Basic.BitrateFD"/> object.
            </summary>
            <param name="frequency">The clock frequency to use for the CAN FD bit rate.</param>
            <param name="nominalBrp">The bit rate prescaler value (BRP) of the nominal part of the CAN FD bit rate.</param>
            <param name="nominalTseg1">The time segment 1 value (TSEG1) of the nominal part of the CAN FD bit rate.</param>
            <param name="nominalTseg2">The time segment 2 value (TSEG2) of the nominal part of the CAN FD bit rate.</param>
            <param name="nominalSjw">the resynchronization jump value (SJW) of the nominal part of the CAN FD bit rate.</param>
            <param name="dataBrp">The bit rate prescaler value (BRP) of the data part of the CAN FD bit rate.</param>
            <param name="datatTseg1">The time segment 1 value (TSEG1) of the data part of the CAN FD bit rate.</param>
            <param name="dataTseg2">The time segment 2 value (TSEG2) of the data part of the CAN FD bit rate.</param>
            <param name="dataSjw">the resynchronization jump width value (SJW) of the data part of the CAN FD bit rate.</param>
        </member>
        <member name="M:Peak.Can.Basic.BitrateFD.#ctor(Peak.Can.Basic.BitrateFD.ClockFrequency,Peak.Can.Basic.BitrateFD.BitrateSegment,Peak.Can.Basic.BitrateFD.BitrateSegment)">
            <summary>
            Initializes an instance of a <see cref="T:Peak.Can.Basic.BitrateFD"/> object.
            </summary>
            <param name="frequency">The clock frequency to use for the CAN FD bit rate.</param>
            <param name="nominal">A value describing the nominal part of the CAN FD bit rate.</param>
            <param name="data">A value describing the data part of the CAN FD bit rate.</param>
        </member>
        <member name="M:Peak.Can.Basic.BitrateFD.ToString">
            <summary>
            Returns a string that represents a parameterized CAN FD bit rate.
            </summary>
            <returns>A parameterized CAN FD bit rate string.</returns>
        </member>
        <member name="M:Peak.Can.Basic.BitrateFD.op_Implicit(Peak.Can.Basic.BitrateFD)~System.String">
            <summary>
            Implicitly converts a <see cref="T:Peak.Can.Basic.BitrateFD"/> instance into its CAN FD bit rate string representation.
            </summary>
            <param name="bitrate"><see cref="T:Peak.Can.Basic.BitrateFD"/> value to be converted.</param>
            <returns>A string representing the given <see cref="T:Peak.Can.Basic.BitrateFD"/> value.</returns>
        </member>
        <member name="M:Peak.Can.Basic.BitrateFD.op_Explicit(System.String)~Peak.Can.Basic.BitrateFD">
            <summary>
            Explicitly converts a parameterized CAN FD bit rate string in an equivalent <see cref="T:Peak.Can.Basic.BitrateFD"/> object.
            </summary>
            <param name="bitrate">The CAN FD bit rate string to be converted.</param>
            <returns>A <see cref="T:Peak.Can.Basic.BitrateFD"/> object representing the given CAN FD bit rate string.</returns>
        </member>
        <member name="P:Peak.Can.Basic.BitrateFD.Frequency">
            <summary>
            Gets or sets the clock frequency used by this CAN FD bit rate.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.BitrateFD.Nominal">
            <summary>
            Gets or sets the configuration values for the nominal part of the CAN FD bit rate.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.BitrateFD.Data">
            <summary>
            Gets or sets the configuration values for the data part of the CAN FD bit rate.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.ParameterValue">
            <summary>
            Represents the allowed values for PCAN-Basic parameters configuration.    
            </summary>
            <remarks>
            <para>The values represented by this class and sub-classes are intended to be used:</para> 
            <list type="bullet">
            <item>for configuring filter, log, or trace parameters by using the <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)" autoUpgrade="true"/> method.</item>
            <item>for configuring parameters that can be activated or deactivated by using the <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)" autoUpgrade="true"/> method.</item>
            <item>for parsing and understanding values retrieved by the <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)" autoUpgrade="true"/> method.</item>
            <item>for consulting range values, for instance, for preparing buffers to use with the <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)" autoUpgrade="true"/> method.</item>
            <item>for creating a search string for the <see cref="M:Peak.Can.Basic.Api.LookUpChannel(System.String,Peak.Can.Basic.PcanChannel@)" autoUpgrade="true"/> method.</item>
            </list>
            </remarks>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Activation"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Filter"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Log"/>    
            <seealso cref="T:Peak.Can.Basic.ParameterValue.LookUp"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Trace"/>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.PCAN_PARAMETER_OFF">
            <summary>
            The PCAN parameter is not set (inactive)
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.PCAN_PARAMETER_ON">
            <summary>
            The PCAN parameter is set (active)
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.PCAN_FILTER_CLOSE">
            <summary>
            The PCAN filter is closed. No messages will be received
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.PCAN_FILTER_OPEN">
            <summary>
            The PCAN filter is fully opened. All messages will be received
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.PCAN_FILTER_CUSTOM">
            <summary>
            The PCAN filter is custom configured. Only registered 
            messages will be received
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LOG_FUNCTION_DEFAULT">
            <summary>
            Logs system exceptions / errors
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LOG_FUNCTION_ENTRY">
            <summary>
            Logs the entries to the PCAN-Basic API functions 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LOG_FUNCTION_PARAMETERS">
            <summary>
            Logs the parameters passed to the PCAN-Basic API functions 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LOG_FUNCTION_LEAVE">
            <summary>
            Logs the exits from the PCAN-Basic API functions 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LOG_FUNCTION_WRITE">
            <summary>
            Logs the CAN messages passed to the CAN_Write function
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LOG_FUNCTION_READ">
            <summary>
            Logs the CAN messages received within the CAN_Read function
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LOG_FUNCTION_ALL">
            <summary>
            Logs all possible information within the PCAN-Basic API functions
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.TRACE_FILE_SINGLE">
            <summary>
            A single file is written until it size reaches PAN_TRACE_SIZE
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.TRACE_FILE_SEGMENTED">
            <summary>
            Traced data is distributed in several files with size PAN_TRACE_SIZE
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.TRACE_FILE_DATE">
            <summary>
            Includes the date into the name of the trace file
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.TRACE_FILE_TIME">
            <summary>
            Includes the start time into the name of the trace file
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.TRACE_FILE_OVERWRITE">
            <summary>
            Causes the overwriting of available traces (same name)
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.TRACE_FILE_DATA_LENGTH">
            <summary>
            Causes using the data length column ('l') instead of the DLC column ('L') in the trace file.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.MaxHardwareNameLength">
            <summary>
            Represents the maximum length that the name of a device can have (32 characters + terminator).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.MaxVersionStringLength">
            <summary>
            Represents the maximum length that a version string can have (255 characters + terminator).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.MaxStandardIdValue">
            <summary>
            Represents the maximum value that a 11-bit CAN ID can have.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.MaxExtendedIdValue">
            <summary>
            Represents the maximum value that a 29-bit CAN ID can have.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.MaxCanDataLength">
            <summary>
            Represents the maximum amount of data bytes a CAN message can have in classic CAN 2.0A/B mode.
            </summary>
            <remarks>
            Take care of the difference between data length and DLC (data length code). See <see cref="P:Peak.Can.Basic.PcanMessage.DLC"/> for more information.
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.MaxCanFdDataLength">
            <summary>
            Represents the maximum amount of data bytes a CAN message can have in CAN FD mode.
            </summary>
            <remarks>
            Take care of the difference between data length and DLC (data length code). See <see cref="P:Peak.Can.Basic.PcanMessage.DLC"/> for more information.
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.MaxBufferedMessages">
            <summary>
            Represents the maximum amount of CAN messages that the receive queue of a Channel can hold.
            </summary>
            <remarks>
            When the receive queue is not read on time and more messages are received than the maximum supported, a queue 
            overrun occurs. This means, the newest message will be included into the queue while the oldest one is discarded. 
            </remarks>
        </member>
        <member name="T:Peak.Can.Basic.ParameterValue.Activation">
            <summary>
            Represents values applicable to parameters, that can be activated or deactivated.
            </summary>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Filter"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Log"/>    
            <seealso cref="T:Peak.Can.Basic.ParameterValue.LookUp"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Trace"/>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Activation.On">
            <summary>
            Value for activation (On status).
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Activation.Off">
            <summary>
            Value for deactivation (Off status).
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.ParameterValue.Filter">
            <summary>
            Represents values applicable to filter parameters.
            </summary>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Activation"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Log"/>    
            <seealso cref="T:Peak.Can.Basic.ParameterValue.LookUp"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Trace"/>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Filter.Close">
            <summary>
            Represents a closed CAN filter. No messages can be received.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Filter.Open">
            <summary>
            Represents an opened CAN filter. Any message is received.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Filter.Custom">
            <summary>
            Represents a customized CAN filter. Only selected messages are received.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.ParameterValue.Log">
            <summary>
            Represents values applicable to parameters related to data logging.
            </summary>
            <remarks>These values are flags. They can be combined with each other.</remarks>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Activation"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Filter"/> 
            <seealso cref="T:Peak.Can.Basic.ParameterValue.LookUp"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Trace"/>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Log.Default">
            <summary>
            Represents default information logging, i.e. system exceptions or unknown errors.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Log.FunctionEntries">
            <summary>
            Represents logging of API function entries. 
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Log.FunctionParameters">
            <summary>
            Represents logging of parameters passed to the API functions.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Log.FunctionExits">
            <summary>
            Represents logging of API function exits.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Log.MessageWriting">
            <summary>
            Represents logging of CAN messages sent from the PCAN Channel to the CAN bus.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Log.MessageReading">
            <summary>
            Represents logging of CAN messages received by the PCAN Channel.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Log.All">
            <summary>
            Represents logging any available information.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.ParameterValue.Trace">
            <summary>
            Represents values applicable to parameters related to CAN data tracing. 
            </summary>
            <remarks>These values are flags. There can be combined with each other</remarks>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Activation"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Filter"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Log"/>    
            <seealso cref="T:Peak.Can.Basic.ParameterValue.LookUp"/>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Trace.SingleFile">
            <summary>
            A single file is generated until it size reaches <see cref="F:Peak.Can.Basic.PcanParameter.TraceSize"/> MB.
            </summary>
            <remarks>
            <para>
            A trace session is stored in a single and stays active until the file reaches the maximum configured file size, it is deactivated, or the PCAN Channel used is disconnected.
            </para>
            <para>
            Tracing is automatically stopped when a file reaches the configured size limit. 
            The <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.String)" autoUpgrade="true"/> method must be called using the 
            <see cref="F:Peak.Can.Basic.PcanParameter.TraceStatus"/> parameter to start the tracing functionality again.
            </para>
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Trace.MultiFiles">
            <summary>
            The traced data is spread over multiple files with a maximum size of <see cref="F:Peak.Can.Basic.PcanParameter.TraceSize"/> MB each.
            </summary>
            <remarks>
            <para>
            A trace session is stored in several files. A new file is created when a previous file reaches the maximum configured size. 
            The tracing process stays active until it is deactivated, or the PCAN-Channel used is disconnected.
            </para>
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Trace.DateInFileName">
            <summary>
            The name of the trace files contains the date the trace was started.
            </summary>
            <remarks>
            <para>
            The name of the trace file additionally includes the start-date of the tracing process. The date is expressed using 8 digits with the form 
            <b>YYYYMMDD</b>, where YYYY are four digits for the year, MM two digits for the month, and DD two digits for the day, e.g., “<b>20130228</b>_PCAN_USBBUS1.trc” 
            for the 28th of February 2013. If both, <see cref="F:Peak.Can.Basic.ParameterValue.Trace.DateInFileName"/> and <see cref="F:Peak.Can.Basic.ParameterValue.Trace.TimeInFileName"/> are configured, the file name starts always with 
            the date: "<b>20130228</b>140733_PCAN_USBBUS1_1.trc".
            </para>
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Trace.TimeInFileName">
            <summary>
            The name of the trace files contains the time the trace was started.
            </summary>
            <remarks>
            <para>
            The name of the trace file additionally includes the start-time of the tracing session. The time is expressed using 6 digits with the form <b>HHMMSS</b>, where 
            HH are two digits for the hour in 24 hours format, MM two digits for the minutes, and SS two digits for the seconds, e.g., “<b>140733</b>_PCAN_USBBUS1.trc” for 
            the 14:07:33 (02:07:33 PM). If both, <see cref="F:Peak.Can.Basic.ParameterValue.Trace.DateInFileName"/> and <see cref="F:Peak.Can.Basic.ParameterValue.Trace.TimeInFileName"/> are configured, the file name starts always with 
            the date: "20130228<b>140733</b>_PCAN_USBBUS1_1.trc".
            </para>
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Trace.OverrideExisting">
            <summary>
            If a file with the same name of the trace to create already exists, it is overwritten.
            </summary>
            <remarks>
            <para>
            It causes the overwriting of an existence trace file when a new trace process is started. If this value is not configured, trying to start a tracing process will 
            fail if the file name to generate is the same as one used by an existing file.
            </para>
            </remarks>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.Trace.UseDataLength">
            <summary>
            The trace file shows the column "Data Length" ('l') instead of the column "Data Length Code" ('L').
            </summary>
            <remarks>
            <para>
            The "Data Length" represents the actual number of data bytes in a CAN or CAN FD message. Its value range is from 0 to 64. The "Data Length Code", as known as DLC, 
            has a different interpretation in CAN and CAN FD. The first nine codes (0 to 8) represents 0 to 8 bytes for both. The last codes (9 to 15) represent for CAN a data 
            length of 8. For CAN FD, these values indicate a data length between 12 and 64 bytes (see <see cref="P:Peak.Can.Basic.PcanMessage.DLC"/> for detailed information). 
            </para>
            </remarks>
        </member>
        <member name="T:Peak.Can.Basic.ParameterValue.LookUp">
            <summary>
            Represents values applicable to parameters related to the <see cref="M:Peak.Can.Basic.Api.LookUpChannel(System.String,Peak.Can.Basic.PcanChannel@)" autoUpgrade="true"/> method. 
            </summary>
            <remarks>
            <para>The field values represent the name of the parameters to use within the search string of the <see cref="M:Peak.Can.Basic.Api.LookUpChannel(System.String,Peak.Can.Basic.PcanChannel@)" autoUpgrade="true"/> method.</para>
            <para>Use the <see cref="M:Peak.Can.Basic.ParameterValue.LookUp.GetCriteriaString(System.Nullable{Peak.Can.Basic.PcanDevice},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.String,System.String)" autoUpgrade="true"/> to get the criteria string with the desired parameters. </para>
            </remarks>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Activation"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Filter"/>
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Log"/>    
            <seealso cref="T:Peak.Can.Basic.ParameterValue.Trace"/>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LookUp.DeviceType">
            <summary>
            Search parameter representing a <see cref="T:Peak.Can.Basic.PcanDevice"/> value.
            </summary>
            <remarks>
            <para>The <see cref="T:Peak.Can.Basic.PcanDevice"/> value can be represented as follow:</para>
            <list type="bullet">
            <item>
            As a number, using decimal or hexadecimal notation.
            </item>
            <item>
            As the conversion of the <see cref="F:Peak.Can.Basic.ParameterValue.LookUp.DeviceType"/> value to string.
            </item>
            </list>
            </remarks>
            <example>
            <para><c>devicetype=5</c></para>
            <para><c>devicetype=0x5</c></para>
            <para><c>devicetype=5h</c></para>
            <para><c>devicetype=PcanUsb</c></para>
            </example>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LookUp.DeviceId">
            <summary>
            Search parameter representing a device ID value.
            </summary>
            <remarks>
            <para>
            The device ID is a value in range of a double word, [0 .. <see cref="F:System.UInt32.MaxValue"/>].  
            It is represented as a number, using decimal or hexadecimal notation.</para>
            </remarks>
            <example>
            <para><c>deviceid=10</c></para>
            <para><c>deviceid=0xA</c></para>
            <para><c>deviceid=Ah</c></para>
            </example>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LookUp.ControllerNumber">
            <summary>
            Search parameter representing a CAN controller value.
            </summary>
            <remarks>
            <para>
            The controller number is a zero-based index value in range of a double word, [0 .. <see cref="F:System.UInt32.MaxValue"/>]. 
            It is represented as a number, using decimal or hexadecimal notation.</para>
            </remarks>
            <example>
            <para><c>controllernumber=1</c></para>
            <para><c>controllernumber=0x1</c></para>
            <para><c>controllernumber=1h</c></para>
            </example>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LookUp.IpAddress">
            <summary>
            Search parameter representing an IP address value.
            </summary>
            <remarks>
            <para>
            The IP address is string representing an Internet Protocol address in standard notation. </para>
            <para>It is made of 4 octets of numbers separated by '.', each with a value in the range of a byte, [0 .. <see cref="F:System.Byte.MaxValue"/>].</para>
            </remarks>
            <example>
            <para><c>ipaddress=192.168.2.1</c></para>
            </example>
        </member>
        <member name="F:Peak.Can.Basic.ParameterValue.LookUp.DeviceGuid">
            <summary>
            Search parameter representing a global unique identifer (GUID).
            </summary>
            <remarks>
            <para>
            The GUID is a persistent, distinctive, and immutable value stored in the flash memory of each device. </para>
            <para>It is represented as a string of hexadecimal values in 8-4-4-4-12 format, RFC 4122.</para>
            </remarks>
            <example>
            <para><c>deviceguid=12345678-aaaa-bbbb-cccc-123456789abc</c></para>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.ParameterValue.LookUp.GetCriteriaString(System.Nullable{Peak.Can.Basic.PcanDevice},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Net.IPAddress,System.Nullable{System.Guid})">
            <summary>
            Builds and retrieves a string to be used as search criteria with the <see cref="T:Peak.Can.Basic.ParameterValue.LookUp"/> method.
            </summary>
            <param name="deviceType">The type of device to match. It should be set to <c>null</c> in case the device type is not wanted as search criteria.</param>
            <param name="deviceId">The device ID to match. It should be set to <c>null</c> in case the device ID is not wanted as search criteria.</param>
            <param name="controllerNumber">The controller number to match. It should be set to <c>null</c> in case the controller number is not wanted as search criteria.</param>
            <param name="ipAddress">The IP address to match. It should be set to <c>null</c> in case the IP address is not wanted as search criteria.</param>
            <param name="deviceGuid">The GUID to match. It should be set to <c>null</c> in case the GUID is not wanted as search criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Peak.Can.Basic.ParameterValue.LookUp.GetForDeviceGuid(System.Guid)">
            <summary>
            Gets a search string using a GUID as search criteria.
            </summary>
            <param name="value">A global unique identifier.</param>
            <returns>A string of the form '<see cref="F:Peak.Can.Basic.ParameterValue.LookUp.DeviceGuid"/>=<paramref name="value"/>'.</returns>
        </member>
        <member name="M:Peak.Can.Basic.ParameterValue.LookUp.GetForControllerNumber(System.UInt32)">
            <summary>
            Gets a search string using a controller number as search criteria.
            </summary>
            <param name="value">A zero-based index value in range of a double word, [0 .. <see cref="F:System.UInt32.MaxValue"/>].</param>
            <returns>A string of the form '<see cref="F:Peak.Can.Basic.ParameterValue.LookUp.ControllerNumber"/>=<paramref name="value"/>'.</returns>
        </member>
        <member name="M:Peak.Can.Basic.ParameterValue.LookUp.GetForDeviceId(System.UInt32)">
            <summary>
            Gets a search string using a device ID as search criteria.
            </summary>
            <param name="value">A value in range of a double word, [0 .. <see cref="F:System.UInt32.MaxValue"/>]. </param>
            <returns>A string of the form '<see cref="F:Peak.Can.Basic.ParameterValue.LookUp.DeviceId"/>=<paramref name="value"/>'.</returns>
        </member>
        <member name="M:Peak.Can.Basic.ParameterValue.LookUp.GetForDeviceType(Peak.Can.Basic.PcanDevice)">
            <summary>
             Gets a search string using a device type as search criteria.
            </summary>
            <param name="value">A numeric value in range of a double word, [0 .. <see cref="F:System.UInt32.MaxValue"/>]. </param>
            <returns>A string of the form '<see cref="F:Peak.Can.Basic.ParameterValue.LookUp.DeviceType"/>=<paramref name="value"/>'.</returns>
        </member>
        <member name="M:Peak.Can.Basic.ParameterValue.LookUp.GetForIpAddress(System.Net.IPAddress)">
            <summary>
            Gets a search string using an IP address as search criteria.
            </summary>
            <param name="value">An Internet Protocol address.</param>
            <returns>A string of the form '<see cref="F:Peak.Can.Basic.ParameterValue.LookUp.IpAddress"/>=<paramref name="value"/>'.</returns>
        </member>
        <member name="M:Peak.Can.Basic.ParameterValue.LookUp.GetCriteriaString(System.Nullable{Peak.Can.Basic.PcanDevice},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.String,System.String)">
            <summary>
            Builds and retrieves a string to be used as search criteria with the <see cref="T:Peak.Can.Basic.ParameterValue.LookUp"/> method.
            </summary>
            
            <param name="deviceType">The type of device to match. It should be set to <c>null</c> in case the device type is not wanted as search criteria.</param>
            <param name="deviceId">The device ID to match. It should be set to <c>null</c> in case the device ID is not wanted as search criteria.</param>
            <param name="controllerNumber">The controller number to match. It should be set to <c>null</c> in case the controller number is not wanted as search criteria.</param>
            <param name="ipAddress">The IP address to match. It should be set to <c>null</c> in case the IP address is not wanted as search criteria.</param>
            <param name="deviceGuid">The global unique identifier (GUID) to match. It should be set to <c>null</c> in case the GUID is not wanted as search criteria.</param>
            <returns>A formatted string containing the search parameters.</returns>
            
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The current operation ended with an unexpected result. Check the inner exception for more information.</exception>
            
            <example>
                <para>
                To see an example of this method, please refer to the example of the <see cref="M:Peak.Can.Basic.Api.LookUpChannel(System.String,Peak.Can.Basic.PcanChannel@)" autoUpgrade="true"/> method. 
                </para>
            </example>
            
            <seealso cref="M:Peak.Can.Basic.Api.LookUpChannel(System.String,Peak.Can.Basic.PcanChannel@)" autoUpgrade="true"/>
        </member>
        <member name="T:Peak.Can.Basic.PcanBasicException">
            <summary>
            Represents an exception thrown when a call to a <see cref="T:Peak.Can.Basic.Api"/> functions fails in an unexpected manner.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.PcanBasicException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Peak.Can.Basic.PcanBasicException"/> class.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.PcanBasicException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Peak.Can.Basic.PcanBasicException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Peak.Can.Basic.PcanBasicException.#ctor(Peak.Can.Basic.PcanStatus,System.String,Peak.Can.Basic.OutputLanguage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Peak.Can.Basic.PcanBasicException"/> class.
            </summary>
            <param name="error">The <see cref="T:Peak.Can.Basic.PcanStatus"/> value returned by a PCAN-Basic API function.</param>        
            <param name="apiFunction">The name of the PCAN-Basic API function causing the error.</param>
            <param name="language"></param>
            <param name="methodCaller">The name of the managed method calling  the PCAN-Basic function.</param>
        </member>
        <member name="M:Peak.Can.Basic.PcanBasicException.#ctor(System.Exception,Peak.Can.Basic.PcanStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Peak.Can.Basic.PcanBasicException"/> class.
            </summary>
            <param name="inner">The exception that is the cause of the current <see cref="T:Peak.Can.Basic.PcanBasicException"/> or a null reference
            if no inner exception is specified.</param>
            <param name="error"><see cref="T:Peak.Can.Basic.PcanStatus"/> value returned by a PCAN-Basic API function, or nearest  
            <see cref="T:Peak.Can.Basic.PcanStatus"/> value deduced from a general exception.</param>
            <param name="methodCaller">Name of the managed method calling  the PCAN-Basic function.</param>
        </member>
        <member name="P:Peak.Can.Basic.PcanBasicException.Error">
            <summary>
            <see cref="T:Peak.Can.Basic.PcanStatus"/> value returned by the related PCAN-Basic API function.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanBasicException.ApiFunction">
            <summary>
            Name of the last PCAN-Basic API function called before the exception occurred.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.PcanBasicException.MethodCaller">
            <summary>
            Name of the class method within the PCANBasic.NET assembly throwing the exception.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.FilterBehavior">
            <summary>
            The operation that take place when a filtering criterion has a match.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilterBehavior.Include">
            <summary>
            If the filter matches, the message is enqueued.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilterBehavior.Exclude">
            <summary>
            If the filter matches, the message is ignored.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.FilterData">
            <summary>
            The kind of information used for filtering messages.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilterData.SingleId">
            <summary>
            The ID of a message is verified to be a specific one.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilterData.IdRange">
            <summary>
            The ID of a message is verified to be in a specific ID range [from, to].
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilterData.MaskAndCode">
            <summary>
            The ID of a message is verified to comply with a mask/code filter operation.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilterData.MessageType">
            <summary>
            The message is verified to be of a specific CAN type (see <see cref="T:Peak.Can.Basic.MessageType"/>).
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.FilteringState">
            <summary>
            State of verification of a message filter.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilteringState.PassForAll">
            <summary>
            Any message will be accepted.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilteringState.BlockForAll">
            <summary>
            Any message will be rejected.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.FilteringState.Inspect">
            <summary>
            Messages will be accepted or rejected as result of applying all 
            registered filtering criteria.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.MessageAvailableEventArgs">
            <summary>
            Represents the arguments for a <see cref="E:Peak.Can.Basic.Worker.MessageAvailable"/> event.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.MessageAvailableEventArgs.QueueIndex">
            <summary>
            Represents the index of the queue in which the message was stored.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.FilteringCriterion">
            <summary>
            Represents a criterion for filtering CAN messages.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.#ctor(Peak.Can.Basic.MessageType,Peak.Can.Basic.FilterBehavior)">
            <summary>
            Initializes a filtering criterion for checking the type of a CAN message.
            </summary>
            <param name="messageTypeFlags">A value indicating the allowed frame types.
            <note>
            The value <see cref="F:Peak.Can.Basic.MessageType.Standard"/> has to be specified alone as a
            <see cref="T:Peak.Can.Basic.FilteringCriterion"/> value, if standard messages are wanted to be discarded.</note></param>
            <param name="behavior">Indicates the operation to perform when a CAN message matches this criterion.</param>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.#ctor(System.UInt32,Peak.Can.Basic.FilterMode,Peak.Can.Basic.FilterBehavior)">
            <summary>
            Initializes a filtering criterion for a CAN messages using an specific identifier.
            </summary>
            <param name="singleId">A value indicating the allowed CAN identifier.</param>
            <param name="canMode">A value indicating the filter mode used for CAN identifier verification.</param>
            <param name="behavior">Indicates the operation to perform when a CAN message matches this criterion.</param>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.#ctor(System.UInt32,System.UInt32,Peak.Can.Basic.FilterMode,System.Boolean,Peak.Can.Basic.FilterBehavior)">
            <summary>
            Initializes a filtering criterion for accepting a range of CAN identifiers, or for matching a mask/code acceptance value filtering.
            </summary>
            <param name="fromIdOrMask">For <paramref name="isIdRange"/> equals to true, a value representing the message id used as the start of range.
            For <paramref name="isIdRange"/> equals to false, a value representing an acceptance mask.</param>
            <param name="toIdOrCode">For <paramref name="isIdRange"/> equals to true, a value representing the message id used as the end of range.
            For <paramref name="isIdRange"/> equals to false, a value representing an acceptance code.</param>
            <param name="canMode">A value indicating the filter mode used for CAN identifier verification.</param>
            <param name="isIdRange">A value indicating whether the parameters <paramref name="fromIdOrMask"/> and <paramref name="toIdOrCode"/> represent
            a range of CAN Identifiers, or acceptance mask and code values.</param>
            <param name="behavior">Indicates the operation to perform when a CAN message matches this criterion.</param>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.SetMessageType(Peak.Can.Basic.MessageType,Peak.Can.Basic.FilterBehavior)">
            <summary>
            Configures this instance to do a CAN message type filtering.
            </summary>
            <param name="typesFlag">A value indicating the allowed CAN message types.
            <note>
            The value <see cref="F:Peak.Can.Basic.MessageType.Standard"/> has to be specified alone as a
            <see cref="T:Peak.Can.Basic.FilteringCriterion"/> value, if standard messages are wanted to be discarded.</note></param>
            <param name="behavior">Indicates the operation to perform when a CAN message matches this criterion.</param>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.SetSingleId(System.UInt32,Peak.Can.Basic.FilterMode,Peak.Can.Basic.FilterBehavior)">
            <summary>
            Configures this instance to do single CAN identifier filtering.
            </summary>
            <param name="id">A value indicating the allowed CAN identifier.</param>
            <param name="mode">A value indicating the filter mode used for CAN identifier verification.</param>
            <param name="behavior">Indicates the operation to perform when a CAN message matches this criterion.</param>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.SetIdRange(System.UInt32,System.UInt32,Peak.Can.Basic.FilterMode,Peak.Can.Basic.FilterBehavior)">
            <summary>
            Configures this instance to do CAN identifier range filtering.
            </summary>
            <param name="from">A value representing the CAN identifier used as the start of range.</param>
            <param name="to">A value representing the CAN identifier used as the end of range.</param>
            <param name="mode">A value indicating the filter mode used for CAN identifier verification.</param>
            <param name="behavior">Indicates the operation to perform when a CAN message matches this criterion.</param>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.SetMaskAndCode(System.UInt32,System.UInt32,Peak.Can.Basic.FilterMode,Peak.Can.Basic.FilterBehavior)">
            <summary>
            Configures this instance for using a mask/code acceptance values filtering 
            </summary>
            <param name="mask">A value representing the acceptance mask</param>
            <param name="code">A value representing the acceptance code</param>
            <param name="mode">A value indicating the filter mode used for CAN identifier verification.</param>
            <param name="behavior">Indicates the operation to perform when a CAN message matches this criterion.</param>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.GetHashCode">
            <summary>
            Calculates the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.op_Equality(Peak.Can.Basic.FilteringCriterion,Peak.Can.Basic.FilteringCriterion)">
            <summary>
            Checks if two <see cref="T:Peak.Can.Basic.FilteringCriterion"/> instances  are equal.
            </summary>
            <param name="first">The first operator of type <see cref="T:Peak.Can.Basic.FilteringCriterion"/> to be compared.</param>
            <param name="second">The second operator of type <see cref="T:Peak.Can.Basic.FilteringCriterion"/> to be compared.</param>
            <returns>true if '<paramref name="first"/>' and '<paramref name="second"/>' are equal, false otherwise.</returns>
        </member>
        <member name="M:Peak.Can.Basic.FilteringCriterion.op_Inequality(Peak.Can.Basic.FilteringCriterion,Peak.Can.Basic.FilteringCriterion)">
            <summary>
            Checks if two <see cref="T:Peak.Can.Basic.FilteringCriterion"/> instances are not equal.
            </summary>
            <param name="first">The first operator of type <see cref="T:Peak.Can.Basic.FilteringCriterion"/> to be compared.</param>
            <param name="second">The second operator of type <see cref="T:Peak.Can.Basic.FilteringCriterion"/> to be compared.</param>
            <returns> true if '<paramref name="first"/>' and '<paramref name="second"/>' are not equal, false otherwise.</returns>
        </member>
        <member name="P:Peak.Can.Basic.FilteringCriterion.FromId">
            <summary>
            Indicates the begin of a message id range (<see cref="F:Peak.Can.Basic.FilterData.IdRange"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.FilteringCriterion.ToId">
            <summary>
            Indicates the end of a message id range (<see cref="F:Peak.Can.Basic.FilterData.IdRange"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.FilteringCriterion.AcceptanceMask">
            <summary>
            Indicates the value of the acceptance mask of an acceptance mask/code pair (<see cref="F:Peak.Can.Basic.FilterData.MaskAndCode"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.FilteringCriterion.AcceptanceCode">
            <summary>
            Indicates the value of the acceptance code of an acceptance mask/code pair (<see cref="F:Peak.Can.Basic.FilterData.MaskAndCode"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.FilteringCriterion.SingleId">
            <summary>
            Indicates a single CAN identifier (<see cref="F:Peak.Can.Basic.FilterData.SingleId"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.FilteringCriterion.FrameType">
            <summary>
            Indicates a CAN frame type flags value (<see cref="F:Peak.Can.Basic.FilterData.MessageType"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.FilteringCriterion.Mode">
            <summary>
            Indicates the type of CAN identifier used for verification (not used when 
            <see cref="P:Peak.Can.Basic.FilteringCriterion.Kind"/> equals <see cref="F:Peak.Can.Basic.FilterData.MessageType"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.FilteringCriterion.Kind">
            <summary>
            Indicates the CAN message related data used for filtering.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.FilteringCriterion.Behavior">
            <summary>
            Indicates the operation to perform when a CAN message matches this criterion.
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.ChannelReader">
            <summary>
            Class for event driven message fetching
            </summary>
            <exclude/>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.#ctor(Peak.Can.Basic.ChannelConnector,System.Boolean)">
            <summary>
            Initializes a PcanBasic object
            </summary>
            <param name="channel">Pcan connection used for CAN communication</param>
            <param name="openFilter">If true, the filter of the new created queue is set to pass all, otherwise to pass all</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.Finalize">
            <summary>
            Finalizes this object
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.Initialize">
            <summary>
            Establishes a connection to a Pcan channel, configures it for data
            transmission and start reading messages
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.Uninitialize">
            <summary>
            Disconnects the used channel and stops reading data
            </summary>        
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.OpenFilter(System.Int32,System.Boolean)">
            <summary>
            Opens the reception filter of a reception queue
            </summary>
            <param name="queueIndex">Index of the reception queue whose filter is to be modified</param>
            <param name="discardCurrentMessages">Whether current available messages in the queue are to be 
            deleted after opening the filter</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.CloseFilter(System.Int32,System.Boolean)">
            <summary>
            Closes the reception filter of a reception queue
            </summary>
            <param name="queueIndex">Index of the reception queue which filter is to be modified</param>
            <param name="discardCurrentMessages">Whether current available messages in the queue are to be 
            deleted after closing the filter</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.SetFilterStatus(Peak.Can.Basic.FilteringState,System.Boolean)">
            <summary>
            Configures the filtering status of the first reception queue (index 0)
            </summary>
            <param name="state">Filtering status to be set</param>
            <param name="discardCurrentMessages">If currently stored messages are to be discarded on status change</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.SetFilterStatus(System.Int32,Peak.Can.Basic.FilteringState,System.Boolean)">
            <summary>
            Configures the filtering status of the specified reception queue
            </summary>
            <param name="queueIndex">Index of the reception queue whose filter status is to be modified</param>
            <param name="state">Filtering status to be set</param>
            <param name="discardCurrentMessages">If currently stored messages are to be discarded on status change</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.AddFilter(Peak.Can.Basic.FilteringCriterion)">
            <summary>
            Adds an additional filter to the message inclusion checks of the first reception queue (index 0)
            </summary>
            <param name="filter">A <see cref="T:Peak.Can.Basic.FilteringCriterion"/> value representing a filter configuration</param>
            <returns>If the filter was successfully added or not</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.AddFilter(System.Int32,Peak.Can.Basic.FilteringCriterion)">
            <summary>
            Adds an additional filter to the message inclusion checks of a specified reception queue
            </summary>
            <param name="queueIndex">Index of the reception queue whose filter is to be modified</param>
            <param name="filter">A <see cref="T:Peak.Can.Basic.FilteringCriterion"/> value representing a filter configuration</param>
            <returns>If the filter was successfully added or not</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.RemoveFilter(Peak.Can.Basic.FilteringCriterion)">
            <summary>
            Removes a message filter from the first registered reception queue (index 0)
            </summary>
            <param name="filter">The filter item to be removed</param>
            <returns>true if the filter is successfully removed; otherwise, false</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.RemoveFilter(System.Int32,Peak.Can.Basic.FilteringCriterion)">
            <summary>
            Removes a message filter from the specified reception queue
            </summary>
            <param name="queueIndex">Index of the reception queue whose filter is to be removed</param>
            <param name="filter">The filter item to be removed</param>
            <returns>true if the filter is successfully removed; otherwise, false</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.ClearFilters(System.Int32,Peak.Can.Basic.FilterBehavior)">
            <summary>
            Removes all message filters from the specified reception queue, that match the given operation mode
            </summary>
            <param name="queueIndex">Index of the reception queue whose filters are to be removed</param>
            <param name="mode">Operation mode of the filter to be removed</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.ClearAllFilters(System.Int32)">
            <summary>
            Removes all message filters from the specified reception queue
            </summary>
            <param name="queueIndex">Index of the reception queue whose filters are to be removed</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.RemoveAllQueueFilters">
            <summary>
            Removes all message filters from all registered reception queues
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.GetFilters(System.Int32,Peak.Can.Basic.FilterBehavior)">
            <summary>
            Retrieves the current configured filters of a specific reception queue
            </summary>
            <param name="queueIndex">Index of the reception queue whose filters are to be retrieved</param>
            <param name="operationMode">Indicates the operation mode of the filters to be retrieved</param>
            <returns>An array containing all registered filters of the specified queue meeting the given operation mode</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.CreateReceptionQueue(System.Int32@,System.Boolean)">
            <summary>
            Creates an additional reception queue
            </summary>
            <param name="index">Buffer for a 0 based index of the new created queue</param>
            <param name="openFilter">If true, the filter of the new created queue is set to pass all, otherwise to discard all</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.DeleteReceptionQueue(System.Int32)">
            <summary>
            Removes a reception queue
            </summary>
            <param name="queueIndex">Index of the reception queue to delete</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.DeleteAllQueues">
            <summary>
            Removes all reception queues
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.ClearReceptionQueue(System.Int32)">
            <summary>
            Discards all available messages from the given reception queue
            </summary>
            <param name="queueIndex">Index of the reception queue whose messages are to be discarded</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.ClearReceptionQueues">
            <summary>
            Discards all available messages from all registered reception queues
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.Dequeue(Peak.Can.Basic.PcanMessage@,System.UInt64@)">
            <summary>
            Removes and returns a received messages and its timestamp 
            from the first reception queue (index 0)
            </summary>
            <param name="msg">The CAN message as a <see cref="T:Peak.Can.Basic.PcanMessage"/> object</param>
            <param name="time">The timestamp of the message, in microseconds</param>
            <returns>If a message was dequeued, false otherwise</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.Dequeue(System.Int32,Peak.Can.Basic.PcanMessage@,System.UInt64@)">
            <summary>
            Removes and returns a received messages and its timestamp 
            from a reception queue
            </summary>
            <param name="queueIndex">Index of the queue from which the message should be taken</param>
            <param name="msg">The CAN message as a <see cref="T:Peak.Can.Basic.PcanMessage"/> object</param>
            <param name="time">The timestamp of the message, in microseconds</param>        
            <returns>If a message was dequeued, false otherwise</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.GetAvailableMessagesCount(System.Int32)">
            <summary>
            Retrieves the amount of available messages currently contained by the specified reception queue
            </summary>
            <param name="queueIndex">Index of the queue from which the amount of available messages should be retrieved</param>
            <returns>The amount of messages currently contained in the reception queue</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelReader.GetTotalAvailableMessagesCount">
            <summary>
            Retrieves the total amount of messages currently contained by this object
            </summary>
            <returns>The total amount of messages contained in all registered reception queues</returns>
        </member>
        <member name="P:Peak.Can.Basic.ChannelReader.Active">
            <summary>
            Activates or deactivate the CAN messaging read process
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelReader.ResetQueuesOnDeactivation">
            <summary>
            Get or sets a value indicating whether the messages in the available reception queues should 
            be discarded on read deactivation
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelReader.ResetFiltersOnDeactivation">
            <summary>
            Get or sets a value indicating whether the registered message filter for the available reception
            queues should be removed on read deactivation
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelReader.TotalAvailableMessages">
            <summary>
            Retrieves the total amount of messages currently contained by this object
            </summary>
        </member>
        <member name="E:Peak.Can.Basic.ChannelReader.MessageAvailable">
            <summary>
            Occurs when a message is received, validated and placed in a reception queue. 
            NOTE: The event is fired from a background thread
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.Broadcast">
            <summary>
            Represents a CAN message that is written periodically.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.Broadcast.#ctor(Peak.Can.Basic.PcanMessage,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Peak.Can.Basic.Broadcast"/> object.
            </summary>
            
            <remarks>
            <para>After creating a <see cref="T:Peak.Can.Basic.Broadcast"/> object, it must be registered using the <see cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.Broadcast@)" autoUpgrade="true"/> method.
            Unregistered objects can be recognized by checking their index. An unregistered <see cref="T:Peak.Can.Basic.Broadcast"/> object has -1 (0xFFFFFFFF) as index value. </para>
            <para>The registration process assign an object a valid index in the broadcast list, trigger it for the first time, and starts its interval timer.</para>
            <note>
            After a <see cref="T:Peak.Can.Basic.Broadcast"/> object is registered, any change made to it is applied directly, this means, changes made to the <see cref="P:Peak.Can.Basic.Broadcast.Interval"/> or the 
            <see cref="P:Peak.Can.Basic.Broadcast.Message"/> (the whole message or part of it), will be reflected when the next interval expires.
            </note>
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter value is null. An object of type <see cref="T:Peak.Can.Basic.PcanMessage"/> is required.</exception>
            
            <param name="message">Represents the CAN message to be written when the given <paramref name="interval"/> expires.</param>
            <param name="interval">Represents the interval used to write the <paramref name="message"/> periodically.</param>
        </member>
        <member name="M:Peak.Can.Basic.Broadcast.ResetCounter">
            <summary>
            Sets the counter of transmitted messages to 0. 
            </summary>
            <remarks>
            Each time the message associated to a <see cref="T:Peak.Can.Basic.Broadcast"/> object is sent, causes its <see cref="P:Peak.Can.Basic.Broadcast.Counter"/> to be incremented in 1. 
            <note>
            A message is considered "sent", when it is successfully enqueued for transmission by calling the native method <see cref="M:Peak.Can.Basic.Api.Write(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage)" autoUpgrade="true"/>. 
            This includes cases where writing a message ends with a bus error, excepting the <see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/> error.
            </note>
            </remarks>
        </member>
        <member name="M:Peak.Can.Basic.Broadcast.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:Peak.Can.Basic.Broadcast.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Peak.Can.Basic.Broadcast.op_Equality(Peak.Can.Basic.Broadcast,Peak.Can.Basic.Broadcast)">
            <summary>
            Checks if two <see cref="T:Peak.Can.Basic.Broadcast"/> instances  are equal.
            </summary>
            <param name="first">The first operator of type <see cref="T:Peak.Can.Basic.Broadcast"/> to be compared.</param>
            <param name="second">The second operator of type <see cref="T:Peak.Can.Basic.Broadcast"/> to be compared.</param>
            <returns>true if '<paramref name="first"/>' and '<paramref name="second"/>' are equal; otherwise, false.</returns>
        </member>
        <member name="M:Peak.Can.Basic.Broadcast.op_Inequality(Peak.Can.Basic.Broadcast,Peak.Can.Basic.Broadcast)">
            <summary>
            Checks if two <see cref="T:Peak.Can.Basic.Broadcast"/> instances are not equal.
            </summary>
            <param name="first">The first operator of type <see cref="T:Peak.Can.Basic.Broadcast"/> to be compared.</param>
            <param name="second">The second operator of type <see cref="T:Peak.Can.Basic.Broadcast"/> to be compared.</param>
            <returns> true if '<paramref name="first"/>' and '<paramref name="second"/>' are not equal; otherwise, false.</returns>
        </member>
        <member name="P:Peak.Can.Basic.Broadcast.Active">
            <summary>
            Gets a value indicating if the CAN message associated to this object is currently 
            being transmitted or not.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Broadcast.Message">
            <summary>
            Gets or sets the CAN message to be written when the <see cref="P:Peak.Can.Basic.Broadcast.Interval"/> expires.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Broadcast.Interval">
            <summary>
            Gets or sets the interval used to write the <see cref="P:Peak.Can.Basic.Broadcast.Message"/> periodically.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Broadcast.Index">
            <summary>
            Gets the position of this object within the periodic sending table.
            <note>A value of -1 (0xFFFFFFFF) indicates, that this object is not registered.</note>
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Broadcast.Counter">
            <summary>
            Gets a value that indicates the number of times the configured <see cref="P:Peak.Can.Basic.Broadcast.Message"/> has been sent.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.ChannelWriter.#ctor(Peak.Can.Basic.ChannelConnector,System.Int32)">
            <summary>
            Initializes a PcanBasic object
            </summary>
            <param name="channel">Pcan connection used for CAN communication</param>
            <param name="maximumEntries">Maximum amount of broadcast messages that can be handle by this object</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelWriter.Finalize">
            <summary>
            Finalizes this object
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.NamespaceDoc">
            <summary>
            The namespace <c>Peak.Can.Basic</c> contains different data types that grant access to the  <b>PCAN-Basic library</b> to do CAN communication 
            using plug and play devices from <b>PEAK-System</b>.
            </summary>    
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.#ctor(Peak.Can.Basic.OutputLanguage)">
            <summary>
            Initializes a PcanBasic object with its default values
            </summary>
            <param name="exceptionLanguage">Specifies the language used for exception texts formatting.</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.#ctor(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate,Peak.Can.Basic.OutputLanguage)">
            <summary>
            Initializes a PcanBasic object
            </summary>
            <param name="channel">PCAN Channel to use for the CAN communication</param>
            <param name="bitrate">Classic CAN 2.0A/B bit rate used for data transmissions</param>
            <param name="exceptionLanguage">Specifies the language used for exception texts formatting.</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.#ctor(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD,Peak.Can.Basic.OutputLanguage)">
            <summary>
            Initializes a PcanBasic object.
            </summary>
            <param name="channel">PCAN Channel to use for the CAN communication</param>
            <param name="bitrate">CAN FD bit rate used for data transmission</param>
            <param name="exceptionLanguage">Specifies the language used for exception texts formatting.</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Peak.Can.Basic.ChannelConnector"/> class.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.Finalize">
            <summary>
            Finalizes this object
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.TryConnect(Peak.Can.Basic.PcanBasicException@,System.Boolean)">
            <summary>
            Tries to establishes a connection to a PCAN Channel, configures it for data
            transmission and start reading messages
            </summary>
            <param name="error">In case of failure, the exception generated when trying to connect</param>
            <param name="ignoreBitrateCheck">If the connection should still occur, even if the channel 
            is already initialized with a different bit rate (FD) as the specified</param>
            <returns>If the connection was established or not</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.Connect(System.Boolean)">
            <summary>
            Establishes a connection to a PCAN Channel, configures it for data
            transmission and start reading messages
            </summary>
            <param name="ignoreBitrateCheck">If the connection should still occur, even if the channel 
            is already initialized with a different bit rate (FD) as the specified</param>
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.Disconnect">
            <summary>
            Disconnects the used channel and stops reading data
            </summary>        
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.Reset">
            <summary>
            Performs a hardware reset on the connected PCAN Channel
            </summary>
            <returns>A <see cref="T:Peak.Can.Basic.PcanStatus"/> value as result of the reset operation</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.ReadFrame(Peak.Can.Basic.PcanMessage@,System.UInt64@)">
            <summary>
            Reads a CAN message from the used channel according to the configured protocol
            </summary>
            <param name="frame">CAN Message read</param>
            <param name="time">Time at which the message was received</param>
            <returns>A <see cref="T:Peak.Can.Basic.PcanStatus"/> value as result of the read operation</returns>
        </member>
        <member name="M:Peak.Can.Basic.ChannelConnector.WriteFrame(Peak.Can.Basic.PcanMessage)">
            <summary>
            Sends a CAN message to the used channel according to the configured protocol
            </summary>
            <param name="frame">CAN message to be sent</param>
            <returns>A <see cref="T:Peak.Can.Basic.PcanStatus"/> value as result of the write operation</returns>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.Disposed">
            <summary>
            Gets a value indicating whether this object has been disposed
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.ExceptionLanguage">
            <summary>
            Specifies the language used for exception texts formatting.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.Active">
            <summary>
            Activates or deactivate the CAN connection
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.HardwareReceiveEvent">
            <summary>
            Auto reset event triggered when the device driver receives and enqueues a new message
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.TransmissionProtocol">
            <summary>
            Gets or sets the communication mode for this connection
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.Channel">
            <summary>
            Gets or set the PCAN Channel used for CAN communication
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.BitrateCan">
            <summary>
            Gets or sets the bit rate used for classic CAN 2.0A/B data transmission (bit rate register values)
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.BitrateCanFd">
            <summary>
            Gets or sets the bit rate used for CAN FD data transmission (bit rate parameters)
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.ListenOnly">
            <summary>
            When disconnected, gets or sets the default status for the listen-only CAN feature
            When connected, gets or sets the current status of the listen-only CAN feature        
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.AllowStatusFrames">
            <summary>
            When disconnected, gets or sets the default status of receiving status frames
            When connected, gets or sets the current status of receiving status frames
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.AllowRemoteRequestFrames">
            <summary>
            When disconnected, gets or sets the default status of receiving remote request frames
            When connected, gets or sets the current status of receiving remote request frames
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.AllowErrorFrames">
            <summary>
            When disconnected, gets or sets the default status of receiving error frames
            When connected, gets or sets the current status of receiving error frames
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.AllowEchoFrames">
            <summary>
            When disconnected, gets or sets the default status of receiving echo frames
            When connected, gets or sets the current status of receiving echo frames
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.ChannelConnector.AllowHardwareReset">
            <summary>
            When disconnected, gets or sets the default status of performing a hardware reset
            When connected, gets or sets the current status of performing a hardware reset
            </summary>
        </member>
        <member name="T:Peak.Can.Basic.Worker">
             <summary>
             <para>PCAN <see cref="T:Peak.Can.Basic.Worker"/> class implementation.</para>
             <para><see cref="T:Peak.Can.Basic.Worker"/> makes use of the <see cref="T:Peak.Can.Basic.Api"/> class to allows reading and writing from and 
             to a PCAN Channel in an automatic way, using timers and events. It allows a more accurate filtering system that the native one, 
             and the use of multiple receive queues with separate filter configuration.</para>
             <para>If direct access to the PCAN-Basic interface is desired, use the <see cref="T:Peak.Can.Basic.Api"/> class instead.</para>
             </summary>
             
             <remarks>
             <para/>
             <para><u>About reading:</u></para>
             <para>The <see cref="T:Peak.Can.Basic.Worker"/> object does have <see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount">multiple</see> receive queues. Only one of those receive queues is active by 
             default when the object is created, and its filter is configured to receive any message. The remaining receive queues keep their filters closed.</para>
             <para>The reading process is executed in an additional thread, making use of the event notification mechanism to fetch CAN messages. Fetched messages can be dequeued 
             for their further processing using the <see cref="M:Peak.Can.Basic.Worker.Dequeue(Peak.Can.Basic.PcanMessage@,System.UInt64@)" autoUpgrade="true"/> method. If needed, messages stored in one or all receive 
             queues may be discarded using the methods <see cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> respectively. 
             </para>
            
             <para>Each receive queue has its own message filter. This message filter can be configured using several filtering criteria, in form of <see cref="T:Peak.Can.Basic.FilteringCriterion"/> data, 
             by using the <see cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> method. The message filtering in a receive queue can also be temporarily disabled/enabled at any 
             time by using the <see cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/> method. A specific filtering criterion, or all of them, can be removed using the 
             methods <see cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.Worker.ClearFilters(System.Int32)" autoUpgrade="true"/> respectively.</para>
            
             <para/>
             <para><u>About writing:</u></para>
             <para>There are two approaches for sending messages to the connected CAN network:</para>
             <list type="number">
             <item>Using the <see cref="M:Peak.Can.Basic.Worker.Transmit(Peak.Can.Basic.PcanMessage)" autoUpgrade="true"/> method, which places a CAN message in the connected Channel's transmit queue for immediate sending.</item>
             <item>
             <para>Using a <see cref="T:Peak.Can.Basic.Broadcast"/> message, which periodically places a configured CAN message in the connected Channel's transmit queue for immediate sending.</para>
             </item>
             </list>    
             <para>New <see cref="T:Peak.Can.Basic.Broadcast"/> items can be registered using the <see cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/> method. The processing of current registered <see cref="T:Peak.Can.Basic.Broadcast"/> items
             can be stopped and resumed again using their <see cref="P:Peak.Can.Basic.Broadcast.Active"/> property, or the methods <see cref="M:Peak.Can.Basic.Worker.PauseBroadcast(System.Int32)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.Worker.ResumeBroadcast(System.Int32)" autoUpgrade="true"/> respectively.
             A specific <see cref="T:Peak.Can.Basic.Broadcast"/> item, or all of them, can be removed using the methods <see cref="M:Peak.Can.Basic.Worker.RemoveBroacast(System.Int32)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.Worker.ClearBroadcasts" autoUpgrade="true"/> respectively.</para>
             </remarks>
        </member>
        <member name="F:Peak.Can.Basic.Worker.ReceiveQueuesCount">
            <summary>
            Indicates the amount of receive queues available to use.
            </summary>
        </member>
        <member name="F:Peak.Can.Basic.Worker.MaximumBroadcastCount">
            <summary>
            Indicates the maximum amount of periodic messages that can be handled.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.Worker.#ctor">
            <summary>
             Initializes a PCAN-Basic <see cref="T:Peak.Can.Basic.Worker"/> object with its default values.
            </summary>    
            
            <remarks>
            <para>As default, the <see cref="T:Peak.Can.Basic.Worker"/> is configured to use the first connected PCAN USB interface, using classic CAN as protocol, and 500 kBit/s as bit rate.</para>
            <para>A single receive queue is used, which is full open at connection time.</para>
            <note>
            A <see cref="T:Peak.Can.Basic.Worker"/> object can handle up to '<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>' receive queues. Incoming messages are processed by all queues, so that the 
            same message can be found in more than one queue, if its filter is configured to accept the message.
            <para>Only one receive queue is active by default when the object is created, and its filter is configured to receive any message.</para>
            </note>
            </remarks>
            
            <example>
                <para>
                The following example shows the initialization of a <see cref="T:Peak.Can.Basic.Worker"/> instance, using its default constructor. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.Constructor" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.Constructor" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.Constructor" language="cpp"/>
            </example>
            
        </member>
        <member name="M:Peak.Can.Basic.Worker.#ctor(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate,System.Boolean)">
            <summary>
            Initializes a PCAN-Basic <see cref="T:Peak.Can.Basic.Worker"/> object.
            </summary>
            
            <remarks>
            <note>
            A <see cref="T:Peak.Can.Basic.Worker"/> object can handle up to '<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>' receive queues. Incoming messages are processed by all queues, so that the 
            same message can be found in more than one queue, if its filter is con figured to accept the message.
            <para>Only one receive queue is active by default when the object is created, and its filter is configured to receive any message.</para>
            </note>
            </remarks>
            
            <param name="canChannel">The handle of a PCAN Channel to use for CAN communication.</param>
            <param name="bitrate">The speed for the classic CAN 2.0A/B communication as a BTR0/BTR1 code. Default is 500 kBit/s (<see cref="F:Peak.Can.Basic.Bitrate.Pcan500"/>).</param>
            <param name="closedFilter">When true, the filter of the first receive queue is set to discard all. Otherwise, any message will be received.</param>
            
            <example>
                <para>
                The following example shows the initialization of a <see cref="T:Peak.Can.Basic.Worker"/> instance, using as bit rate 250 kBit/s on the first PCAN-PCI Channel. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.ConstructorCan" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.ConstructorCan" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.ConstructorCan" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.Worker.#ctor(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD,System.Boolean)">
            <summary>
            Initializes a PCAN-Basic <see cref="T:Peak.Can.Basic.Worker"/> object.
            </summary>
            
            <remarks>
            <note>
            A <see cref="T:Peak.Can.Basic.Worker"/> object can handle up to '<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>' receive queues. Incoming messages are processed by all queues, so that the 
            same message can be found in more than one queue, if its filter is con figured to accept the message.
            <para>Only one receive queue is active by default when the object is created, and its filter is configured to receive any message.</para>
            </note>
            </remarks>
            
            <param name="canChannel">The handle of a PCAN Channel to use for CAN communication.</param>
            <param name="bitrate">The speed for the communication as a CAN FD bit rate object (see <see cref="T:Peak.Can.Basic.BitrateFD"/>). Default is 500 kBit/s / 2 MBit/s (<see cref="F:Peak.Can.Basic.BitrateFD.BitrateSaeJ2284_4"/>).</param>
            <param name="closedFilter">When true, the filter of the first receive queue is set to discard all. Otherwise, any message will be received.</param>
            
            <example>
                <para>
                The following example shows the initialization of a <see cref="T:Peak.Can.Basic.Worker"/> instance, using <see cref="F:Peak.Can.Basic.BitrateFD.BitrateSaeJ2284_5">500 kBit/s / 5 MBit/s</see> on the first PCAN-PCI Channel. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.ConstructorCanFD" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.ConstructorCanFD" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.ConstructorCanFD" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.Worker.Finalize">
            <summary>
            Finalizes this object.
            </summary>
            <seealso cref="M:Peak.Can.Basic.Worker.#ctor" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.Start(System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             Establishes a connection to a PCAN Channel, configures it for data transmission and starts the read/write processes.
             </summary>
             
             <remarks>
             <para><u>About reading:</u></para>
             <para>A <see cref="T:Peak.Can.Basic.Worker"/> object can handle multiple receive queues. Only one receive queue is active by default when the object is created, and 
             its filter is configured to receive any message.</para>        
             <para>The reading process is executed in an additional thread, making use of the event notification mechanism to fetch CAN messages. Fetched messages can be dequeued 
             for their further processing using the <see cref="M:Peak.Can.Basic.Worker.Dequeue(Peak.Can.Basic.PcanMessage@,System.UInt64@)" autoUpgrade="true"/> method. If needed, messages stored in one or all receive 
             queues may be discarded using the methods <see cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> respectively. 
             </para>
            
             <para>Each receive queue has its own message filter. This message filter can be configured using several filtering criteria, in form of <see cref="T:Peak.Can.Basic.FilteringCriterion"/> data, by using the 
             <see cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> method. The message filtering in a receive queue can also be temporarily disabled/enabled at any time by 
             using the <see cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/> method. A specific filtering criterion, or all of them, can be removed using the methods
             <see cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.Worker.ClearFilters(System.Int32)" autoUpgrade="true"/> respectively.</para>
            
             <para/>
             <para><u>About writing:</u></para>
             <para>There are two approaches for sending messages to the connected CAN network:</para>
             <list type="number">
             <item>Using the <see cref="M:Peak.Can.Basic.Worker.Transmit(Peak.Can.Basic.PcanMessage)" autoUpgrade="true"/> method, which places a CAN message in the connected Channel's transmit queue for immediate sending.</item>
             <item>
             <para>Using a <see cref="T:Peak.Can.Basic.Broadcast"/> message, which periodically places a configured CAN message in the connected Channel's transmit queue for immediate sending.</para>
             </item>
             </list>    
             <para>New <see cref="T:Peak.Can.Basic.Broadcast"/> items can be configured using the <see cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/> method. The processing of current registered <see cref="T:Peak.Can.Basic.Broadcast"/> items
             can be stopped and resumed again using the methods <see cref="M:Peak.Can.Basic.Worker.PauseBroadcast(System.Int32)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.Worker.ResumeBroadcast(System.Int32)" autoUpgrade="true"/> respectively.
             A specific <see cref="T:Peak.Can.Basic.Broadcast"/> item, or all of them, can be removed using the methods <see cref="M:Peak.Can.Basic.Worker.RemoveBroacast(System.Int32)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.Worker.ClearBroadcasts" autoUpgrade="true"/> respectively.</para>
             </remarks>
             
             <param name="ignoreBitrateCheck">If the connection should still occur, even if the PCAN channel 
             is already initialized with a different bit rate (FD) as the specified.</param>
             <param name="deactivateReading">If message fetching should be deactivated on connection. After connection, 
             the status of message fetching can be controlled by using the property <see cref="P:Peak.Can.Basic.Worker.MessageFetching"/>.</param>
             <param name="deactivateBroadcasting">If message broadcasting should be deactivated on connection. After connection, 
             the status of message broadcasting can be controlled by using the property <see cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/>.</param>
             
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related operation ended with an unexpected result.</exception>
             
             <example>
                 <para>
                 The following example shows the activation and deactivation of a <see cref="T:Peak.Can.Basic.Worker"/> object. 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.StartStop" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.StartStop" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.StartStop" language="cpp"/>
             </example>   
             
             <seealso cref="M:Peak.Can.Basic.Worker.Transmit(Peak.Can.Basic.PcanMessage)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.Dequeue(System.Int32,Peak.Can.Basic.PcanMessage@,System.UInt64@)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             Disconnects the used PCAN Channel and stops reading and writing data.
             </summary>     
             
             <param name="clearQueues">Indicates if any remaining message within any receive queue should be discarded.</param>
             <param name="clearBroatcasts">Indicates if defined <see cref="T:Peak.Can.Basic.Broadcast"/> objects should be removed.</param>        
             <param name="resetQueueFilters">Indicates if defined filtering criteria within the message filter of any receive queue should be removed.</param>
             
             <example>
                 <para>
                 The following example shows the activation and deactivation of a <see cref="T:Peak.Can.Basic.Worker"/> object. 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.StartStop" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.StartStop" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.StartStop" language="cpp"/>
             </example> 
            
             <seealso cref="M:Peak.Can.Basic.Worker.Start(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.ResetHardware">
            <summary>
            Performs a reset of the CAN controller on the hardware connected by the <see cref="T:Peak.Can.Basic.Worker"/> object. 
            </summary>
            
            <remarks>
            <para>Performing a hardware reset will cause the CAN controller to go bus off for a while. This can momentarily disrupt CAN communication and  
            affect other clients connected to the same hardware, generating error frames from other nodes and preventing messages from being sent/received.</para>
            <para>Resetting the hardware does not discard messages that have already been read by the <see cref="T:Peak.Can.Basic.Worker"/> object. If it is desired to discard the received messages,
            the <see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> method should also be called.</para>
            </remarks>
            
            <returns>true if the <see cref="T:Peak.Can.Basic.Worker"/> object could perform a hardware reset; false otherwise.</returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered 
            when a device driver is not installed or is not up to date.</exception>
            
            <example>
                <para>
                The following example shows how to perform a hardware reset on a PCAN channel connected by a <see cref="T:Peak.Can.Basic.Worker"/> object. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.ResetHardware" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.ResetHardware" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.ResetHardware" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.Start(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.ResetHardware(Peak.Can.Basic.PcanStatus@)">
            <summary>
            Performs a reset of the CAN controller on the hardware connected by the <see cref="T:Peak.Can.Basic.Worker"/> object. 
            </summary>
            
            <remarks>
            <para>Performing a hardware reset will cause the CAN controller to go bus off for a while. This can momentarily disrupt CAN communication and  
            affect other clients connected to the same hardware, generating error frames from other nodes and preventing messages from being sent/received.</para>
            <para>Resetting the hardware does not discard messages that have already been read by the <see cref="T:Peak.Can.Basic.Worker"/> object. If it is desired to discard the received messages,
            the <see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> method should also be called.</para>
            </remarks>
            
            <param name = "error">In case of failure, the <see cref="T:Peak.Can.Basic.PcanStatus"/> error code resulting when trying to reset the hardware.</param>
            
            <returns>true if the <see cref="T:Peak.Can.Basic.Worker"/> object could perform a hardware reset; false otherwise.</returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered 
            when a device driver is not installed or is not up to date.</exception>
            
            <example>
                <para>
                The following example shows how to perform a hardware reset on a PCAN channel connected by a <see cref="T:Peak.Can.Basic.Worker"/> object. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.ResetHardware" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.ResetHardware" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.ResetHardware" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.Start(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)">
            <summary>
            Configures the behavior of the message filter for the default receive queue (index 0).
            </summary>
            
            <remarks>
            The <see cref="T:Peak.Can.Basic.Worker"/> registers '<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>' receive queues. These are zero-based indexed. The first queue (index 0)
            is open by default when the object is created, meaning, its message filter is set to <see cref="F:Peak.Can.Basic.FilteringState.PassForAll"/>. All other 
            queues remain closed, that is, their filters are configured as <see cref="F:Peak.Can.Basic.FilteringState.BlockForAll"/>.
            The methods associated with a receive queue are overloaded, allowing either the direct use of the default queue (index 0) without 
            specifying an index, or the use of a specific queue by passing an index.
            </remarks>
            
            <param name="state">Indicates the desired filtering behavior for the default receive queue (index 0).</param>
            <param name="discardCurrentMessages">Indicates if messages currently contained by the default receive queue (index 0) are to be discarded on status change.</param>
            
            <example>
                <para>
                The following example shows how to deactivate the default receive queue, after creating a <see cref="T:Peak.Can.Basic.Worker"/> object. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.SetFilterStatus" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.SetFilterStatus" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.SetFilterStatus" language="cpp"/>
            </example>   
            
            <seealso cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.Dequeue(System.Int32,Peak.Can.Basic.PcanMessage@,System.UInt64@)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.SetFilteringState(System.Int32,Peak.Can.Basic.FilteringState,System.Boolean)">
            <summary>
            Configures the behavior of the message filter for a specific receive queue.
            </summary>
            
            <remarks>
            The <see cref="T:Peak.Can.Basic.Worker"/> registers '<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>' receive queues. These are 0-indexed. The first queue (index 0)
            is open by default when the object is created, meaning, its message filter is set to <see cref="F:Peak.Can.Basic.FilteringState.PassForAll"/>. All other 
            queues remain closed, that is, their filters are configured as <see cref="F:Peak.Can.Basic.FilteringState.BlockForAll"/>.
            The methods associated with a receive queue are overloaded, allowing either the direct use of the default queue (index 0) without 
            specifying an index, or the use of a specific queue by passing an index.
            </remarks>
            
            <param name="queueIndex">Zero-based index that identifies the receive queue to be configured.</param>
            <param name="state">Indicates the desired filtering behavior for a receive queue.</param>
            <param name="discardCurrentMessages">Indicates if messages currently contained by the receive queue are to be discarded on status change.</param>
            
            <exception cref="T:System.IndexOutOfRangeException">The <paramref name="queueIndex"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>-1].</exception>
            
            <example>
                <para>
                The following example shows how to activate a second queue, after creating a <see cref="T:Peak.Can.Basic.Worker"/> object. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.SetFilterStatus" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.SetFilterStatus" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.SetFilterStatus" language="cpp"/>
            </example>   
            
            <seealso cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.Dequeue(System.Int32,Peak.Can.Basic.PcanMessage@,System.UInt64@)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)">
             <summary>
             Includes an additional filtering criterion to the message filter of the default receive queue (index 0).
             </summary>
             
             <remarks>
             <para>The <see cref="T:Peak.Can.Basic.Worker"/> registers '<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>' receive queues. These are 0-indexed. The first queue (index 0)
             is open by default when the object is created, meaning, its message filter is set to <see cref="F:Peak.Can.Basic.FilteringState.PassForAll"/>. All other 
             queues remain closed, that is, their filters are configured as <see cref="F:Peak.Can.Basic.FilteringState.BlockForAll"/>.
             The methods associated with a receive queue are overloaded, allowing either the direct use of the default queue (index 0) without 
             specifying an index, or the use of a specific queue by passing an index.</para>
             <para>
             To allow a message filter to apply filtering criteria, the status of it must be <see cref="F:Peak.Can.Basic.FilteringState.Inspect"/>. 
             </para>
             <para>
             Duplicate filter criteria are not allowed. Attempting to include an item that already exists causes this method to fail.
             </para>
             <note type="important">
             Each time a filtering criterion is added using <see cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> the
             state of the message filter of the associated receive queue is automatically set to <see cref="F:Peak.Can.Basic.FilteringState.Inspect"/>.
             </note>
             <note>
             Filtering criteria with <see cref="P:Peak.Can.Basic.FilteringCriterion.Behavior"/> equals to <see cref="F:Peak.Can.Basic.FilterBehavior.Exclude"/> are validated
             first. If there is no match, those with <see cref="P:Peak.Can.Basic.FilteringCriterion.Behavior"/> equals to <see cref="F:Peak.Can.Basic.FilterBehavior.Include"/> are 
             validated. The criteria are validated in the same order as they were registered, the oldest registered criterion is validated first, 
             the newest one is validated last. 
             </note>
             <note type="important">
             If only exclusive filter criteria are used, messages that do not match any of them will be accepted and placed in the receive queue.
             </note>
             </remarks>
             
             <param name="filter">A <see cref="T:Peak.Can.Basic.FilteringCriterion"/> value representing a filter criterion.</param>
             
             <returns>
             A value indicating whether the filtering criterion was successfully added or not.
             </returns>
            
             <example>
                 <para>
                 The following example shows how to configure the message filter of the default receive queue to avoid receiving messages
                 with extended IDs 0x00000010, 0x00000011, and 0x00000012.  
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.AddFilter" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.AddFilter" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.AddFilter" language="cpp"/>
             </example>  
             
             <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.GetFilters(System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.AddFilter(System.Int32,Peak.Can.Basic.FilteringCriterion)">
             <summary>
             Configures an additional filtering criterion to the message filter of a receive queue.
             </summary>
             
             <remarks>
             <para>The <see cref="T:Peak.Can.Basic.Worker"/> registers '<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>' receive queues. These are 0-indexed. The first queue (index 0)
             is open by default when the object is created, meaning, its message filter is set to <see cref="F:Peak.Can.Basic.FilteringState.PassForAll"/>. All other 
             queues remain closed, that is, their filters are configured as <see cref="F:Peak.Can.Basic.FilteringState.BlockForAll"/>.
             The methods associated with a receive queue are overloaded, allowing either the direct use of the default queue (index 0) without 
             specifying an index, or the use of a specific queue by passing an index.</para>
             <para>
             To allow a message filter to apply filtering criteria, the status of it must be <see cref="F:Peak.Can.Basic.FilteringState.Inspect"/>. 
             </para>
             <para>
             Duplicate filter criteria are not allowed. Attempting to include an item that already exists causes this method to fail.
             </para>
             <note type="important">
             Each time a filtering criterion is added using <see cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> the
             state of the message filter of the associated receive queue is automatically set to <see cref="F:Peak.Can.Basic.FilteringState.Inspect"/>.
             </note>
             <note>
             Filtering criteria with <see cref="P:Peak.Can.Basic.FilteringCriterion.Behavior"/> equals to <see cref="F:Peak.Can.Basic.FilterBehavior.Exclude"/> are validated
             first. If there is no match, those with <see cref="P:Peak.Can.Basic.FilteringCriterion.Behavior"/> equals to <see cref="F:Peak.Can.Basic.FilterBehavior.Include"/> are 
             validated. The criteria are validated in the same order as they were registered, the oldest registered criterion is validated first, 
             the newest one is validated last. 
             </note>
             <note type="important">
             If only exclusive filter criteria are used, messages that do not match any of them will be accepted and placed in the receive queue..
             </note>
             </remarks>
             
             <param name="queueIndex">Zero-based index that identifies the receive queue to be configured.</param>
             <param name="filter">A <see cref="T:Peak.Can.Basic.FilteringCriterion"/> value representing a filter criterion.</param>
             
             <returns>
             A value indicating whether the filtering criterion was successfully added or not.
             </returns>
             
             <exception cref="T:System.IndexOutOfRangeException">The <paramref name="queueIndex"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>-1].</exception>
            
             <example>
                 <para>
                 The following example shows how to configure the message filter of the second receive queue to avoid receiving messages
                 with extended IDs 0x00000010, 0x00000011, and 0x00000012.  
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.AddFilterIndex" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.AddFilterIndex" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.AddFilterIndex" language="cpp"/>
             </example>  
             
             <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.GetFilters(System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.GetFilters">
             <summary>
             Retrieves the current configured filtering criteria for the default receive queue (index 0).
             </summary>
             
             <remarks>
             The <see cref="T:Peak.Can.Basic.FilteringCriterion"/> returned by this methods cannot be modified. If it is desired to change
             any already registered filter criterion, it has to be removed first using the <see cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> method
             and added again using the <see cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> method. 
             </remarks>
             
             <returns>An array containing all registered filtering criteria.</returns>
            
             <example>
                 <para>
                 The following example shows how to configure the message filter of the default receive queue (index 0) to receive only echo
                 messages with extended ID 0x15. After this, the filtering criteria are read and sent to the console output. 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.GetFilters" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.GetFilters" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.GetFilters" language="cpp"/>
             </example>  
             
             <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Worker.GetFilters(System.Int32)">
            <summary>
            Retrieves the current configured filtering criteria of a specific receive queue.
            </summary>
            
            <remarks>
            The <see cref="T:Peak.Can.Basic.FilteringCriterion"/> returned by this methods cannot be modified. If it is desired to change
            any already registered filter criterion, it has to be removed first using the <see cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> method
            and added again using the <see cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/> method. 
            </remarks>
            
            <param name="queueIndex">Zero-based index that identifies the receive queue whose filters criteria are to be retrieved.</param>
            
            <returns>An array containing all registered filtering criteria.</returns>
            
            <exception cref="T:System.IndexOutOfRangeException">The <paramref name="queueIndex"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>-1].</exception>
            
            <example>
                <para>
                The following example shows how to configure the message filter of the second receive queue to receive only echo
                messages with extended ID 0x15. After this, the filtering criteria are read and sent to the console output. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.GetFiltersIndex" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.GetFiltersIndex" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.GetFiltersIndex" language="cpp"/>
            </example>  
            
            <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)">
            <summary>
            Removes a filtering criterion from the message filter of the default receive queue (index 0).
            </summary>
            
            <param name="filter">The filtering criterion to be removed.</param>
            
            <returns>true if the criterion is successfully removed; otherwise, false.</returns>
            
            <example>
                <para>
                The following example shows how to configure the message filter of the default receive queue (index 0)
                to receive only echo messages with extended ID 0x15. After this, the filtering criteria for the CAN identifier is 
                removed, so that any echo message can be received. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.RemoveFilter" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.RemoveFilter" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.RemoveFilter" language="cpp"/>
            </example>  
            
            <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.GetFilters" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.RemoveFilter(System.Int32,Peak.Can.Basic.FilteringCriterion)">
            <summary>
            Removes a filtering criterion from the message filter of the specified receive queue.
            </summary>
            
            <param name="queueIndex">Zero-based index that identifies the receive queue whose filter 
            criterion is to be removed.</param>
            <param name="filter">The filtering criterion to be removed.</param>
            
            <returns>true if the filter is successfully removed; otherwise, false.</returns>
            
            <exception cref="T:System.IndexOutOfRangeException">The <paramref name="queueIndex"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>-1].</exception>
            
            <example>
                <para>
                The following example shows how to configure the message filter of a specific receive queue
                to receive only echo messages with extended ID 0x15. After this, the filtering criteria for
                the CAN identifier is removed, so that any echo message can be received. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.RemoveFilterIndex" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.RemoveFilterIndex" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.RemoveFilterIndex" language="cpp"/>
            </example>  
            
            <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.GetFilters" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.ClearFilters">
            <summary>
            Removes all filtering criteria from the message filter of the default receive queue (index 0).
            </summary>       
            
            <example>
                <para>
                The following example shows how to remove all filtering criteria from the message filter of the 
                default receive queue (index 0).
                </para>
                
                <code source="Examples\CS\Program.cs" region="Worker.ClearFilters" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.ClearFilters" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.ClearFilters" language="cpp"/>
            </example>  
            
            <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.ClearFilters(System.Int32)">
            <summary>
            Removes all filtering criteria from the message filter of the specified receive queue.
            </summary>
            
            <param name="queueIndex">Zero-based index that identifies the receive queue whose filter 
            criteria are to be removed.</param>
            
            <exception cref="T:System.IndexOutOfRangeException">The <paramref name="queueIndex"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>-1].</exception>
            
            <example>
                <para>
                The following example shows how to remove all filtering criteria from the message filter of the 
                second receive queue (index 1). 
                </para>
                
                <code source="Examples\CS\Program.cs" region="Worker.ClearFiltersIndex" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.ClearFiltersIndex" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.ClearFiltersIndex" language="cpp"/>
            </example>  
            
            <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.AddFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.RemoveFilter(Peak.Can.Basic.FilteringCriterion)" autoUpgrade="true"/>        
            
        </member>
        <member name="M:Peak.Can.Basic.Worker.Dequeue(Peak.Can.Basic.PcanMessage@,System.UInt64@)">
             <summary>
             Removes and returns a CAN messages and its timestamp from the default receive queue (index 0).
             </summary>
             
             <remarks>
             Unlike the <see cref="T:Peak.Can.Basic.Api"/> class, the <see cref="T:Peak.Can.Basic.Worker"/> class doesn't clear the receive queues on disconnect. 
             A <see cref="T:Peak.Can.Basic.Worker"/> object muss explicitly be instructed to clear its receive queues when deactivating the connection, i.e. by calling the 
             <see cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/> method, or by calling the 
             <see cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>/<see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> methods at any time.
             <para>This implies, that an application can keep processing messages after a connection to a PCAN Channel has been terminated.</para>
             </remarks>
             
             <param name="message">A <see cref="T:Peak.Can.Basic.PcanMessage"/> object representing a received CAN message.</param>
             <param name="timestamp">The timestamp of the message, in microseconds.
             <note>
             <para>On Windows, the <paramref name="timestamp"/> contains the number of microseconds elapsed since system start.</para>
             <para>On Linux, the <paramref name="timestamp"/> contains the number of microseconds elapsed since <c>the epoch</c> (00:00 UTC, January 1st 1970).</para>
             </note>
             </param>
             
             <returns>true if a message was successfully dequeued; otherwise, false.</returns>
            
             <example>
                 <para>
                 The following example shows how to retrieve a message from the default receive queue (index 0). 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.Dequeue" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.Dequeue" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.Dequeue" language="cpp"/>
             </example>  
             
             <seealso cref="M:Peak.Can.Basic.Worker.Start(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.Dequeue(System.Int32,Peak.Can.Basic.PcanMessage@,System.UInt64@)">
             <summary>
             Removes and returns a CAN messages and its timestamp from a specific receive queue.
             </summary>
             
             <remarks>
             Unlike the <see cref="T:Peak.Can.Basic.Api"/> class, the <see cref="T:Peak.Can.Basic.Worker"/> class doesn't clear the receive queues on disconnect. 
             A <see cref="T:Peak.Can.Basic.Worker"/> object muss explicitly be instructed to clear its receive queues when deactivating the connection, i.e. by calling the 
             <see cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/> method, or by calling the 
             <see cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>/<see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> methods at any time.
             <para>This implies, that an application can keep processing messages after a connection to a PCAN Channel has been terminated.</para>
             </remarks>
             
             <param name="queueIndex">Zero-based index that identifies the receive queue from which the message should be taken.</param>
             <param name="message">A <see cref="T:Peak.Can.Basic.PcanMessage"/> object representing a received CAN message.</param>
             <param name="timestamp">The timestamp of the message, in microseconds.
             <note>
             <para>On Windows, the <paramref name="timestamp"/> contains the number of microseconds elapsed since system start.</para>
             <para>On Linux, the <paramref name="timestamp"/> contains the number of microseconds elapsed since <c>the epoch</c> (00:00 UTC, January 1st 1970).</para>
             </note>
             </param>
             
             <returns>true if a message was successfully dequeued; otherwise, false.</returns>
            
             <exception cref="T:System.IndexOutOfRangeException">The <paramref name="queueIndex"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>-1].</exception>
             
             <example>
                 <para>
                 The following example shows how to retrieve a message from the second receive queue (index 1). 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.DequeueIndex" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.DequeueIndex" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.DequeueIndex" language="cpp"/>
             </example>  
             
             <seealso cref="M:Peak.Can.Basic.Worker.Start(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.GetAvailableMessagesCount">
            <summary>
            Retrieves the amount of available messages currently contained in the default receive queue (index 0).
            </summary>
            
            <remarks>
            Unlike the <see cref="T:Peak.Can.Basic.Api"/> class, the <see cref="T:Peak.Can.Basic.Worker"/> class doesn't clear the receive queues on disconnect. 
            A <see cref="T:Peak.Can.Basic.Worker"/> object muss explicitly be instructed to clear its receive queues when deactivating the connection, i.e. by calling the 
            <see cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/> method, or by calling the 
            <see cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>/<see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> methods at any time.
            <para>This implies, that an application can keep processing messages after a connection to a PCAN Channel has been terminated.</para>
            </remarks>
            
            <returns>The amount of messages currently contained in the default receive queue (index 0).</returns>
            
            <example>
                <para>
                The following example shows how to retrieve the amount of messages contained in the default receive queue (index 0). 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.GetAvailableMessagesCount" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.GetAvailableMessagesCount" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.GetAvailableMessagesCount" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.Dequeue(Peak.Can.Basic.PcanMessage@,System.UInt64@)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.GetAvailableMessagesCount(System.Int32)">
             <summary>
             Retrieves the amount of available messages currently contained in the specified receive queue.
             </summary>
             
             <remarks>
             Unlike the <see cref="T:Peak.Can.Basic.Api"/> class, the <see cref="T:Peak.Can.Basic.Worker"/> class doesn't clear the receive queues on disconnect. 
             A <see cref="T:Peak.Can.Basic.Worker"/> object muss explicitly be instructed to clear its receive queues when deactivating the connection, i.e. by calling the 
             <see cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/> method, or by calling the 
             <see cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>/<see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> methods at any time.
             <para>This implies, that an application can keep processing messages after a connection to a PCAN Channel has been terminated.</para>
             </remarks>
             
             <param name="queueIndex">Zero-based index that identifies the receive queue from which the amount of available messages should be retrieved.</param>
             
             <returns>The amount of messages currently contained in the specified receive queue.</returns>
            
             <exception cref="T:System.IndexOutOfRangeException">The <paramref name="queueIndex"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>-1].</exception>
             
             <example>
                 <para>
                 The following example shows how to retrieve the amount of messages contained in the second receive queue (index 1). 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.GetAvailableMessagesCountIndex" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.GetAvailableMessagesCountIndex" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.GetAvailableMessagesCountIndex" language="cpp"/>
             </example>  
            
             <seealso cref="M:Peak.Can.Basic.Worker.Dequeue(Peak.Can.Basic.PcanMessage@,System.UInt64@)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.SetFilteringState(Peak.Can.Basic.FilteringState,System.Boolean)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.ClearReceiveQueue">
             <summary>
             Discards all available messages from the default receive queue (index 0).
             </summary>
            
             <remarks>
             Unlike the <see cref="T:Peak.Can.Basic.Api"/> class, the <see cref="T:Peak.Can.Basic.Worker"/> class doesn't clear the receive queues on disconnect. 
             A <see cref="T:Peak.Can.Basic.Worker"/> object muss explicitly be instructed to clear its receive queues when deactivating the connection, i.e. by calling the 
             <see cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/> method, or by calling the 
             <see cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>/<see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> methods at any time.
             <para>This implies, that an application can keep processing messages after a connection to a PCAN Channel has been terminated.</para>
             </remarks>
             
             <example>
                 <para>
                 The following example shows how to clear the default receive queue (index 0). 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.ClearReceptionQueue" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.ClearReceptionQueue" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.ClearReceptionQueue" language="cpp"/>
             </example> 
             
             <seealso cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)">
             <summary>
             Discards all available messages from the given receive queue.
             </summary>
             
             <remarks>
             Unlike the <see cref="T:Peak.Can.Basic.Api"/> class, the <see cref="T:Peak.Can.Basic.Worker"/> class doesn't clear the receive queues on disconnect. 
             A <see cref="T:Peak.Can.Basic.Worker"/> object muss explicitly be instructed to clear its receive queues when deactivating the connection, i.e. by calling the 
             <see cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/> method, or by calling the 
             <see cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>/<see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> methods at any time.
             <para>This implies, that an application can keep processing messages after a connection to a PCAN Channel has been terminated.</para>
             </remarks>
             
             <param name="queueIndex">Index of the receive queue whose messages are to be discarded</param>
            
             <exception cref="T:System.IndexOutOfRangeException">The <paramref name="queueIndex"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.ReceiveQueuesCount"/>-1].</exception>
             
             <example>
                 <para>
                 The following example shows how to clear the second receive queue (index 1). 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.ClearReceptionQueueIndex" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.ClearReceptionQueueIndex" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.ClearReceptionQueueIndex" language="cpp"/>
             </example> 
             
             <seealso cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues">
             <summary>
             Discards all available messages from all receive queues.
             </summary>
            
             <remarks>
             Unlike the <see cref="T:Peak.Can.Basic.Api"/> class, the <see cref="T:Peak.Can.Basic.Worker"/> class doesn't clear the receive queues on disconnect. 
             A <see cref="T:Peak.Can.Basic.Worker"/> object muss explicitly be instructed to clear its receive queues when deactivating the connection, i.e. by calling the 
             <see cref="M:Peak.Can.Basic.Worker.Stop(System.Boolean,System.Boolean,System.Boolean)" autoUpgrade="true"/> method, or by calling the 
             <see cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>/<see cref="M:Peak.Can.Basic.Worker.ClearAllReceiveQueues" autoUpgrade="true"/> methods at any time.
             <para>This implies, that an application can keep processing messages after a connection to a PCAN Channel has been terminated.</para>
             </remarks>
             
             <example>
                 <para>
                 The following example shows how to clear all receive queues. 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.ClearReceptionQueueAll" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.ClearReceptionQueueAll" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.ClearReceptionQueueAll" language="cpp"/>
             </example> 
             
             <seealso cref="M:Peak.Can.Basic.Worker.ClearReceiveQueue(System.Int32)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)">
             <summary>
             Configures a CAN message to be written periodically.
             </summary>
             
             <remarks>
             <para>The amount of <see cref="T:Peak.Can.Basic.Broadcast"/> that can be registered is limited by <see cref="F:Peak.Can.Basic.Worker.MaximumBroadcastCount"/>. Trying to configure more than that
             causes this method to fail.
             </para>
            
             <para>
             The accuracy of the transmission interval when using <see cref="T:Peak.Can.Basic.Broadcast"/> objects depend on the amount of data being transmitted and fill state of
             the driver's transmit queue. 
             </para>
             
             <para>
             The transmit queue of the driver has a size of 1 MB, enough to allocate up to 32.768 classic CAN messages or 13.000 CAN FD messages. 
             This queue is constantly in observation so that any new entry is processed and physically sent as fast as possible. 
             </para>
             
             <para>The <see cref="T:Peak.Can.Basic.Worker"/> object uses a performance timer to check the time expiration of registered <see cref="T:Peak.Can.Basic.Broadcast"/> objects. 
             When a <see cref="T:Peak.Can.Basic.Broadcast"/> object time outs, the associated CAN message is placed in the device driver's transmit queue,
             as if the <see cref="M:Peak.Can.Basic.Api.Write(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage)" autoUpgrade="true"/> method had just been called.
             </para>
             
             <para>Single <see cref="T:Peak.Can.Basic.Broadcast"/> objects can be temporarily deactivated using the <see cref="M:Peak.Can.Basic.Worker.PauseBroadcast(System.Int32)" autoUpgrade="true"/> method and reactivated again using
             the <see cref="M:Peak.Can.Basic.Worker.ResumeBroadcast(System.Int32)" autoUpgrade="true"/> method. Using the property <see cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/> is possible to activate/deactivate the <see cref="T:Peak.Can.Basic.Broadcast"/>
             object processing.
             </para>
             <note>
             If a <see cref="T:Peak.Can.Basic.Broadcast"/> object represents a CAN FD message but the PCAN Channel used was not initialized with support for CAN FD, 
             it is automatically deactivated (paused), when this situation is detected.
             </note>
             </remarks>
             
             <param name="message">Represents the CAN message to be written when the given <paramref name="interval"/> expires.</param>
             <param name="interval">Represents the interval used to write the <paramref name="message"/> periodically.</param>
             
             <returns>The index of the registered <see cref="T:Peak.Can.Basic.Broadcast"/> object; -1 otherwise.</returns>
             
             <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="interval"/> parameter value is out of range. This must be in the range [1...<see cref="F:System.Int32.MaxValue"/>].</exception>
             <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter value is null. An object of type <see cref="T:Peak.Can.Basic.PcanMessage"/> is required.</exception>
             
             <example>
                 <para>
                 The following example shows how to configure a <see cref="T:Peak.Can.Basic.Broadcast"/> object. 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.AddBroadcast" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.AddBroadcast" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.AddBroadcast" language="cpp"/>
             </example> 
             
             <seealso cref="M:Peak.Can.Basic.Worker.RemoveBroacast(System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.ClearBroadcasts" autoUpgrade="true"/>
             <seealso cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/>
             
        </member>
        <member name="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.Broadcast@)">
            <summary>
            Configures a CAN message to be written periodically.
            </summary>
            
            <remarks>
            <para>The amount of <see cref="T:Peak.Can.Basic.Broadcast"/> that can be registered is limited by <see cref="F:Peak.Can.Basic.Worker.MaximumBroadcastCount"/>. Trying to configure more than that
            causes this method to fail.
            </para>
            
            <para>
            The accuracy of the transmission interval when using <see cref="T:Peak.Can.Basic.Broadcast"/> objects depend on the amount of data being transmitted and fill state of
            the driver's transmit queue. 
            </para>
            
            <para>
            The transmit queue of the driver has a size of 1 MB, enough to allocate up to 32.768 classic CAN messages or 13.000 CAN FD messages. 
            This queue is constantly in observation so that any new entry is processed and physically sent as fast as possible. 
            </para>
            
            <para>The <see cref="T:Peak.Can.Basic.Worker"/> object uses a performance timer to check the time expiration of registered <see cref="T:Peak.Can.Basic.Broadcast"/> objects. 
            When a <see cref="T:Peak.Can.Basic.Broadcast"/> object time outs, the associated CAN message is placed in the device driver's transmit queue,
            as if the <see cref="M:Peak.Can.Basic.Api.Write(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage)" autoUpgrade="true"/> method had just been called.
            </para>
            
            <para>Single <see cref="T:Peak.Can.Basic.Broadcast"/> objects can be temporarily deactivated using the <see cref="M:Peak.Can.Basic.Worker.PauseBroadcast(System.Int32)" autoUpgrade="true"/> method and reactivated again using
            the <see cref="M:Peak.Can.Basic.Worker.ResumeBroadcast(System.Int32)" autoUpgrade="true"/> method. Using the property <see cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/> is possible to activate/deactivate the <see cref="T:Peak.Can.Basic.Broadcast"/>
            object processing.
            </para>
            <note>
            If a <see cref="T:Peak.Can.Basic.Broadcast"/> object represents a CAN FD message but the PCAN Channel used was not initialized with support for CAN FD, 
            it is automatically deactivated (paused), when this situation is detected.
            </note>
            </remarks>
            
            <param name="frame">Represents a periodic CAN message.</param>
            
            <returns>true if the <see cref="T:Peak.Can.Basic.Broadcast"/> object was configured; false otherwise.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:Peak.Can.Basic.Broadcast.Interval"/> value is out of range. This must be in the range [1...<see cref="F:System.Int32.MaxValue"/>].</exception>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:Peak.Can.Basic.Broadcast.Message"/> value of the <paramref name="frame"/> parameter is null. An object of type <see cref="T:Peak.Can.Basic.PcanMessage"/> is required.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Peak.Can.Basic.Broadcast"/> object represented by the <paramref name="frame"/> parameter is already registered.</exception>
            
            <example>
                <para>
                The following example shows how to configure a <see cref="T:Peak.Can.Basic.Broadcast"/> object. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.AddBroadcastObject" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.AddBroadcastObject" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.AddBroadcastObject" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.RemoveBroacast(System.Int32)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.ClearBroadcasts" autoUpgrade="true"/>
            <seealso cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Worker.RemoveBroacast(System.Int32)">
            <summary>
            Removes a periodic CAN message from the list of registered <see cref="T:Peak.Can.Basic.Broadcast"/> objects.
            </summary>
            
            <remarks>
            <para>If a <see cref="T:Peak.Can.Basic.Broadcast"/> object needs to be temporarily deactivated, it is not needed to delete it and create it again.
            Single <see cref="T:Peak.Can.Basic.Broadcast"/> objects can be temporarily deactivated using the <see cref="M:Peak.Can.Basic.Worker.PauseBroadcast(System.Int32)" autoUpgrade="true"/> method and reactivated again using
            the <see cref="M:Peak.Can.Basic.Worker.ResumeBroadcast(System.Int32)" autoUpgrade="true"/> method. Using the property <see cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/> is possible to activate/deactivate the <see cref="T:Peak.Can.Basic.Broadcast"/>
            object processing.
            </para>
            </remarks>
            
            <param name="index">Represents the zero-based index associated to a <see cref="T:Peak.Can.Basic.Broadcast"/> object.</param>
            
            <returns>true if the <see cref="T:Peak.Can.Basic.Broadcast"/> object was removed; false otherwise.</returns>
            
            <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.MaximumBroadcastCount"/>-1].</exception>
            
            <example>
                <para>
                The following example shows how to remove a <see cref="T:Peak.Can.Basic.Broadcast"/> object. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.RemoveBroacast" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.RemoveBroacast" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.RemoveBroacast" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.ClearBroadcasts" autoUpgrade="true"/>
            <seealso cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Worker.RemoveBroacast(Peak.Can.Basic.Broadcast@)">
            <summary>
            Removes a periodic CAN message from the list of registered <see cref="T:Peak.Can.Basic.Broadcast"/> objects.
            </summary>
            
            <remarks>
            <para>If a <see cref="T:Peak.Can.Basic.Broadcast"/> object needs to be temporarily deactivated, it is not needed to delete it and create it again.
            Single <see cref="T:Peak.Can.Basic.Broadcast"/> objects can be temporarily deactivated using the <see cref="M:Peak.Can.Basic.Worker.PauseBroadcast(System.Int32)" autoUpgrade="true"/> method and reactivated again using
            the <see cref="M:Peak.Can.Basic.Worker.ResumeBroadcast(System.Int32)" autoUpgrade="true"/> method. Using the property <see cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/> is possible to activate/deactivate the <see cref="T:Peak.Can.Basic.Broadcast"/>
            object processing.
            </para>
            </remarks>
            
            <param name="broadcast">Represents the <see cref="T:Peak.Can.Basic.Broadcast"/> object to be removed.</param>
            
            <returns>true if the <see cref="T:Peak.Can.Basic.Broadcast"/> object was removed; false otherwise.</returns>
            
            <exception cref="T:System.ArgumentNullException">The <paramref name="broadcast"/> parameter value is null. An object of type <see cref="T:Peak.Can.Basic.Broadcast"/> is required.</exception>
            
            <example>
                <para>
                The following example shows how to remove a <see cref="T:Peak.Can.Basic.Broadcast"/> object. 
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.RemoveBroacastObject" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.RemoveBroacastObject" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.RemoveBroacastObject" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Worker.ClearBroadcasts" autoUpgrade="true"/>
            <seealso cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Worker.UpdateBroadcast(System.Int32,System.Int32)">
             <summary>
             Adjusts the sending interval of a periodic CAN message from the list of registered <see cref="T:Peak.Can.Basic.Broadcast"/> objects.
             </summary>
             
             <param name="index">Represents the zero-based index associated to a <see cref="T:Peak.Can.Basic.Broadcast"/> object.</param>
             <param name="interval">The desired interval at which the periodic CAN message should be written.</param>
             
             <returns>true if the <see cref="T:Peak.Can.Basic.Broadcast"/> object was modified; false otherwise.</returns>
             
             <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.MaximumBroadcastCount"/>-1].</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="interval"/> parameter value is out of range. This must be in the range [1...<see cref="F:System.Int32.MaxValue"/>].</exception>
            
             <example>
                 <para>
                 The following example shows how to update a <see cref="T:Peak.Can.Basic.Broadcast"/> object. 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.UpdateBroadcastInterval" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.UpdateBroadcastInterval" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.UpdateBroadcastInterval" language="cpp"/>
             </example> 
             
             <seealso cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.RemoveBroacast(System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.ClearBroadcasts"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.UpdateBroadcast(System.Int32,Peak.Can.Basic.PcanMessage)">
             <summary>
             Adjusts the content of a periodic CAN message from the list of registered <see cref="T:Peak.Can.Basic.Broadcast"/> objects.
             </summary>
             
             <param name="index">Represents the zero-based index associated to a <see cref="T:Peak.Can.Basic.Broadcast"/> object.</param>
             <param name="message">The CAN message to be periodically written.</param>
             
             <returns>true if the <see cref="T:Peak.Can.Basic.Broadcast"/> object was modified; false otherwise.</returns>
             
             <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.MaximumBroadcastCount"/>-1].</exception>
             <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter value is null. An object of type <see cref="T:Peak.Can.Basic.PcanMessage"/> is required.</exception>
            
             <example>
                 <para>
                 The following example shows how to update a <see cref="T:Peak.Can.Basic.Broadcast"/> object. 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.UpdateBroadcastMessage" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.UpdateBroadcastMessage" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.UpdateBroadcastMessage" language="cpp"/>
             </example> 
             
             <seealso cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.RemoveBroacast(System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.ClearBroadcasts"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.UpdateBroadcast(System.Int32,System.Int32,Peak.Can.Basic.PcanMessage)">
             <summary>
             Adjusts the configuration of a periodic CAN message from the list of registered <see cref="T:Peak.Can.Basic.Broadcast"/> objects.
             </summary>
             
             <param name="index">Represents the zero-based index associated to a <see cref="T:Peak.Can.Basic.Broadcast"/> object.</param>
             <param name="interval">The desired interval at which the periodic CAN message should be written.</param>
             <param name="message">The CAN message to be periodically written.</param>
             
             <returns>true if the <see cref="T:Peak.Can.Basic.Broadcast"/> object was modified; false otherwise.</returns>
             
             <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.MaximumBroadcastCount"/>-1].</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="interval"/> parameter value is out of range. This must be in the range [1...<see cref="F:System.Int32.MaxValue"/>].</exception>
            
             <example>
                 <para>
                 The following example shows how to update a <see cref="T:Peak.Can.Basic.Broadcast"/> object. 
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.UpdateBroadcast" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.UpdateBroadcast" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.UpdateBroadcast" language="cpp"/>
             </example> 
             
             <seealso cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.RemoveBroacast(System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.ClearBroadcasts"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.PauseBroadcast(System.Int32)">
            <summary>
            Temporarily stops sending a periodic CAN message.
            </summary>
            
            <remarks>
            This method allows the deactivation of a single broadcast. The property <see cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/> activates/deactivates 
            the broadcasting feature in general.
            </remarks>
            
            <param name="index">Represents the zero-based index of the periodic CAN message to be stopped.</param>
            
            <returns>true if the <see cref="T:Peak.Can.Basic.Broadcast"/> object was deactivated; false otherwise.</returns>
            
            <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.MaximumBroadcastCount"/>-1].</exception>
            
            <example>
                <para>
                The following example shows how to deactivate/pause a <see cref="T:Peak.Can.Basic.Broadcast"/> object.
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.PauseResumeBroadcast" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.PauseResumeBroadcast" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.PauseResumeBroadcast" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.ResumeBroadcast(System.Int32)" autoUpgrade="true"/>
            <seealso cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.ResumeBroadcast(System.Int32)">
            <summary>
            Resumes the sending of a paused periodic CAN message.
            </summary>
            
            <remarks>
            This method allows resuming a single broadcast. The property <see cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/> activates/deactivates 
            the broadcasting feature in general.
            </remarks>
            
            <param name="index">Represents the zero-based index of the periodic CAN message to be resumed.</param>
            
            <returns>true if the <see cref="T:Peak.Can.Basic.Broadcast"/> object was resumed; false otherwise.</returns>
            
            <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.MaximumBroadcastCount"/>-1].</exception>
            
            <example>
                <para>
                The following example shows how to reactivate/resume a <see cref="T:Peak.Can.Basic.Broadcast"/> object.
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.PauseResumeBroadcast" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.PauseResumeBroadcast" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.PauseResumeBroadcast" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.PauseBroadcast(System.Int32)" autoUpgrade="true"/>
            <seealso cref="P:Peak.Can.Basic.Worker.MessageBroadcasting"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.GetBroadcast(System.Int32)">
             <summary>
             Retrieves a <see cref="T:Peak.Can.Basic.Broadcast"/> object from the periodic CAN messages list.
             </summary>
             
             <remarks>
             Changes made to an object retrieved by this method are automatically updated in the <see cref="T:Peak.Can.Basic.Worker"/> object's broadcast list.  
             </remarks>
             
             <param name="index">Represents the zero-based index of the periodic CAN message to be retrieved.</param>
             
             <returns>A <see cref="T:System.Nullable`1"/> value with a valid periodic message, otherwise null</returns>
            
             <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index"/> parameter value is out of range. This must be in the range [0...<see cref="F:Peak.Can.Basic.Worker.MaximumBroadcastCount"/>-1].</exception>
             
             <example>
                 <para>
                 The following example shows how to retrieve a <see cref="T:Peak.Can.Basic.Broadcast"/> object from the <see cref="T:Peak.Can.Basic.Worker"/> object's broadcast list.
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.GetBroadcast" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.GetBroadcast" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.GetBroadcast" language="cpp"/>
             </example> 
            
             <seealso cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.PauseBroadcast(System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.ResumeBroadcast(System.Int32)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Worker.UpdateBroadcast(System.Int32,System.Int32)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.ClearBroadcasts">
            <summary>
            Removes all entries from the <see cref="T:Peak.Can.Basic.Worker"/> object's broadcast list.
            </summary>
            
            <example>
                <para>
                The following example shows how to clear the <see cref="T:Peak.Can.Basic.Worker"/> object's broadcast list.
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.ClearBroadcasts" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.ClearBroadcasts" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.ClearBroadcasts" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.Transmit(Peak.Can.Basic.PcanMessage)">
            <summary>
            Places a CAN message into the transmit queue of the device driver to be written as soon as possible.
            </summary>
            
            <remarks>
            <para>
            The driver's transmit queue is 1 MB in size, which is enough to allocate up to 32.768 classic CAN messages or 13.000 CAN FD messages. 
            This queue is constantly monitored so that any new message is processed and physically sent as fast as possible. 
            </para>
            </remarks>
            
            <param name="message">The CAN message to be written.</param>
            
            <returns>A <see cref="T:Peak.Can.Basic.PcanStatus"/> value as result of the write operation</returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered 
            when a device driver is not installed or is not up to date.</exception>
            
            <example>
                <para>
                The following example shows how to send a CAN message.
                </para>
                
                <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                
                <code source="Examples\CS\Program.cs" region="Worker.Transmit" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Worker.Transmit" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Worker.Transmit" language="cpp"/>
            </example> 
            
            <seealso cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/>
        </member>
        <member name="M:Peak.Can.Basic.Worker.Transmit(Peak.Can.Basic.PcanMessage,Peak.Can.Basic.PcanStatus@)">
             <summary>
             Places a CAN message into the transmit queue of the device driver to be written as soon as possible.
             </summary>
             
             <remarks>
             <para>
             The driver's transmit queue is 1 MB in size, which is enough to allocate up to 32.768 classic CAN messages or 13.000 CAN FD messages. 
             This queue is constantly monitored so that any new message is processed and physically sent as fast as possible. 
             </para>
             </remarks>
             
             <param name="message">The CAN message to be written.</param>
             <param name="error">In case of failure, the <see cref="T:Peak.Can.Basic.PcanStatus"/> error code resulting when trying to send the <paramref name="message"/>.</param>
             
             <returns>A <see cref="T:Peak.Can.Basic.PcanStatus"/> value as result of the write operation</returns>
            
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when 
             a device driver is not installed or is not up to date.</exception>
            
             <example>
                 <para>
                 The following example shows how to send a CAN message.
                 </para>
                 
                 <para>In case of failure, an error messages is written to the console output using English as output language.</para>
                 
                 <code source="Examples\CS\Program.cs" region="Worker.TransmitError" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Worker.TransmitError" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Worker.TransmitError" language="cpp"/>
             </example> 
             
             <seealso cref="M:Peak.Can.Basic.Worker.AddBroadcast(Peak.Can.Basic.PcanMessage,System.Int32)" autoUpgrade="true"/>
        </member>
        <member name="P:Peak.Can.Basic.Worker.ExceptionLanguage">
            <summary>
            Specifies the language used for exception texts formatting.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.Active">
            <summary>
            Gets the activation status of this <see cref="T:Peak.Can.Basic.Worker"/> object. 
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.TransmissionProtocol">
            <summary>
            Gets or sets the transport protocol used for CAN communication.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.Channel">
            <summary>
            Gets or set the PCAN Channel used for CAN communication.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.BitrateCan">
            <summary>
            Gets or sets the bit rate used for classic CAN 2.0A/B data transmission (see <see cref="T:Peak.Can.Basic.Bitrate"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.BitrateCanFd">
            <summary>
            Gets or sets the bit rate used for CAN FD data transmission (see <see cref="T:Peak.Can.Basic.BitrateFD"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.ListenOnly">
            <summary>
            Configures the CAN feature listen-only in the associated PCAN Channel.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.AllowStatusFrames">
            <summary>
            Enables or disables receiving status frames (see <see cref="F:Peak.Can.Basic.MessageType.Status"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.AllowRemoteRequestFrames">
            <summary>
            Enables or disables receiving remote request frames (see <see cref="F:Peak.Can.Basic.MessageType.RemoteRequest"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.AllowErrorFrames">
            <summary>
            Enables or disables receiving error frames (see <see cref="F:Peak.Can.Basic.MessageType.Error"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.AllowEchoFrames">
            <summary>
            Enables or disables receiving echo frames (see <see cref="F:Peak.Can.Basic.MessageType.Echo"/>).
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.TotalAvailableMessages">
            <summary>
            Retrieves the total amount of messages currently contained by this object.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.BroadcastCount">
            <summary>
            Retrieves the total amount of periodic messages currently configured within this object.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.MessageFetching">
            <summary>
            Enables or disable the reading of messages.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Worker.MessageBroadcasting">
            <summary>
            Enables or disables the sending of periodic messages.
            </summary>
        </member>
        <member name="E:Peak.Can.Basic.Worker.MessageAvailable">
            <summary>
            Occurs when a message is received, validated and placed in a receive queue.         
            </summary>
            <remarks>
            <note type="important">
            This event is fired from a background thread. It may be needed to do synchronization
            operations with the main thread, if visual controls are involved.
            </note>
            </remarks>
        </member>
        <member name="T:Peak.Can.Basic.Api">
            <summary>
            PCAN-Basic API class implementation.
            </summary>
            <remarks>
            This class allows access to the underlying PCAN-Basic API.
            </remarks>
        </member>
        <member name="M:Peak.Can.Basic.Api.GetAttachedChannels(Peak.Can.Basic.PcanChannelInformation[]@)">
            <summary>
            Retrieves information about the PCAN Channels attached to the system.
            </summary>
            
            <remarks>
                <para>
                The method <see cref="M:Peak.Can.Basic.Api.GetAttachedChannels(Peak.Can.Basic.PcanChannelInformation[]@)" autoUpgrade="true"/> is an aid that internally calls the method 
                <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,Peak.Can.Basic.PcanChannelInformation[])" autoUpgrade="true"/> to get the amount of attached PCAN Channels
                and their description as an array of <see cref="T:Peak.Can.Basic.PcanChannelInformation"/> objects.
                </para>
               <para>The involved PCAN parameters are <see cref="F:Peak.Can.Basic.PcanParameter.AttachedChannelsCount"/> and <see cref="F:Peak.Can.Basic.PcanParameter.AttachedChannelsInformation"/>.</para>
            </remarks>
            
            <param name="buffer">An array of <see cref="T:Peak.Can.Basic.PcanChannelInformation"/> to return information about the PCAN Channels found.</param>        
            
            <returns>
                <para>The return value is a <see cref="T:Peak.Can.Basic.PcanStatus"/> value. <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success.</para>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            
            <example>
                <para>
                The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.GetAttachedChannels(Peak.Can.Basic.PcanChannelInformation[]@)" autoUpgrade="true"/>  method to retrieve
                and show the name, PCAN Channel handle, and features of all current attached PCAN devices.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.GetAttachedChannels" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.GetAttachedChannels" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.GetAttachedChannels" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.Api.GetHandleInformation(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanDevice@,System.Int32@)">
            <summary>
            Retrieves information about device type and channel number from a PCAN Handle
            </summary>
            
            <param name="handle">The handle of a PCAN Channel</param>
            <param name="device">Output variable to store the device type</param>
            <param name="channel">Output variable to store the channel number</param>
            
            <returns>
                <para>
                The return value is a <see cref="T:Peak.Can.Basic.PcanStatus"/> value. <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the given <paramref name="handle"/> is invalid.</item>
                </list>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            
            <example>
                <para>
                The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.GetHandleInformation(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanDevice@,System.Int32@)" autoUpgrade="true"/>  method to retrieve
                the PCAN device name and channel number associated to the given <paramref name="channel"/>.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.GetHandleInformation" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.GetHandleInformation" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.GetHandleInformation" language="cpp"/>
            </example>
        </member>
        <member name="M:Peak.Can.Basic.Api.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Peak.Can.Basic.Api"/> class.
            </summary>
        </member>
        <member name="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)">
             <summary>
             Initializes a PCAN Channel for classic CAN communication.
             </summary>
             
             <remarks>
                 <note>
                 For initializing a CAN FD capable Channel for CAN FD communication use the method <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/> instead.
                 </note>
             
                 <note>
                 This method will fail if an application tries to initialize a PCAN Channel that has been already initialized. The PCAN Channel must be first finalized using the 
                 <see cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)" autoUpgrade="true"/> method, to be able to call <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
                 or <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/> on it again. 
                 </note>
                 
                 <para>
                 As indicated by its name, the <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/> method initiates a PCAN Channel, 
                 preparing it for communicate within the CAN bus connected to it. Calls to other methods will fail if they are used with a Channel 
                 handle, different than <see cref="F:Peak.Can.Basic.PcanChannel.None"/>, that has not been initialized yet. Each initialized channel should be released 
                 when it is not needed anymore.
                 </para>
                 
                 <para>
                 Initializing a PCAN Channel means:
                 <list type="bullet">
                     <item>to reserve the Channel for the calling application/process. </item>
                     <item>to allocate Channel resources, like receive and transmit queues.</item>
                     <item>to register/connect the Hardware denoted by the Channel handle.</item>
                     <item>to check and adapt the bus speed, if the Channel is already in use - <font color="#00A31515">only if the Channel was configured 
                     to adapt an available bit rate (see: <see cref="F:Peak.Can.Basic.PcanParameter.BitrateAdapting"/> parameter)</font>.</item>
                     <item>to set the Channel in Listen-Only mode - <font color="#00A31515">only if the Channel was configured to work in Listen-Only mode 
                     (see: <see cref="F:Peak.Can.Basic.PcanParameter.ListenOnly"/> parameter)</font>. </item>
                     <item>to open the filter, i.e., configure the filter to capture all messages that are transmitted on the bus.</item>
                     <item>to set-up the default values of the different parameters (see method <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.String@)" autoUpgrade="true"/>).</item>
                     <item>to activate the receive status for the Channel. (See: <see cref="F:Peak.Can.Basic.PcanParameter.ReceiveStatus"/> parameter).</item>
                 </list>
                 </para>
                 
                 <para>
                 Take in consideration that initializing a Channel causes a reset of the CAN hardware, when the bus status is other than OK. In this 
                 way errors like <see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/>, <see cref="F:Peak.Can.Basic.PcanStatus.BusLight"/>, and <see cref="F:Peak.Can.Basic.PcanStatus.BusHeavy"/>, are removed. 
                 </para>
                     
                 <para>
                 <b>PCAN-LAN Channels</b>
                 </para>
                 <para>
                 A PCAN-LAN Channel doesn't allow changing the bit rate using PCAN-Basic. In order to connect a PCAN-LAN Channel it is necessary to know 
                 the bit rate of the CAN controller on the PCAN-Gateway device that is represented by that Channel. To initialize the Channel without having to specify the correct bit rate, the parameter 
                 <see cref="F:Peak.Can.Basic.PcanParameter.BitrateAdapting"/> can be used.
                 </para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="bitrate">The speed for the communication (BTR0/BTR1 code). Default is 500 kBit/s (<see cref="F:Peak.Can.Basic.Bitrate.Pcan500"/>).</param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Caution"/>: Indicates that the <paramref name="channel"/> has been initialized but at a different bit rate than the specified in <paramref name="bitrate"/>.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/>: Indicates that the <paramref name="channel"/> is not available.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidOperation"/>: Indicates that an action cannot be executed due to the state of the hardware. Possible causes are:
                     <list type="bullet">
                         <item>The <paramref name="channel"/> is a <see cref="F:Peak.Can.Basic.PcanDevice.PcanLan"/> Channel, which uses a different bit rate than the specified.</item>
                     </list></item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalMode"/>: Indicates that the hardware is working in a different or incompatible mode than requested. Possible causes are:
                     <list type="bullet">
                         <item>The <paramref name="channel"/> is being operated in CAN FD mode.</item>
                     </list></item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be connected because it is already in use (PCAN-Basic / PCAN-Light environment).</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.NetInUse"/>: Indicates that the <paramref name="channel"/> is being used with a different bit rate (PCAN-View).</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.HardwareInUse"/>: Indicates that the <paramref name="channel"/> is being already used (PcanApi connection).</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.NoDriver"/>: Indicates that the device driver needed for connecting the <paramref name="channel"/> is not loaded. </item>
                 </list>
             </returns>
             
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
            
             <example>
                 <para>
                 The following example shows the initialization and uninitialization processes using the USB interface (first PCAN-USB hardware). 
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.Initialize" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.Initialize" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.Initialize" language="cpp"/>
             </example>
                     
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)" autoUpgrade="true"/>
             
        </member>
        <member name="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)">
            <summary>
            Initializes a PCAN Channel for CAN communication supporting flexible data rate. 
            </summary>
            
            <remarks>
                <note>
                For initializing a Channel for CAN communication only (no flexible data rate), use the method <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/> instead.
                </note>
                
                <note>
                This method will fail if an application tries to initialize a PCAN Channel that has been already initialized. The PCAN Channel must be first finalized using the 
                <see cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)" autoUpgrade="true"/> method, to be able to call <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
                or <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/> on it again. 
                </note>
                
                <para>
                As indicated by its name, the <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/> method initiates a PCAN Channel, 
                preparing it for communicate within the CAN bus connected to it. Calls to the other methods will fail if they are used with a Channel 
                handle, different than <see cref="F:Peak.Can.Basic.PcanChannel.None"/>, that has not been initialized yet. Each initialized channel should be released 
                when it is not needed anymore.
                </para>
                
                <para>
                Initializing a PCAN Channel means:
                <list type="bullet">
                    <item>to reserve the Channel for the calling application/process.</item>
                    <item>to allocate Channel resources, like receive and transmit queues.</item>
                    <item>to register/connect the Hardware denoted by the Channel handle. </item>
                    <item>to check and adapt the bus speed, if the Channel is already in use - <font color="#00A31515">only if the Channel was configured 
                    to adapt an available bit rate (see: <see cref="F:Peak.Can.Basic.PcanParameter.BitrateAdapting"/> parameter)</font>.</item>
                    <item>to set the Channel in Listen-Only mode - <font color="#00A31515">only if the Channel was configured to work in Listen-Only mode 
                    (see: <see cref="F:Peak.Can.Basic.PcanParameter.ListenOnly"/> parameter)</font>. </item>
                    <item>to open the filter, i.e., configure the filter to capture all messages that are transmitted on the bus.</item>
                    <item>to set-up the default values of the different parameters (see method <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)" autoUpgrade="true"/>).</item>
                    <item>to activate the receive status for the Channel. (See: <see cref="F:Peak.Can.Basic.PcanParameter.ReceiveEvent"/> parameter).</item>
                </list>
                </para>
            
                <para>
                Take in consideration that initializing a Channel causes a reset of the CAN hardware, when the bus status is other than OK. In this 
                way errors like <see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/>, <see cref="F:Peak.Can.Basic.PcanStatus.BusWarning"/>, and <see cref="F:Peak.Can.Basic.PcanStatus.BusPassive"/>, are removed. 
                </para>
                    
                <para>
                <b>PCAN-LAN Channels</b>
                </para>
                <para>
                A PCAN-LAN Channel doesn't allow changing the bit rate using PCAN-Basic. In order to connect a PCAN-LAN Channel it is necessary to know 
                the bit rate of the CAN controller on the PCAN-Gateway device that is represented by that Channel. To initialize the Channel without having to specify the correct bit rate, the parameter 
                <see cref="F:Peak.Can.Basic.PcanParameter.BitrateAdapting"/> can be used.
                </para>
            </remarks>
            
            <param name="channel">The handle of a FD capable PCAN Channel.</param>
            <param name="bitrate">The speed for the communication as a CAN FD bit rate object (see <see cref="T:Peak.Can.Basic.BitrateFD"/>). Default is 500 kBit/s / 2 MBit/s (<see cref="F:Peak.Can.Basic.BitrateFD.BitrateSaeJ2284_4"/>).</param>
            
            <returns>
                <para>
                <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.Caution"/>: Indicates that the <paramref name="channel"/> has been initialized but at a different bit rate than the specified in <paramref name="bitrate"/>.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/>: Indicates that the <paramref name="channel"/> is not available.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidOperation"/>: Indicates that an action cannot be executed due to the state of the hardware. Possible causes are:
                    <list type="bullet">
                        <item>The <paramref name="channel"/> is not CAN FD capable and cannot be initialized using this method.</item>
                        <item>The <paramref name="channel"/> is a <see cref="F:Peak.Can.Basic.PcanDevice.PcanLan"/> Channel, which uses a different bit rate than the specified.</item>
                    </list></item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalMode"/>: Indicates that the hardware is working in a different or incompatible mode than requested. Possible causes are:
                    <list type="bullet">
                        <item>The <paramref name="channel"/> is being operated in classic CAN 2.0 A/B mode.</item>
                    </list></item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be connected because it is already in use (PCAN-Basic / PCAN-Light environment).</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.NetInUse"/>: Indicates that the <paramref name="channel"/> is being used with a different bit rate (PCAN-View).</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.HardwareInUse"/>: Indicates that the <paramref name="channel"/> is being already used (PcanApi connection).</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.NoDriver"/>: Indicates that the device driver needed for connecting the <paramref name="channel"/> is not loaded. </item>
                </list>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
            not installed or is not up to date.</exception>
            
            <example>
                <para>
                The following example shows the initialization and uninitialization processes using the USB interface (first PCAN-USB hardware). 
                </para>
            
                <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                and it will be shown to the user.
                </para>
            
                <code source="Examples\CS\Program.cs" region="Api.InitializeFD" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.InitializeFD" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.InitializeFD" language="cpp"/>
            </example>
                    
            <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)" autoUpgrade="true"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)">
            <summary>
            Uninitializes one or all PCAN Channels initialized by the methods <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/> and <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>.
            </summary>
            
            <remarks>
                <para>
                This method can be used to achieve two different goals:
                <list type="bullet">
                    <item>To release a single Channel: Passing the handle of a PCAN Channel initialized before as parameter (see <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/> / <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>) 
                    terminates the connection with that Chanel. If the given channel cannot be found, an error is returned.</item>
                    <item>To release all connected Channels: Passing the Channel <see cref="F:Peak.Can.Basic.PcanChannel.None"/> as parameter, terminates all connections, that have been issued and maintained by 
                    the calling application. This operation does not generate errors if no Channels were found and terminated.</item>
                </list>
                </para>
                <note type="important">
                    <para>
                    When a connection is terminated, the underlying hardware's transmit queue will not be immediately discarded. The API will wait some time before terminating, so that the hardware has 
                    time to send (or try to send) the unsent messages. When this time runs out (about 500 milliseconds), the rest of the messages in the queue (if any) are discarded.
                    </para>
                </note>
            </remarks>
            
            <param name="channel">The handle of a PCAN Channel.</param>
            
            <returns>
                <para>
                <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be terminated because it was not found in the list of reserved Channels of the 
                    calling application.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                </list>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
            not installed or is not up to date.</exception>
            
            <example>
                <list type="number">
                <item>
                <para>
                The following example shows the single release process using the USB interface (first PCAN-USB hardware). 
                </para>
                
                <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.Uninitialize" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.Uninitialize" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.Uninitialize" language="cpp"/>
                </item>
                
                <item>
                <para>
                The following example shows the multiple release process using the USB interface (first and second PCAN-USB hardware). 
                </para>
                
                <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.UninitializeMulti" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.UninitializeMulti" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.UninitializeMulti" language="cpp"/>
                </item>
                </list>
            </example>
            
            <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.Reset(Peak.Can.Basic.PcanChannel)">
            <summary>
            Discards all messages contained in the receive and transmit queues of a PCAN Channel.
            </summary>
            
            <remarks>
                <para>
                Calling this method <b>ONLY</b> clears the queues of a Channel. A reset of the CAN controller doesn't take place, unless the parameter <see cref="F:Peak.Can.Basic.PcanParameter.HardResetStatus"/> is active. 
                </para>
                <para>
                Normally a reset of the CAN Controller is desired when a bus-off occur. In this case an application cannot use the channel to communicate anymore, 
                until the CAN controller is reset. Consider using the <see cref="F:Peak.Can.Basic.PcanParameter.BusOffAutoReset"/> parameter, which instructs the API to automatically 
                reset the CAN controller when a bus-off state is detected.
                </para>
                <para>
                Another way to reset bus errors like <see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/>, <see cref="F:Peak.Can.Basic.PcanStatus.BusPassive"/>, and others:
                <list type="bullet">
                    <item>Performing an <see cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)">uninitialize</see> / <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true">initialize</see>
                    cycle: This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel. 
                    </item>
                    <item>Using the parameter <see cref="F:Peak.Can.Basic.PcanParameter.HardResetStatus"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other 
                    clients are connected to that channel.</item>
                </list>
                </para>
            </remarks>
            
            <param name="channel">The handle of a PCAN Channel.</param>
            
            <returns>
                <para>
                <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                    calling application.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                </list>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
            not installed or is not up to date.</exception>
            
            <example>
                <para>
                The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.Reset(Peak.Can.Basic.PcanChannel)"/> method using the USB interface (first PCAN-USB hardware). This example assumes that there is communication  
                taking place on the CAN bus. 
                </para>
                
                <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.Reset" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.Reset" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.Reset" language="cpp"/>
            </example>
            
            <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)" autoUpgrade="true"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.GetStatus(Peak.Can.Basic.PcanChannel)">
             <summary>
             Retrieves the current status of the CAN controller of the hardware represented by a PCAN Channel.
             </summary>
             
             <remarks>
                 <para>
                 When the hardware status is bus-off, an application cannot communicate anymore. Consider using the <see cref="F:Peak.Can.Basic.PcanParameter.BusOffAutoReset"/> parameter, 
                 which instructs the API to automatically reset the CAN controller when a bus-off state is detected.
                 </para>
                 <para>
                 Another way to reset bus errors like <see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/>, <see cref="F:Peak.Can.Basic.PcanStatus.BusPassive"/>, and others:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)">uninitialize</see> / <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true">initialize</see>
                     cycle: This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel. 
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.PcanParameter.HardResetStatus"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other 
                     clients are connected to that channel.</item>
                 </list>
                 </para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned if the CAN controller of the hardware represented by the given PCAN Channel is in a normal state.
                 The typical errors in case of failure are:
                 </para>
                 <list type="bullet">
                     <item>
                     <see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be terminated because it was not found in the list of reserved Channels of the 
                     calling application.</item>
                     <item>
                     <see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/>: Indicates that the hardware represented by <paramref name="channel"/> was removed or deactivated.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.BusHeavy"/>Indicates a bus error within the CAN controller of the hardware represented by the given PCAN Channel. An error counter reached the 'heavy' limit.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.BusLight"/>Indicates a bus error within the CAN controller of the hardware represented by the given PCAN Channel. An error counter reached the 'light' limit.</item>        
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.BusPassive"/>Indicates a bus error within the CAN controller of the hardware represented by the given PCAN Channel. The CAN controller is in error passive state.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.BusWarning"/>Indicates a bus error within the CAN controller of the hardware represented by the given PCAN Channel. An error counter reached the 'warning' limit.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/>Indicates a bus error within the CAN controller of the hardware represented by the given PCAN Channel. The CAN controller is in bus-off state.</item>
                 </list>
             </returns>
             
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.GetStatus(Peak.Can.Basic.PcanChannel)" autoUpgrade="true"/> method using the USB interface (first PCAN-USB hardware). A Channel is initialized
                 and used to send 255 messages in about 4 seconds. After each sending the status of the CAN controller is checked. 
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <list type="number">
                 <item>
                 <code source="Examples\CS\Program.cs" region="Api.GetStatus" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.GetStatus" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.GetStatus" language="cpp"/>
                 </item>
                 </list>
             </example>
            
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.Read(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage@)">
             <summary>
             Reads a CAN message from the receive queue of a PCAN Channel.
             </summary>
             
             <remarks>
                 <note>
                 If the timestamp of message reception is required, use the <see cref="M:Peak.Can.Basic.Api.Read(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage@,System.UInt64@)"/> method instead.
                 </note>
                 <para>
                 The <c>Read</c> method returns CAN frames from the receive queue. It is important to call <c>Read</c> repeatedly until the receive queue becomes empty. In case there are no 
                 more messages to retrieve, the error <see cref="F:Peak.Can.Basic.PcanStatus.ReceiveQueueEmpty"/> is returned. The <see cref="F:Peak.Can.Basic.PcanStatus.ReceiveQueueEmpty"/> error is also returned if the reception of messages, 
                 configurable through the <see cref="F:Peak.Can.Basic.PcanParameter.ReceiveStatus"/> parameter, is disabled.
                 </para>
                 <para>
                 The receive queue can contain up to <b>32768</b> messages.
                 </para>
                 <para>
                 There are two possibilities for reading messages from the receive queue of a Channel:
                 <list type="bullet">
                 <item>
                 Time-Triggered Reading: Consists in periodically calls to the <c>Read</c> method. Typically, an application starts a timer that checks for messages every 50 or 100 milliseconds, calling the <c>Read</c>
                 method in a loop until the <see cref="F:Peak.Can.Basic.PcanStatus.ReceiveQueueEmpty"/> error or another error condition is reached.
                 </item>
                 <item>
                 Event-Triggered Reading: Consists in reacting to a notification sent by the PCAN driver to a registered application, when a message is received and 
                 placed in its receive queue. See <conceptualLink target="4601f07f-bf14-454d-bf58-fc0bb6ae2b19">Using Events</conceptualLink> to obtain more information about 
                 reading with events.
                 </item>
                 </list>
                 </para>
                 <para><b>About bus errors / status messages</b></para>
                 <para>
                 If a bus-off error occur, an application cannot use the channel to communicate anymore, until the CAN controller is reset. Consider using the <see cref="F:Peak.Can.Basic.PcanParameter.BusOffAutoReset"/> parameter, 
                 which instructs the API to automatically reset the CAN controller when a bus-off state is detected.
                 </para>
                 <para>
                 Another way to reset bus errors like <see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/>, <see cref="F:Peak.Can.Basic.PcanStatus.BusPassive"/>, and others:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)">uninitialize</see> / <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true">initialize</see>
                     cycle: This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel. 
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.PcanParameter.HardResetStatus"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other 
                     clients are connected to that channel.</item>
                 </list>
                 </para>
                 <para>
                 The  <see cref="P:Peak.Can.Basic.PcanMessage.MsgType"/> of a <see cref="T:Peak.Can.Basic.PcanMessage"/> object indicates the kind of CAN frame it describes. This value should be checked every time a message 
                 has been read successfully.
                 </para>
                 <para>
                 If the <see cref="P:Peak.Can.Basic.PcanMessage.MsgType"/> of a <see cref="T:Peak.Can.Basic.PcanMessage"/> contains the value <see cref="F:Peak.Can.Basic.MessageType.Error"/>, then the message is an <conceptualLink target="68cca14e-9706-4178-a468-6e18e422e677">
                 Error Frame</conceptualLink>.
                 </para>
                 <para>
                 If the <see cref="P:Peak.Can.Basic.PcanMessage.MsgType"/> of a <see cref="T:Peak.Can.Basic.PcanMessage"/> contains the value <see cref="F:Peak.Can.Basic.MessageType.Status"/>, then the message is a <conceptualLink target="bb6e13ad-203d-405e-aba9-89895bda82dd">
                 Status Frame</conceptualLink>.
                 </para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="msg">
             <para>Contains the next available CAN frame stored in the FIFO receive queue of <paramref name="channel"/>.</para> 
             <para>The content of <c>msg</c> is only valid if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para>
             </param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                     calling application.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidValue"/>: Indicates that one or more of the values passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.ReceiveQueueEmpty"/>: Indicates that there are no more messages in the receive queue of the Channel.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalData"/>: Indicates that the message that has been read is not permitted due to the current settings and has been discarded.</item>
                 </list>
             </returns>
            
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.Read(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage@)" autoUpgrade="false"/> method using the USB interface (first PCAN-USB hardware). 
                 A Channel is initialized and used to read messages within 1 second.  
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.Read" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.Read" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.Read" language="cpp"/>
             </example>
             
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Api.Write(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage)" autoUpgrade="true"/>
             <conceptualLink target="68cca14e-9706-4178-a468-6e18e422e677">Error Frames</conceptualLink>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.Read(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage@,System.UInt64@)">
             <summary>
             Reads a CAN message and its timestamp from the receive queue of a PCAN Channel.
             </summary>
             
             <remarks>
                 <note>
                 If the timestamp of message reception is not required, use the <see cref="M:Peak.Can.Basic.Api.Read(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage@)"/> method instead.
                 </note>
                 <para>
                 The <c>Read</c> method returns CAN frames from the receive queue. It is important to call <c>Read</c> repeatedly until the receive queue becomes empty. In case there are no 
                 more messages to retrieve, the error <see cref="F:Peak.Can.Basic.PcanStatus.ReceiveQueueEmpty"/> is returned. The <see cref="F:Peak.Can.Basic.PcanStatus.ReceiveQueueEmpty"/> error is also returned if the reception of messages, 
                 configurable through the <see cref="F:Peak.Can.Basic.PcanParameter.ReceiveStatus"/> parameter, is disabled.
                 </para>
                 <para>
                 The receive queue can contain up to <b>32768</b> messages.
                 </para>
                 <para>
                 There are two possibilities for reading messages from the receive queue of a Channel:
                 <list type="bullet">
                 <item>
                 Time-Triggered Reading: Consists in periodically calls to the <c>Read</c> method. Typically, an application starts a timer that checks for messages every 50 or 100 milliseconds, calling the <c>Read</c>
                 method in a loop until the <see cref="F:Peak.Can.Basic.PcanStatus.ReceiveQueueEmpty"/> error or another error condition is reached.
                 </item>
                 <item>
                 Event-Triggered Reading: Consists in reacting to a notification sent by the PCAN driver to a registered application, when a message is received and 
                 placed in its receive queue. See <conceptualLink target="4601f07f-bf14-454d-bf58-fc0bb6ae2b19">Using Events</conceptualLink> to obtain more information about 
                 reading with events.
                 </item>
                 </list>
                 </para>
                 <para><b>About bus errors / status messages</b></para>
                 <para>
                 If a bus-off error occur, an application cannot use the channel to communicate anymore, until the CAN controller is reset. Consider using the <see cref="F:Peak.Can.Basic.PcanParameter.BusOffAutoReset"/> parameter, 
                 which instructs the API to automatically reset the CAN controller when a bus-off state is detected.
                 </para>
                 <para>
                 Another way to reset bus errors like <see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/>, <see cref="F:Peak.Can.Basic.PcanStatus.BusPassive"/>, and others:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)">uninitialize</see> / <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true">initialize</see>
                     cycle: This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel. 
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.PcanParameter.HardResetStatus"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other 
                     clients are connected to that channel.</item>
                 </list>
                 </para>
                 <para>
                 The  <see cref="P:Peak.Can.Basic.PcanMessage.MsgType"/> of a <see cref="T:Peak.Can.Basic.PcanMessage"/> object indicates the kind of CAN frame it describes. This value should be checked every time a message 
                 has been read successfully.
                 </para>
                 <para>
                 If the <see cref="P:Peak.Can.Basic.PcanMessage.MsgType"/> of a <see cref="T:Peak.Can.Basic.PcanMessage"/> contains the value <see cref="F:Peak.Can.Basic.MessageType.Error"/>, then the message is an <conceptualLink target="68cca14e-9706-4178-a468-6e18e422e677">
                 Error Frame</conceptualLink>.
                 </para>
                 <para>
                 If the <see cref="P:Peak.Can.Basic.PcanMessage.MsgType"/> of a <see cref="T:Peak.Can.Basic.PcanMessage"/> contains the value <see cref="F:Peak.Can.Basic.MessageType.Status"/>, then the message is a <conceptualLink target="bb6e13ad-203d-405e-aba9-89895bda82dd">
                 Status Frame</conceptualLink>.
                 </para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="msg">
             <para>Contains the next available CAN frame stored in the FIFO receive queue of <paramref name="channel"/>.</para> 
             <para>The content of <c>msg</c> is only valid if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para>
             </param>
             <param name="timestamp">
             <para>Contains the timestamp, in microseconds, of when the <paramref name="msg"/> was received.</para>
             <para>The content of <c>timestamp</c> is only valid if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para>
             <note>
             <para>On Windows, the <paramref name="timestamp"/> contains the number of microseconds elapsed since system start.</para>
             <para>On Linux, the <paramref name="timestamp"/> contains the number of microseconds elapsed since <c>the epoch</c> (00:00 UTC, January 1st 1970).</para>
             </note>
             </param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                     calling application.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidValue"/>: Indicates that one or more of the values passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.ReceiveQueueEmpty"/>: Indicates that there are no more messages in the receive queue of the Channel.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalData"/>: Indicates that the message that has been read is not permitted due to the current settings and has been discarded.</item>
                 </list>
             </returns>
            
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.Read(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage@,System.UInt64@)" autoUpgrade="false"/> method using the USB interface (first PCAN-USB hardware). 
                 A Channel is initialized and used to read messages within 1 second.  
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.ReadTimestamp" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.ReadTimestamp" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.ReadTimestamp" language="cpp"/>
             </example>
             
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Api.Write(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage)" autoUpgrade="true"/>
             <conceptualLink target="68cca14e-9706-4178-a468-6e18e422e677">Error Frames</conceptualLink>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.Write(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage)">
             <summary>
             Places a CAN message in the transmit queue of a PCAN Channel.
             </summary>
             
             <remarks>
                 <para>
                 If a bus-off error occur, an application cannot use the channel to communicate anymore, until the CAN controller is reset. Consider using the <see cref="F:Peak.Can.Basic.PcanParameter.BusOffAutoReset"/> parameter, 
                 which instructs the API to automatically reset the CAN controller when a bus-off state is detected.
                 </para>
                 <para>
                 Another way to reset bus errors like <see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/>, <see cref="F:Peak.Can.Basic.PcanStatus.BusPassive"/>, and others:
                 <list type="bullet">
                     <item>Performing an <see cref="M:Peak.Can.Basic.Api.Uninitialize(Peak.Can.Basic.PcanChannel)">uninitialize</see> / <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true">initialize</see>
                     cycle: This causes a hardware reset, but <b>only</b> when no more clients are connected to that channel. 
                     </item>
                     <item>Using the parameter <see cref="F:Peak.Can.Basic.PcanParameter.HardResetStatus"/>: It instructs this method to explicitly perform a hardware reset regardless of whether other 
                     clients are connected to that channel.</item>
                 </list>
                 </para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="msg">Represents the CAN message to be transmitted through the <paramref name="channel"/>.</param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                     calling application.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidOperation"/>: Indicates that the <paramref name="channel"/> was not initialized using the <see cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/> method.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidValue"/>: Indicates that one or more of the values passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.BusOff"/>: Indicates a bus error within the given PCAN Channel. The CAN controller is in bus-off state.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.TransmitQueueFull"/>: Indicates that the transmit queue of the Channel is full.</item>
                 </list>
             </returns>
            
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.Write(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage)"/> method using the USB interface (first PCAN-USB hardware). 
                 A Channel is initialized and used to write 10 messages.
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.WriteFD" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.WriteFD" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.WriteFD" language="cpp"/>
             </example>
             
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Api.Read(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanMessage@)" autoUpgrade="true"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.FilterMessages(Peak.Can.Basic.PcanChannel,System.UInt32,System.UInt32,Peak.Can.Basic.FilterMode)">
             <summary>
             Configures the acceptance filter for CAN messages within a PCAN Channel.
             </summary>
             
             <remarks>
                 <note type="important">
                 After a PCAN Channel is initialized, its filter is fully opened, causing any message received by the hardware to be placed in the receive queue of the Channel.
                 </note>
                 <para>
                 Based on the current state of the filter, calling this method results in the following behavior:
                 <list type="bullet">
                 <item>
                 Status was <see cref="F:Peak.Can.Basic.ParameterValue.Filter.Open"/>: The filter is automatically closed and then configured with the given range of IDs passed to <see cref="M:Peak.Can.Basic.Api.FilterMessages(Peak.Can.Basic.PcanChannel,System.UInt32,System.UInt32,Peak.Can.Basic.FilterMode)" autoUpgrade="true"/> [<paramref name="fromID"/>, <paramref name="toID"/>].
                 </item>
                 <item>
                 Status was <see cref="F:Peak.Can.Basic.ParameterValue.Filter.Close"/>: The filter is set to the given range of IDs passed to <see cref="M:Peak.Can.Basic.Api.FilterMessages(Peak.Can.Basic.PcanChannel,System.UInt32,System.UInt32,Peak.Can.Basic.FilterMode)" autoUpgrade="true"/> [<paramref name="fromID"/>, <paramref name="toID"/>].
                 </item>
                 <item>
                 Status was <see cref="F:Peak.Can.Basic.ParameterValue.Filter.Custom"/>: The filter is expanded with the given range of Ids [<paramref name="fromID"/>, <paramref name="toID"/>]. If a smaller or different range is required than a range 
                 that has been configured before, the filter has to be closed first before calling <see cref="M:Peak.Can.Basic.Api.FilterMessages(Peak.Can.Basic.PcanChannel,System.UInt32,System.UInt32,Peak.Can.Basic.FilterMode)" autoUpgrade="true"/> again. To do this, use the method <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)" autoUpgrade="true"/>.
                 </item>
                 </list>
                 </para>
                 The <paramref name="mode"/> indicates which kind of ID is being used to register the new filter range. There are two possible values, Standard (11-bit identifier) or Extended (29-bit identifier). 
                 Standard frames are using the bit positions 28 to 18 of the <c>Acceptance Mask/Code registers</c> in the SJA1000 CAN controller. Drivers for 82C200 CAN controllers have to shift the bits down to positions 10 to 0.
                 <para>
                 Take into account that configuring the message filter causes the CAN controller to enter the reset state. This will affect other applications that communicate with the same PCAN hardware.
                 </para>
                 <note type="important">
                 <list type="number">
                     <item>There is only one filter for standard and extended CAN messages. The ID from a standard message uses the most significant 11 bits (bit 18 to 28) of 
                     the 29 bits filter. I.e. the standard ID 400h is also received by indicating an extended ID 10000000h. For this reason, it is <u><b>not recommended</b></u> to mix standard and 
                     extended filters, since it can increase the risk of receiving unwanted messages.
                     </item>
                     <item>
                     Multiple calls of <see cref="M:Peak.Can.Basic.Api.FilterMessages(Peak.Can.Basic.PcanChannel,System.UInt32,System.UInt32,Peak.Can.Basic.FilterMode)" autoUpgrade="true"/> expand the reception filter.
                     </item>
                     <item>
                     It is not guaranteed that an application only receives CAN messages in the range of <paramref name="fromID"/> to <paramref name="toID"/>. This is caused by the operating 
                     principle of the SJA1000's acceptance filter. See also <see href="https://www.nxp.com/docs/en/data-sheet/SJA1000.pdf">Philips Data Sheet "SJA1000 Stand-alone CAN-controller</see>.
                     </item>
                 </list>
                 </note>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="fromID">The lower range value to accept and place messages in the receive queue. 
             <para>The lowest value allowed is <c>0</c>.The highest value allowed is <c>0x7FF</c> if <paramref name="mode"/> equals to <see cref="F:Peak.Can.Basic.FilterMode.Standard"/>, 
             and <c>0x1FFFFFFF</c> if <paramref name="mode"/> equals to <see cref="F:Peak.Can.Basic.FilterMode.Extended"/>.</para></param>
             <param name="toID">The upper range value to accept and place messages in the receive queue. <para>The lowest value allowed is <c>0</c>. The highest value allowed is <c>0x7FF</c> if <paramref name="mode"/> equals to <see cref="F:Peak.Can.Basic.FilterMode.Standard"/>, 
             and <c>0x1FFFFFFF</c> if <paramref name="mode"/> equals to <see cref="F:Peak.Can.Basic.FilterMode.Extended"/>.</para></param>
             <param name="mode">The kind of filter to be set. This parameter restricts the range of values valid for <paramref name="fromID"/> and <paramref name="toID"/>.</param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                     calling application.</item>
                 </list>
             </returns>
            
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.FilterMessages(Peak.Can.Basic.PcanChannel,System.UInt32,System.UInt32,Peak.Can.Basic.FilterMode)" autoUpgrade="true"/> method using the USB interface (first PCAN-USB hardware). 
                 A Channel is initialized and its filter is configured to get only messages with ID 2,3,4 or 5. 
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.FilterMessages" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.FilterMessages" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.FilterMessages" language="cpp"/>
             </example>
             
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>
             <seealso cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)" autoUpgrade="false"/>
             <seealso href="https://www.nxp.com/docs/en/data-sheet/SJA1000.pdf">Philips Data Sheet "SJA1000 Stand-alone CAN-controller</seealso>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)">
             <summary>
             Retrieves a 32-bit numeric parameter value from a PCAN Channel.
             </summary>
             
             <remarks>
                 <para>
                 Use <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)"/> to get the value of parameters like the <see cref="F:Peak.Can.Basic.PcanParameter.DeviceId"/>, and <see cref="F:Peak.Can.Basic.PcanParameter.ControllerNumber"/>, among others. 
                 </para>
                 <para>Not all parameters are supported for all PCAN Channels. Using a parameter with a non-compatible Channel ends with an error.</para>
                 <para>Not all parameters have read access. Using a write-only parameter with <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)" autoUpgrade="true"/> ends with an error.</para>
                 <para>The value of some parameters can only be retrieved if the <paramref name="channel"/> is initialized. For more information see the <see cref="T:Peak.Can.Basic.PcanParameter"/> section.</para>
                 <para>According to the value being retrieved, the type of the value can be treated as an enumeration value. For more information see the <see cref="T:Peak.Can.Basic.PcanParameter"/> section.</para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="parameter">The parameter whose value is to be retrieved.</param>
             <param name="buffer"><para>Contains the requested 32-bit numeric value.</para>
             <para><c>buffer</c> is only valid, if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para></param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                     calling application.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/>: Indicates that the hardware represented by <paramref name="channel"/> is currently not available (detached or disabled).</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidParameter"/>: Indicates that the requested parameter value is not implemented or is not supported by the given PCAN Channel.</item>
                 </list>
             </returns>
            
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)"/> method using the USB interface (first PCAN-USB hardware). 
                 The device ID is requested on a not initialized Channel. 
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.GetValueUInt" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.GetValueUInt" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.GetValueUInt" language="cpp"/>
             </example>
             
             <seealso cref="T:Peak.Can.Basic.PcanParameter">PCAN Parameters</seealso>
             <seealso cref="T:Peak.Can.Basic.ParameterValue"/>
             <seealso cref="T:Peak.Can.Basic.PcanDeviceFeatures"/>
             <seealso cref="T:Peak.Can.Basic.ServiceStatus"/>
             <seealso cref="T:Peak.Can.Basic.ChannelCondition"/>
             <seealso cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)" autoUpgrade="false"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt64@)">
             <summary>
             Retrieves a 64-bit numeric parameter value from a PCAN Channel.
             </summary>
             
             <remarks>
                 <para>
                 Use <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)"/> to get the value of parameters like the <see cref="F:Peak.Can.Basic.PcanParameter.AcceptanceFilter11Bit"/>, and <see cref="F:Peak.Can.Basic.PcanParameter.AcceptanceFilter29Bit"/>. 
                 </para>
                 <para>Not all parameters are supported for all PCAN Channels. Using a parameter with a non-compatible Channel ends with an error.</para>
                 <para>Not all parameters have read access. Using a write-only parameter with <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)" autoUpgrade="true"/> ends with an error.</para>
                 <para>The value of some parameters can only be retrieved if the <paramref name="channel"/> is initialized. For more information see the <see cref="T:Peak.Can.Basic.PcanParameter"/> section.</para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="parameter">The parameter whose value is to be retrieved.</param>
             <param name="buffer"><para>Contains the requested 64-bit numeric value.</para>
             <para><c>buffer</c> is only valid, if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para></param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                     calling application.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/>: Indicates that the hardware represented by <paramref name="channel"/> is currently not available (detached or disabled).</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidParameter"/>: Indicates that the requested parameter value is not implemented or is not supported by the given PCAN Channel.</item>
                 </list>
             </returns>
            
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt64@)"/> method using the USB interface (first PCAN-USB hardware). 
                 The 11-bit acceptance filter is requested. 
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.GetValueUInt64" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.GetValueUInt64" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.GetValueUInt64" language="cpp"/>
             </example>
             
             <seealso cref="T:Peak.Can.Basic.PcanParameter">PCAN Parameters</seealso>
             <seealso cref="T:Peak.Can.Basic.ParameterValue"/>
             <seealso cref="T:Peak.Can.Basic.PcanDeviceFeatures"/>
             <seealso cref="T:Peak.Can.Basic.ServiceStatus"/>
             <seealso cref="T:Peak.Can.Basic.ChannelCondition"/>
             <seealso cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt64)" autoUpgrade="false"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.String@)">
             <summary>
             Retrieves a string parameter value from a PCAN Channel.
             </summary>
             
             <remarks>
                 <para>
                 Use <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.String@)"/> to get the value of parameters like the <see cref="F:Peak.Can.Basic.PcanParameter.ApiVersion"/>, and <see cref="F:Peak.Can.Basic.PcanParameter.BitrateFdInformation"/>, among others. 
                 </para>
                 <para>Not all parameters are supported for all PCAN Channels. Using a parameter with a non-compatible Channel ends with an error.</para>
                 <para>Not all parameters have read access. Using a write-only parameter with <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)" autoUpgrade="true"/> ends with an error.</para>
                 <para>The value of some parameters can only be retrieved if the <paramref name="channel"/> is initialized. For more information see the <see cref="T:Peak.Can.Basic.PcanParameter"/> section.</para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="parameter">The parameter whose value is to be retrieved.</param>
             <param name="buffer"><para>Contains the requested string value.</para>
             <para><c>buffer</c> is only valid, if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para></param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                     calling application.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/>: Indicates that the hardware represented by <paramref name="channel"/> is currently not available (detached or disabled).</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidParameter"/>: Indicates that the requested parameter value is not implemented or is not supported by the given PCAN Channel.</item>
                 </list>
             </returns>
            
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.String@)"/> method using the USB interface (first PCAN-USB hardware). 
                 The name of the hardware represented by a PCAN Channel is requested. 
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.GetValueString" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.GetValueString" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.GetValueString" language="cpp"/>
             </example>
             
             <seealso cref="T:Peak.Can.Basic.PcanParameter">PCAN Parameters</seealso>
             <seealso cref="T:Peak.Can.Basic.ParameterValue"/>
             <seealso cref="T:Peak.Can.Basic.PcanDeviceFeatures"/>
             <seealso cref="T:Peak.Can.Basic.ServiceStatus"/>
             <seealso cref="T:Peak.Can.Basic.ChannelCondition"/>
             <seealso cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.String)" autoUpgrade="false"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,Peak.Can.Basic.PcanChannelInformation[])">
             <summary>
             Retrieves an array of <see cref="T:Peak.Can.Basic.PcanChannelInformation"/> with information about the hardware currently attached to the system.
             </summary>
             
             <remarks>
                 <para>
                 Use <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,Peak.Can.Basic.PcanChannelInformation[])"/> to get the values associated to the parameters <see cref="F:Peak.Can.Basic.PcanParameter.AttachedChannelsInformation"/>. 
                 </para>
                 <para>This method can only be called using the Channel <see cref="F:Peak.Can.Basic.PcanChannel.None"/>. Using any other Channel ends with an error.</para>
                 <para>See <see cref="T:Peak.Can.Basic.PcanChannelInformation"/> for additional information on the retrieved data.</para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="parameter">The parameter whose value is to be retrieved.</param>
             <param name="buffer"><para>Contains the requested information.</para>
             <para><c>buffer</c> is only valid, if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para></param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidParameter"/>: Indicates that the requested parameter value is not implemented or is not supported by the given PCAN Channel.</item>
                 </list>
             </returns>
            
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception>
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,Peak.Can.Basic.PcanChannelInformation[])"/> method. 
                 The information about the attached Channels is requested and shown.  
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.GetValueInfo" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.GetValueInfo" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.GetValueInfo" language="cpp"/>
             </example>
             
             <seealso cref="T:Peak.Can.Basic.PcanParameter">PCAN Parameters</seealso>
             <seealso cref="T:Peak.Can.Basic.ParameterValue"/>
             <seealso cref="T:Peak.Can.Basic.PcanDeviceFeatures"/>
             <seealso cref="T:Peak.Can.Basic.ServiceStatus"/>
             <seealso cref="T:Peak.Can.Basic.ChannelCondition"/>
             <seealso cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)" autoUpgrade="true"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)">
             <summary>
             Configures a 32-bit numeric parameter value of a PCAN Channel. 
             </summary>
             
             <remarks>
                 <para>
                 Use <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)"/> to set the value of parameters like the <see cref="F:Peak.Can.Basic.PcanParameter.DeviceId"/>, and <see cref="F:Peak.Can.Basic.PcanParameter.ReceiveStatus"/>, among others. 
                 </para>
                 <para>Not all parameters are supported for all PCAN Channels. Using a parameter with a non-compatible Channel ends with an error.</para>
                 <para>Not all parameters have write access. Using a read-only parameter with <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)" autoUpgrade="true"/> ends with an error.</para>
                 <para>Except for a few parameters, the <paramref name="channel"/> has to be initialized first, before being able to configure a value on it. For more information see the <see cref="T:Peak.Can.Basic.PcanParameter"/> section.</para>
             </remarks>
             
             <param name="channel">The handle of a PCAN Channel.</param>
             <param name="parameter">The parameter whose value is to be configured.</param>
             <param name="buffer">Contains the 32-bit numeric value to be set.</param>
             
             <returns>
                 <para>
                 <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                 </para>
                 <list type="bullet">
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                     calling application.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/>: Indicates that the hardware represented by <paramref name="channel"/> is currently not available (detached or disabled).</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidParameter"/>: Indicates that the requested parameter value is not implemented or is not supported by the given PCAN Channel.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidValue"/>: Indicates that one or more of the values passed to the method are invalid.</item>
                     <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidOperation"/>: Indicates that an action cannot be executed due to the state of the hardware. Possible causes are:
                     <list type="bullet">
                         <item>The <see cref="F:Peak.Can.Basic.PcanParameter.BitrateAdapting"/> parameter is being configured on an initialized <paramref name="channel"/>.</item>
                     </list></item>
                 </list>
             </returns>
             
             <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
             <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
             not installed or is not up to date.</exception> 
             
             <example>
                 <para>
                 The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)"/> method using the USB interface (first PCAN-USB hardware). 
                 The device ID of the channel is configured to be 7.
                 </para>
                 
                 <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                 and it will be shown to the user.
                 </para>
                 
                 <code source="Examples\CS\Program.cs" region="Api.SetValueUInt" language="cs"/>
                 <code source="Examples\VB\Program.vb" region="Api.SetValueUInt" language="vb"/>
                 <code source="Examples\CPP\Program.cpp" region="Api.SetValueUInt" language="cpp"/>
             </example>
             
             <seealso cref="T:Peak.Can.Basic.PcanParameter">PCAN Parameters</seealso>
             <seealso cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)" autoUpgrade="false"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt64)">
            <summary>
            Configures a 64-bit numeric parameter value of a PCAN Channel. 
            </summary>
            
            <remarks>
                <para>
                Use <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt64)"/> to set the value of parameters like the <see cref="F:Peak.Can.Basic.PcanParameter.AcceptanceFilter11Bit"/>, and <see cref="F:Peak.Can.Basic.PcanParameter.AcceptanceFilter29Bit"/>. 
                </para>
                <para>Not all parameters are supported for all PCAN Channels. Using a parameter with a non-compatible Channel ends with an error.</para>
                <para>Not all parameters have write access. Using a read-only parameter with <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt64)" autoUpgrade="true"/> ends with an error.</para>
                <para>Except for a few parameters, the <paramref name="channel"/> has to be initialized first, before being able to configure a value on it. For more information see the <see cref="T:Peak.Can.Basic.PcanParameter"/> section.</para>
            </remarks>
            
            <param name="channel">The handle of a PCAN Channel.</param>
            <param name="parameter">The parameter whose value is to be configured.</param>
            <param name="buffer">Contains the 64-bit numeric value to be set.</param>
            
            <returns>
                <para>
                <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                    calling application.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/>: Indicates that the hardware represented by <paramref name="channel"/> is currently not available (detached or disabled).</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidParameter"/>: Indicates that the requested parameter value is not implemented or is not supported by the given PCAN Channel.</item>
                </list>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
            not installed or is not up to date.</exception> 
            
            <example>
                <para>
                The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32)"/> method using the USB interface (first PCAN-USB hardware). 
                The 29-bit acceptance filter is set to accept messages with Ids 1100h, 1400h, and 1500h. 
                </para>
                
                <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.SetValueUInt64" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.SetValueUInt64" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.SetValueUInt64" language="cpp"/>
            </example>
            
            <seealso cref="T:Peak.Can.Basic.PcanParameter">PCAN Parameters</seealso>
            <seealso cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt64@)" autoUpgrade="false"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.String)">
            <summary>
            Configures a string parameter value of a PCAN Channel. 
            </summary>
            
            <remarks>
                <para>
                Use <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt64)"/> to set the value of parameters like the <see cref="F:Peak.Can.Basic.PcanParameter.LogLocation"/>, and <see cref="F:Peak.Can.Basic.PcanParameter.TraceLocation"/>, among others. 
                </para>
                <para>Not all parameters are supported for all PCAN Channels. Using a parameter with a non-compatible Channel ends with an error.</para>
                <para>Not all parameters have write access. Using a read-only parameter with <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.String)" autoUpgrade="true"/> ends with an error.</para>
                <para>Except for a few parameters, the <paramref name="channel"/> has to be initialized first, before being able to configure a value on it. For more information see the <see cref="T:Peak.Can.Basic.PcanParameter"/> section.</para>
            </remarks>
            
            <param name="channel">The handle of a PCAN Channel.</param>
            <param name="parameter">The parameter whose value is to be configured.</param>
            <param name="buffer">Contains the string value to be set.</param>
            
            <returns>
                <para>
                <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHandle"/>: Indicates that the <paramref name="channel"/> contains an invalid value.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.Initialize"/>: Indicates that the <paramref name="channel"/> cannot be used because it was not found in the list of reserved Channels of the 
                    calling application.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.IllegalHardwareHandle"/>: Indicates that the hardware represented by <paramref name="channel"/> is currently not available (detached or disabled).</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidParameter"/>: Indicates that the requested parameter value is not implemented or is not supported by the given PCAN Channel.</item>
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidValue"/>: Indicates that one or more of the values passed to the method are invalid.</item>
                </list>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
            not installed or is not up to date.</exception> 
            
            <example>
                <para>
                The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.SetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.String)"/> method using the default Channel (<see cref="F:Peak.Can.Basic.PcanChannel.None"/>). 
                A custom location path for the log file is configured, the logging functionality activated, and a custom entry written.  
                <note>
                Changing the value of the parameter <see cref="F:Peak.Can.Basic.PcanParameter.LogLocation"/> automatically activates the logging functionality.
                </note>
                </para>
                
                <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.SetValueString" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.SetValueString" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.SetValueString" language="cpp"/>
            </example>
            
            <seealso cref="T:Peak.Can.Basic.PcanParameter">PCAN Parameters</seealso>
            <seealso cref="M:Peak.Can.Basic.Api.GetValue(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.PcanParameter,System.UInt32@)" autoUpgrade="true"/>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.GetErrorText(Peak.Can.Basic.PcanStatus,System.String@)">
            <summary>
            Returns a descriptive text of a given error code, using the operating system language, 
            or English, if it is not supported.
            </summary>
            
            <remarks>
            <para>The "Primary language IDs" are codes used by Windows OS from Microsoft, to identify a human language. Currently, 
            following languages are supported: 
            </para>
                <list type="table">
                    <listheader>
                        <term>Language</term>
                        <term>Primary Language ID</term>
                    </listheader>
                    <item>
                        <description>Neutral (System dependent)</description>
                        <description>00h (0)</description>
                    </item>
                    <item>
                        <description>English</description>
                        <description>09h (9)</description>
                    </item>
                    <item>
                        <description>German</description>
                        <description>07h (7)</description>
                    </item>
                    <item>
                        <description>French</description>
                        <description>0Ch (12)</description>
                    </item>
                    <item>
                        <description>Italian</description>
                        <description>10h (16)</description>
                    </item>
                    <item>
                        <description>Spanish</description>
                        <description>0Ah (10)</description>
                    </item>
                </list>
            </remarks>
            
            <param name="errorCode">The error code which description text is to be retrieved.</param>
            <param name="errorText">
            <para>Contains the description text of the given <paramref name="errorCode"/>.</para>
            <para>The content of <c>errorText</c> is only valid if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para>
            </param>
            
            <returns>
                <para>
                <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidValue"/>: Indicates that one or more of the values passed to the method are invalid. Possible causes are:
                    <list type="bullet">
                    <item>The given <paramref name="errorCode"/> is not defined.</item>
                    </list>
                    </item>
                </list>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
            not installed or is not up to date.</exception>
            
            <example>
                <para>
                The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.GetErrorText(Peak.Can.Basic.PcanStatus,System.String@)"/> method. 
                The description of all available error codes are requested.  
                </para>
                
                <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.GetErrorText" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.GetErrorText" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.GetErrorText" language="cpp"/>
            </example>
            
            <seealso cref="T:Peak.Can.Basic.PcanStatus">Error codes</seealso>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.GetErrorText(Peak.Can.Basic.PcanStatus,System.String@,Peak.Can.Basic.OutputLanguage)">
            <summary>
            Returns a descriptive text of a given error code, using a custom output language.
            </summary>
            
            <remarks>
            <para>The "Primary language IDs" are codes used by Windows OS from Microsoft, to identify a human language. Currently, 
            following languages are supported: 
            </para>
                <list type="table">
                    <listheader>
                        <term>Language</term>
                        <term>Primary Language ID</term>
                    </listheader>
                    <item>
                        <description>Neutral (System dependent)</description>
                        <description>00h (0)</description>
                    </item>
                    <item>
                        <description>English</description>
                        <description>09h (9)</description>
                    </item>
                    <item>
                        <description>German</description>
                        <description>07h (7)</description>
                    </item>
                    <item>
                        <description>French</description>
                        <description>0Ch (12)</description>
                    </item>
                    <item>
                        <description>Italian</description>
                        <description>10h (16)</description>
                    </item>
                    <item>
                        <description>Spanish</description>
                        <description>0Ah (10)</description>
                    </item>
                </list>
            </remarks>
            
            <param name="errorCode">The error code which description text is to be retrieved.</param>
            <param name="errorText">
            <para>Contains the description text of the given <paramref name="errorCode"/>.</para>
            <para>The content of <c>errorText</c> is only valid if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para>
            </param>
            <param name="language">The language used for the description text.</param>
            
            <returns>
                <para>
                <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidValue"/>: Indicates that one or more of the values passed to the method are invalid. Possible causes are:
                    <list type="bullet">
                    <item>The given <paramref name="errorCode"/> is not defined.</item>
                    </list>
                    </item>
                </list>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
            not installed or is not up to date.</exception>
            
            <example>
                <para>
                The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.GetErrorText(Peak.Can.Basic.PcanStatus,System.String@)"/> method. 
                The description of all available error codes are requested using Spanish as output language.  
                </para>
                
                <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.GetErrorTextLanguage" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.GetErrorTextLanguage" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.GetErrorTextLanguage" language="cpp"/>
            </example>
            
            <seealso cref="T:Peak.Can.Basic.PcanStatus">Error codes</seealso>
            
        </member>
        <member name="M:Peak.Can.Basic.Api.LookUpChannel(System.String,Peak.Can.Basic.PcanChannel@)">
            <summary>
            Finds the handle of a PCAN Channel that matches the given parameters.
            </summary>
            
            <remarks>
                <para>
                The <paramref name="parameters"/> string must contain name/value pairs separated with a '=' character.
                </para>
                <para>
                Each name/value pair must be separated with a ',' character.
                </para>
                <para>
                The current supported parameters and their value ranges are described within the <see cref="T:Peak.Can.Basic.ParameterValue.LookUp"/> class definition.
                </para>
            </remarks>
            
            <param name="parameters">A comma-separated string of search parameters, that is, parameter name/value pairs to be matched within a PCAN Channel.</param>
            <param name="foundChannel">
            <para>Contains the matching PCAN Handle, when found in the list of attached Channels.</para>
            <para><c>foundChannel</c> is only valid, if the returned value of this method is <see cref="F:Peak.Can.Basic.PcanStatus.OK"/>.</para></param>
            
            <returns>
                <para>
                <see cref="F:Peak.Can.Basic.PcanStatus.OK"/> is returned on success. The typical errors in case of failure are:        
                </para>
                <list type="bullet">
                    <item><see cref="F:Peak.Can.Basic.PcanStatus.InvalidValue"/>: Indicates that <paramref name="parameters"/> contains an invalid value.</item>
                </list>
            </returns>
            
            <exception cref="T:System.DllNotFoundException">The underlying PCANBasic.dll library could not be found.</exception>
            <exception cref="T:Peak.Can.Basic.PcanBasicException">The execution of a PCAN-Basic related check operation ended with an unexpected result. Typically, this exception is triggered when a device driver is 
            not installed or is not up to date.</exception>
            
            <example>
                <para>
                The following example shows the use of the <see cref="M:Peak.Can.Basic.Api.LookUpChannel(System.String,Peak.Can.Basic.PcanChannel@)" autoUpgrade="true"/> method. 
                The handle of a PCAN Channel of type PCI and ID 7 is requested.
                </para>
                
                <para>In case of failure, the returned code will be translated to a text (according with the operating system language) in English, German, Italian, French or Spanish, 
                and it will be shown to the user.
                </para>
                
                <code source="Examples\CS\Program.cs" region="Api.LookUpChannel" language="cs"/>
                <code source="Examples\VB\Program.vb" region="Api.LookUpChannel" language="vb"/>
                <code source="Examples\CPP\Program.cpp" region="Api.LookUpChannel" language="cpp"/>
            </example>
            
            <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.Bitrate)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Api.Initialize(Peak.Can.Basic.PcanChannel,Peak.Can.Basic.BitrateFD)" autoUpgrade="true"/>
            <seealso cref="M:Peak.Can.Basic.Api.GetAttachedChannels(Peak.Can.Basic.PcanChannelInformation[]@)"/>
            
        </member>
        <member name="T:Peak.Can.Basic.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescription_DE">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}&apos; ist mit folgendem Fehler fehlgeschlagen: {2}..
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescription_EN">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}&apos; failed with following error: {2}..
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescription_ES">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}&apos; falló con el siguiente error: {2}..
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescription_FR">
            <summary>
              Looks up a localized string similar to &apos;{0}.{1}&apos; a échoué avec l&apos;erreur suivante : {2}..
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescription_IT">
            <summary>
              Looks up a localized string similar to &apos;{0}. {1}&apos; non riuscito con il seguente errore: {2}..
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescriptionError_DE">
            <summary>
              Looks up a localized string similar to Die Übersetzung von &apos;{0}&apos; kann nicht abgerufen werden..
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescriptionError_EN">
            <summary>
              Looks up a localized string similar to Unable to retrieve translation of &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescriptionError_ES">
            <summary>
              Looks up a localized string similar to No se puede recuperar la traducción de &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescriptionError_FR">
            <summary>
              Looks up a localized string similar to Impossible de récupérer la traduction de &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Peak.Can.Basic.Properties.Resources.ExceptionDescriptionError_IT">
            <summary>
              Looks up a localized string similar to Impossibile recuperare la traduzione di &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Peak.Can.NamespaceGroupDoc">
            <summary>
            The namespace group <c>Peak.Can</c> contains different classes and other data types for loading and using 
            the native <c>PCANBasic.dll</c> library in .NET based projects.
            </summary>
        </member>
        <member name="T:Peak.Classes.NamespaceGroupDoc">
            <summary>
            The namespace group <c>Peak.Classes</c> contains different general purpose classes.
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.NamespaceDoc">
            <summary>
            The namespace <c>Peak.Classes.Time</c> contains different classes and data types
            intended for handling time related operations.
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.StatusChangedEventArg">
            <summary>
            The argument used for the Events Start and Stop of the <see cref="T:Peak.Classes.Time.WindowsPerformanceTimer"/> class
            </summary>
        </member>
        <member name="M:Peak.Classes.Time.StatusChangedEventArg.#ctor(System.UInt32)">
            <summary>
            StartStopEventArg Constructor
            </summary>
            <param name="time">Time elapsed since Windows was started until 
            the event was received</param>
        </member>
        <member name="P:Peak.Classes.Time.StatusChangedEventArg.Timestamp">
            <summary>
            Time elapsed since Windows was started until 
            the event was received
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.EnabledChangedEventHandler">
            <summary>
            Represents the method that will handle activation changes of a <see cref="T:Peak.Classes.Time.WindowsPerformanceTimer"/> object
            </summary>
            <param name="sender">The object who is making the calling</param>
            <param name="e">A <see cref="T:Peak.Classes.Time.StatusChangedEventArg"/> that contains the event data</param>
        </member>
        <member name="M:Peak.Classes.Time.WindowsPerformanceTimer.#ctor">
            <summary>
            Constructor of the <see cref="T:Peak.Classes.Time.WindowsPerformanceTimer"/> class 
            </summary>
        </member>
        <member name="M:Peak.Classes.Time.WindowsPerformanceTimer.Finalize">
            <summary>
            Destructor of the <see cref="T:Peak.Classes.Time.WindowsPerformanceTimer"/> class 
            </summary>
        </member>
        <member name="M:Peak.Classes.Time.WindowsPerformanceTimer.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:Peak.Classes.Time.WindowsPerformanceTimer.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
            <param name="disposing">If the user is disposing the object</param>
        </member>
        <member name="P:Peak.Classes.Time.WindowsPerformanceTimer.Enabled">
            <summary>
            Activates or deactivates the timer
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.WindowsPerformanceTimer.Accuracy">
            <summary>
            Retrieves the accuracy of the timer, in milliseconds
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.WindowsPerformanceTimer.Interval">
            <summary>
            Gets or sets the time interval for the time events 
            </summary>
        </member>
        <member name="E:Peak.Classes.Time.WindowsPerformanceTimer.Elapsed">
            <summary>
            Occurs when the interval elapses
            </summary>
        </member>
        <member name="E:Peak.Classes.Time.WindowsPerformanceTimer.Disposed">
            <summary>
            Occurs when the component is disposed by a call to the <see cref="M:Peak.Classes.Time.WindowsPerformanceTimer.Dispose"/> method
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.LinuxPerformanceTimer.Enabled">
            <summary>
            Get or set whether the MMTimer is running
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.LinuxPerformanceTimer.Accuracy">
            <summary>
            Retrieves the accuracy of the timer, in milliseconds
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.LinuxPerformanceTimer.Interval">
            <summary>
            Get or set the time interval for the time events 
            </summary>
        </member>
        <member name="E:Peak.Classes.Time.LinuxPerformanceTimer.Elapsed">
            <summary>
            Occurs when the <see cref="P:Peak.Classes.Time.LinuxPerformanceTimer.Interval"/> elapses.
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.PerformanceTimer">
            <summary>
            The <see cref="T:Peak.Classes.Time.PerformanceTimer"/> class allows an application to schedule periodic 
            time events.
            </summary>
        </member>
        <member name="M:Peak.Classes.Time.PerformanceTimer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Peak.Classes.Time.PerformanceTimer"/> class.
            </summary>
            <param name="interval">Interval, expressed in milliseconds, at which to raise the <see cref="E:Peak.Classes.Time.PerformanceTimer.Elapsed"/> event.</param>
        </member>
        <member name="P:Peak.Classes.Time.PerformanceTimer.SupportsHighResolution">
            <summary>
            Indicates if the timer uses a high resolution performance counter.
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.PerformanceTimer.Interval">
            <summary>
            Get or set the time interval, in milliseconds, for the time events.
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.PerformanceTimer.Accuracy">
            <summary>
            Retrieves the accuracy of the timer, in milliseconds.
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.PerformanceTimer.Enabled">
            <summary>
            Get or set whether the <see cref="T:Peak.Classes.Time.PerformanceTimer"/> is running.
            </summary>
        </member>
        <member name="E:Peak.Classes.Time.PerformanceTimer.Elapsed">
            <summary>
            Occurs each time the number of milliseconds specified by <see cref="P:Peak.Classes.Time.PerformanceTimer.Interval"/> expires. 
            </summary>
            <remarks>
            <note type="important">
            This event is fired from a background thread. It may be needed to do synchronization
            operations with the main thread, if visual controls are involved.
            </note>
            </remarks>
        </member>
        <member name="T:Peak.Classes.Time.TimeResolution">
            <summary>
            Representation of time values.
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.TimeResolution.Nanoseconds">
            <summary>
            Represents a time value in nanoseconds.
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.TimeResolution.Microseconds">
            <summary>
            Represents a time value in microseconds.
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.TimeResolution.Milliseconds">
            <summary>
            Represents a time value in milliseconds.
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.TimeResolution.Seconds">
            <summary>
            Represents a time value in seconds.
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.SystemTimestamp">
            <summary>
            Provides access to high-resolution system timestamps.
            </summary>
        </member>
        <member name="M:Peak.Classes.Time.SystemTimestamp.#ctor(Peak.Classes.Time.TimeResolution)">
            <summary>
            Create an instance of HighResolutionTimestamp to get timestamps in a preferred resolution.
            </summary>
            <param name="resolution">The time resolution wanted to be used for timestamps retrieved by this object</param>
            <remarks>The default time resolution used is microseconds.</remarks>
        </member>
        <member name="P:Peak.Classes.Time.SystemTimestamp.Now">
            <summary>
            Retrieves the current number of ticks of the underlying time system, expressed in the time resolution defined by <see cref="P:Peak.Classes.Time.SystemTimestamp.Resolution"/>.
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.SystemTimestamp.Resolution">
            <summary>
            Time resolution in which the Timestamp is retrieved.
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.SystemTimestamp.ElapsedSeconds">
            <summary>
            Retrieves the amount of elapsed seconds within the underlying timer.
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.SystemTimestamp.ElapsedMilliseconds">
            <summary>
            Retrieves the amount of elapsed milliseconds within the underlying timer.
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.SystemTimestamp.ElapsedMicroseconds">
            <summary>
            Retrieves the amount of elapsed microseconds within the underlying timer.
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.SystemTimestamp.ElapsedNanoseconds">
            <summary>
            Retrieves the amount of elapsed nanoseconds within the underlying timer.
            </summary>
        </member>
        <member name="P:Peak.Classes.Time.SystemTimestamp.Accuracy">
            <summary>
            Retrieves the time in nanoseconds, in which one tick is generated within the underlying time system.
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.TimeProc">
            <summary>
            Delegate who is the callback function called once upon the expiration 
            of a single event or periodically upon the expiration of periodic events
            </summary>
            <param name="id">Identifier of the timer event. This identifier was returned by 
            the timeSetEvent function when the timer event was set up</param>
            <param name="msg">Reserved; do not use</param>
            <param name="userCtx">User instance data supplied to the dwUser parameter of timeSetEvent</param>
            <param name="rsv1">Reserved; do not use</param>
            <param name="rsv2">Reserved; do not use</param>
        </member>
        <member name="T:Peak.Classes.Time.MMTIME">
            <summary>
            The MMTIME structure contains timing information for different types of multimedia data
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.wType">
            <summary>
            Time format
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.ms">
            <summary>
            Number of milliseconds. Used when wType is TIME_MS
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.sample">
            <summary>
            Number of samples. Used when wType is TIME_SAMPLES
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.cb">
            <summary>
            Byte count. Used when wType is TIME_BYTES
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.ticks">
            <summary>
            Ticks in MIDI stream. Used when wType is TIME_TICKS
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.smpteHour">
            <summary>
            Hours
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.smpteMin">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.smpteSec">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.smpteFrame">
            <summary>
            Frames
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.smpteFps">
            <summary>
            Frames per second (24, 25, 29 (30 drop), or 30)
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.smpteDummy">
            <summary>
            Dummy byte for alignment
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.smptePad0">
            <summary>
            Padding 0
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.smptePad1">
            <summary>
            Padding 1
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTIME.midiSongPtrPos">
            <summary>
            Song pointer position. Used when wType is TIME_MIDI
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.TIMECAPS">
            <summary>
            The TIMERCAPS structure contains information about the resolution of the timer
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.TIMECAPS.wPeriodMin">
            <summary>
            Minimum supported resolution
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.TIMECAPS.wPeriodMax">
            <summary>
            Maximum supported resolution
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.MMReturs">
            <summary>
            Return values for the Multimedia timer Functions
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.NOERROR">
            <summary>
            No Error.  Operation successful
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.TIMERR_BASE">
            <summary>
            Base error number for errors of type TIMERR
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.TIMERR_NOCANDO">
            <summary>
            Operation was not possible to make
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.TIMERR_STRUCT">
            <summary>
            The given structure caused an error
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_BASE">
            <summary>
            Base error number for errors of type MMSYSTERR (System errror)
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_ERROR">
            <summary>
            An Error occurred
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_BADDEVICEID">
            <summary>
            Device ID was Incorrect
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_NOTENABLED">
            <summary>
            Device is not enabled
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_ALLOCATED">
            <summary>
            Error allocating memory
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_INVALHANDLE">
            <summary>
            Handle is Invalid
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_NODRIVER">
            <summary>
            No Driver
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_NOMEM">
            <summary>
            Not enough memory
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_NOTSUPPORTED">
            <summary>
            Operation is not supported
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_BADERRNUM">
            <summary>
            Bad Error number 
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_INVALFLAG">
            <summary>
            Invalid Flag
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_INVALPARAM">
            <summary>
            Invalid Parameter
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_HANDLEBUSY">
            <summary>
            Handle is Busy
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_INVALIDALIAS">
            <summary>
            Invalid Alias
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_BADDB">
            <summary>
            Bad DB
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_KEYNOTFOUND">
            <summary>
            Key Not Found
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_READERROR">
            <summary>
            Read Error
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_WRITEERROR">
            <summary>
            Write Error
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_DELETEERROR">
            <summary>
            Delete Error
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_VALNOTFOUND">
            <summary>
            Value not Found
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_LASTERROR">
            <summary>
            Last Error
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMReturs.MMSYSERR_NODRIVERCB">
            <summary>
            No Driver CB
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.MMTFormats">
            <summary>
            Time format
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTFormats.TIME_NONE">
            <summary>
            There is not a Format defined
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTFormats.TIME_MS">
            <summary>
            Time in milliseconds
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTFormats.TIME_SAMPLES">
            <summary>
            Number of waveform-audio samples
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTFormats.TIME_BYTES">
            <summary>
            Current byte offset from beginning of the file
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTFormats.TIME_SMPTE">
            <summary>
            SMPTE (Society of Motion Picture and Television Engineers) time
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTFormats.TIME_MIDI">
            <summary>
            MIDI time
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMTFormats.TIME_TICKS">
            <summary>
            Ticks within a MIDI stream
            </summary>
        </member>
        <member name="T:Peak.Classes.Time.MMEventType">
            <summary>
            Timer event type
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMEventType.TIME_ONESHOT">
            <summary>
            Event occurs once, after uDelay milliseconds
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMEventType.TIME_PERIODIC">
            <summary>
            Event occurs every uDelay milliseconds
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMEventType.TIME_CALLBACK_FUNCTION">
            <summary>
            When the timer expires, Windows calls the 
            function pointed to by the lpTimeProc parameter. This is the default
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMEventType.TIME_CALLBACK_EVENT_SET">
            <summary>
            When the timer expires, Windows calls the SetEvent function to set
            the event pointed to by the lpTimeProc parameter. The dwUser parameter is ignored
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMEventType.TIME_CALLBACK_EVENT_PULSE">
            <summary>
            When the timer expires, Windows calls the PulseEvent function to pulse the event
            pointed to by the lpTimeProc parameter. The dwUser parameter is ignored
            </summary>
        </member>
        <member name="F:Peak.Classes.Time.MMEventType.TIME_KILL_SYNCHRONOUS">
            <summary>
            Passing this flag prevents an event from occurring after the timeKillEvent() 
            function is called
            </summary>
        </member>
        <member name="T:Peak.Classes.SubArray">
            <summary>
            Retrieves Sub-arrays from a one-dimensional array.
            </summary>
        </member>
        <member name="M:Peak.Classes.SubArray.GetBytes(System.Byte[],System.Int32)">
            <summary>
            Retrieves a subarray of bytes.
            </summary>
            <param name="source">source array of bytes containing the desired subarray.</param>
            <param name="startIndex">index in the source array where the subarray begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or
            startIndex is greater than the length of source.</exception>
            <returns>A byte array equivalent to the subarray that begins at startIndex.</returns>
        </member>
        <member name="M:Peak.Classes.SubArray.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieves a subarray of bytes.
            </summary>
            <param name="source">source array of bytes containing the desired subarray.</param>
            <param name="startIndex">index in the source array where the subarray begins.</param>
            <param name="length"></param>
            <returns></returns>
        </member>
    </members>
</doc>
